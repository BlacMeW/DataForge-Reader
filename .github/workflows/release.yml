name: Build and Release AppImage

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  packages: write

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-venv python3-pip nodejs npm wget imagemagick fuse libfuse2
        
    - name: Verify environment
      run: |
        echo "� Environment verification:"
        echo "Node: $(node --version)"
        echo "NPM: $(npm --version)"  
        echo "Python: $(python3 --version)"
        echo "Pip: $(pip3 --version)"
        echo "Working directory: $(pwd)"
        ls -la
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        echo "📦 Installing frontend dependencies..."
        rm -rf node_modules package-lock.json
        npm install
        echo "✅ Frontend dependencies installed"
        
    - name: Test frontend build
      run: |
        cd frontend
        echo "🧪 Testing frontend build..."
        npm run build
        echo "✅ Frontend builds successfully"
        ls -la dist/
      
    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          echo "🏷️ Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          echo "🏷️ Generated dev version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Prepare build scripts
      run: |
        chmod +x build-appimage.sh optimize-frontend.sh
        echo "✅ Build scripts made executable"
        
    - name: Create simplified AppImage build
      run: |
        set -e
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "🏗️ Building AppImage with version: $VERSION"
        
        # Create basic AppDir structure
        mkdir -p AppDir/opt/DataForge-Reader/backend
        mkdir -p AppDir/opt/DataForge-Reader/venv
        
        # Copy backend files
        cp -r backend/* AppDir/opt/DataForge-Reader/backend/
        
        # Copy frontend build
        cp -r frontend/dist/* AppDir/opt/DataForge-Reader/
        
        # Install Python dependencies in virtual environment
        cd AppDir/opt/DataForge-Reader
        python3 -m venv venv
        source venv/bin/activate
        pip install -r backend/requirements.txt
        cd ../../../
        
        # Create desktop file
        cat > AppDir/DataForge-Reader.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=DataForge Reader
        Comment=ML Dataset Creation Tool
        Exec=AppRun
        Icon=DataForge-Reader
        Categories=Office;Development;
        EOF
        
        # Create simple application icon (256x256 PNG) - fallback approach
        if ! convert -size 256x256 xc:'#2563eb' -fill white -draw 'circle 128,128 64,64' AppDir/DataForge-Reader.png 2>/dev/null; then
          # Fallback: create basic solid color icon
          convert -size 256x256 xc:'#2563eb' AppDir/DataForge-Reader.png 2>/dev/null || {
            # Ultimate fallback: create SVG icon
            cat > AppDir/DataForge-Reader.svg << 'SVGEOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <svg width="256" height="256" xmlns="http://www.w3.org/2000/svg">
          <rect width="256" height="256" fill="#2563eb" rx="32"/>
          <circle cx="128" cy="128" r="64" fill="white"/>
        </svg>
        SVGEOF
            echo "Created SVG icon as fallback"
          }
        fi
        
        # Create simple AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        APPDIR="$(dirname "$(readlink -f "$0")")"
        export PATH="$APPDIR/opt/DataForge-Reader/venv/bin:$PATH"
        cd "$APPDIR/opt/DataForge-Reader"
        
        # Create startup script with proper error handling
        echo "🚀 Starting DataForge Reader..."
        
        # Start backend on port 8000 (matches frontend expectations)
        echo "📊 Starting backend server..."
        python3 -m uvicorn backend.main:app --host 127.0.0.1 --port 8000 --log-level info &
        BACKEND_PID=$!
        
        # Wait for backend to start and test connection
        echo "⏳ Waiting for backend to initialize..."
        for i in {1..10}; do
          if curl -s http://127.0.0.1:8000/api/health > /dev/null 2>&1; then
            echo "✅ Backend is ready!"
            break
          fi
          sleep 1
        done
        
        # Start simple HTTP server for frontend
        echo "🌐 Starting frontend server..."
        python3 -m http.server 5173 &
        FRONTEND_PID=$!
        
        echo "🚀 DataForge Reader started!"
        echo "📊 Backend: http://127.0.0.1:8000"
        echo "🌐 Frontend: http://127.0.0.1:5173"
        
        # Open browser if available
        if command -v xdg-open > /dev/null; then
            xdg-open http://127.0.0.1:5173
        fi
        
        # Wait for processes
        wait $BACKEND_PID $FRONTEND_PID
        EOF
        
        chmod +x AppDir/AppRun
        
        # Download and use AppImageTool
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Build AppImage
        ./appimagetool-x86_64.AppImage AppDir DataForge-Reader-$VERSION-x86_64.AppImage
        
        echo "✅ AppImage created: DataForge-Reader-$VERSION-x86_64.AppImage"
        
    - name: Verify AppImage
      run: |
        ls -la *.AppImage
        file *.AppImage
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: DataForge Reader ${{ steps.get_version.outputs.version }}
        body: |
          ## DataForge Reader ${{ steps.get_version.outputs.version }}
          
          ### 📦 Portable Linux Application
          
          **Download:** `DataForge-Reader-${{ steps.get_version.outputs.version }}-x86_64.AppImage`
          
          ### 🚀 Quick Start
          ```bash
          # Download and run
          chmod +x DataForge-Reader-*-x86_64.AppImage
          ./DataForge-Reader-*-x86_64.AppImage
          ```
          
          ### ✨ Features
          - 📄 **PDF Processing** - Upload and parse PDF documents
          - 🏷️ **Smart Annotation** - AI-powered data labeling
          - 📊 **Dataset Export** - Multiple format support (JSON, CSV, JSONL)
          - 📋 **Custom Templates** - Design your own data extraction templates
          - 🔍 **Data Analytics** - Built-in dataset analysis tools
          - 💾 **Project Management** - Save and manage multiple projects
          
          ### 🖥️ System Requirements
          - **OS:** Linux (glibc 2.17+)
          - **Architecture:** x86_64
          - **RAM:** 512MB minimum, 2GB recommended
          - **Disk:** 200MB for AppImage + storage for your data
          
          ### 🛠️ What's New
          - Self-contained portable application
          - No installation required
          - Automatic port detection
          - Improved startup performance
          
          ### 🐛 Known Issues
          - First startup may take 3-5 seconds
          - Requires FUSE on some older systems
          
          ### 📚 Documentation
          See [User Guide](https://github.com/${{ github.repository }}/blob/main/USER_GUIDE.md) for detailed usage instructions.
          
          ---
          
          **File Size:** ~35-40MB | **No dependencies required** | **Works on most Linux distributions**
        draft: false
        prerelease: false
        files: |
          DataForge-Reader-*-x86_64.AppImage
        
    - name: Release completed
      run: |
        echo "✅ AppImage built and released successfully!"
        echo "📦 File: DataForge-Reader-${{ steps.get_version.outputs.version }}-x86_64.AppImage"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}"