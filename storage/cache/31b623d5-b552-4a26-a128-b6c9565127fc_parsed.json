{
  "file_id": "31b623d5-b552-4a26-a128-b6c9565127fc",
  "paragraphs": [
    {
      "id": "p_2_0",
      "page": 2,
      "paragraph_index": 0,
      "text": "Logic for Programmers (version 0. 11. 1) Hillel Wayne Aug06,2025",
      "word_count": 10,
      "char_count": 64,
      "annotations": {},
      "sentence_count": 2,
      "avg_word_length": 5.5,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": true,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_3_0",
      "page": 3,
      "paragraph_index": 0,
      "text": "Acknowledgements Thanksto Tsvetan Tsvetanov,Predrag Gruevsky,Jeremy Kun,Saul Pwanson,Yeray Cabello,Igor Kuvychko,Puikei Cheng,Daniel Prager,Sviatoslav Abakumov,Harald MMüller,and Marianne Bellotiforfeedbackoncontent. Thanksto David Mazarro, Jeroen Heijmans,Ophelia Stevens,Oyendrila Dobe,Nirmalya Sengupta,Mike Mull, and Marcus Millinforidentifyingerrorsinthetext. Thanksto Tikhon Jelvisforsomeadviceoncoveringconstraintsolvers. Thanksto Zac Hatfield Doddsforhelpingwith Sphinxand Alexey Zubkovforadvice ontypesetting. Tim Nelson,Marianne Belloti,and Saul Pwansonallhelpedmekeeponscheduleat variouspointsinthisbook'sproduction. i",
      "word_count": 45,
      "char_count": 629,
      "annotations": {},
      "sentence_count": 5,
      "avg_word_length": 13.0,
      "has_numbers": false,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_4_0",
      "page": 4,
      "paragraph_index": 0,
      "text": "Contents 1 Intro 1 1. 1 Beta Notes 1 1. 2 Newinv0. 11: 1 1. 3 Whythisbook 2 1. 4 Design Philosophy 3 1. 5 Howto Read This Book 3 2 ACrash Coursein Logic 5 2. 1 Predicates 5 2. 2 Sets 10 2. 3 Quantifiers 13 2. 4 Notation 16 2. 5 In Practice: Rewrite Rules 18 2. 6 Summary 21 3 Refactoring Code 22 3. 1 Simplifying Conditionals 22 3. 2 Refactoringwith Quantifiers 24 3. 3 Programsarenot Math 29 3. 4 Usingsets 30 3. 5 Summary 31 4 Writing Better Tests 32 4. 1 Strongand Weak Tests 32 4. 2 In Practice: Property-Based Testing 35 4. 3 Noteson Property Testing 37 4. 4 Summary 40 5 Functional Correctness 41 5. 1 Assertions 41 5. 2 Contracts 42 5. 3 Contractsvs Types 46 5. 4 Polymorphismand Refactoring 48 5. 5 Summary 51 6 Proving Code Correct 53 6. 1 Whatisaproof? 53 6. 2 Proofs 54 6. 3 Formal Verification 58 6. 4 Summary 61 7 Case Analysis 63 7. 1 Decision Tables 63 ii",
      "word_count": 175,
      "char_count": 870,
      "annotations": {},
      "sentence_count": 32,
      "avg_word_length": 3.98,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_5_0",
      "page": 5,
      "paragraph_index": 0,
      "text": "7. 2 Another Requirements Example 66 7. 3 Analyzing Code 67 7. 4 Techniques 68 7. 5 Whenisa Tablethe Wrong Choice? 71 7. 6 Summary 72 8 Databases 73 8. 1 ARelational Model Overview 73 8. 2 Querying Data 74 8. 3 Database Constraints 78 8. 4 Constraints Are Queries 80 8. 5 Summary 83 9 Data Modeling 85 9. 1 Abstractingfrom Data 85 9. 2 In Practice: Formal Specification 86 9. 3 Finding Bugswith Specifications 91 9. 4 Summary 93 10System Modeling 95 10. 1 Situation 95 10. 2 The Logic 95 10. 3 In Practice: TLA+ 100 10. 4 Specificationinthewild 105 10. 5 Summary 106 11Solvers 108 11. 1 Logic 108 11. 2 In Practice: Solvers 110 11. 3 Whichtouse? 115 11. 4 Summary 116 12Logic Programming 117 12. 1 Prolog 117 12. 2 Deductive Databases 119 12. 3 Constraint Logic Programming 121 12. 4 Planning 121 12. 5 Summary 123 A Math Notation 125 A. 1 Basic Logic Symbols 125 A. 2 Quantified Expressions 126 A. 3 Tautologies 126 B Useful Rewrite Rules 127 iii",
      "word_count": 178,
      "char_count": 947,
      "annotations": {},
      "sentence_count": 33,
      "avg_word_length": 4.33,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_6_0",
      "page": 6,
      "paragraph_index": 0,
      "text": "B. 1 Tableof Tautologies 127 C Beyond Logic 129 C. 1 The Limit: Russell’s Paradox 129 C. 2 Higher Order Logic 130 C. 3 Constructive Logic 130 C. 4 Modal Logic 131 D Answersto Exercises 132 Index 143 iv",
      "word_count": 39,
      "char_count": 201,
      "annotations": {},
      "sentence_count": 5,
      "avg_word_length": 4.18,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_7_0",
      "page": 7,
      "paragraph_index": 0,
      "text": "Chapter 1 Intro 1. 1 Beta Notes I’mdoingearlyaccesswiththisbook,sothisisallbeta. Mostofthematerialisnow in,but Istillneedtopolishandreviseit,addmoreexercises,improveformatting, andincorporatereaderfeedback. Iwelcomeanyandallcomments. I’mparticularlyinterestedin: 1. Dotheexamplesseemusefultoyou? Weretheexerciseshelpful? 2. Whichtopicsneedthemostfocus? 3. Whatresourceswouldbegoodtorecommendas“furtherreading”? 4. Whatexamplesandnewtopicswouldyouliketosee? 5. Whatneedsmoreexercises? Youcanemailmeath@hillelwayne. com. Thankyouverymuch! Note Anythinginanoteboxisamessagefrommetoyouasearlyreaders. Things I’muncertainabout,things Iplantopolishmore,thingsthat Iplantowrite,etc. [[doublebraces]]aresimilar. Feelfreetothrowcommentsmyway! 1. 2 New in v0. 11: • Brandnewchapter,“Proving Code Correct”,coveringproofs,loopinvariants, formalverification • Totalrewriteof“Database”chapter: – Now covers database representations, relational model, queries, joins, andconstraints – Twonewexecutable SQLexamplesonconstraints – Onenewimage • Totalrewriteof“Functional Correctness”: – Nowcoversassertions,MISU,polymorphism,advice 1",
      "word_count": 70,
      "char_count": 1116,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 14.96,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_8_0",
      "page": 8,
      "paragraph_index": 0,
      "text": "2 CHAPTER1. INTRO – Loopinvariantsandformalverificationmovedtoproofschapter • Totalrewriteof“Case Coverage”,nowcalled“Case Analysis”: – Newintroductionandmotivatingexample – Morematerialonanalysingcodewithdecisiontables,techniques,when nottouse DTs – Redundantexamplesremoved • Logic chapter improved, now covers the way-more-common scoped quanti- fiersbeforeunscoped • Fixed“symmetricdifference”exercise • Sixexercisesremoved,elevenadded(+5total) • Betterformatforprooftablesandrewriterules • Someinitialtableofcontentstweaks • Fixed PDFbug: admonitionsidebarsnowrendercorrectlyin Acrobat 1. 3 Why this book If Istartabuildat3:05PMandittakes12minutestocomplete,whenwill thebuildbefinished? Toanswerthisquestion,weneedtohowtomanipulatenumbers. Themathematics ofnumbersiscalledarithmetic. Arithmeticshowsushowtomultiplytwonumbers, usefractions,determinewhichoftwonumbersislarger,andmore. If Ihavetheconditionalif(sensor_offline||inactive), and Iknowforsure thatsensor_offlineistrue,doesthevalueofinactivematter? Toanswerthisquestion,weneedtoknowhowtomanipulatebooleans. Themathe- maticsofbooleansiscalledlogic. Logicshowsushowtosimplifyabooleanexpres- sion,usesets,determineifonestatementisstrongerthananother,andmore. Butthereisonekeydifferencebetweenarithmeticandlogic. Weweretaughtarith- meticinelementaryschool. Fewofuswereformallytaughtlogic. Mostprogram- merspickupalittlelogicbyosmosis, buteventhatrarelyexposespeopletoany- thingbeyondthebasics. This makes logic the single most useful topic in math a programmer can learn. But how are we supposed to learn it? There are plenty of books available written forphilosophers,mathematicians,andcomputerscientists,whoallhavefarmore need for the theory than the practice. There are no books on logic meant for the",
      "word_count": 118,
      "char_count": 1762,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 13.94,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_9_0",
      "page": 9,
      "paragraph_index": 0,
      "text": "1. 4. DESIGNPHILOSOPHY 3 self-studying programmer, who is looking for practical skills useful in day-to-day work. Itisasifnobodywillteachushowtorideabicycle,onlyhowtobuildone. Thatisthegoalofthisbook. Iaimtoteachyouthebasicsoflogicandhowtoapply ittovariouseverydaysoftwareproblems,liketestingcode,designingadatabase,or workingoutcustomerrequirements. Bytheendofthisbook,youwillbecomfort- ablemanipulatinglogicalexpressionsandhaveagreaterunderstandingofallofthe wayssoftwareuseslogic,implicitlyornot. 1. 4 Design Philosophy Thisbookismeantspecificallyforprogrammerswithlittletonofamiliarywithfor- mal math. In all cases, I opted for accessibility and ease-of-use over precision or rigor. Thisisatechnicalhow-to,notatextbook. 1. 4.1 Notation Mathematicssharesmanyoperationsincommonwithprogrammingbutusesdif- ferentrepresentations, suchaswriting“and”as∧insteadof&&. Iwillusingpro- grammingterminologywhereverpossible. Iincludedanappendix(page125)which mapsconventionalprogrammingsymbolstomathsymbols. Incaseswheremathsymbolsdon’thavecommonprogramminganalogs(suchas ∀),Ihaveoptedtouseanexplicit Englishequivalent(suchasall). Lastly comes the question of array indexing. Does the array arr start at arr[1] or arr[0]?Thereisnouniversalprogrammingconvention,asdifferentlanguagesmake differentchoices. Iwouldusethemathematician’sconventionexceptthatdoesnot exist either: different branches of mathematics make different choices too! So I willdefaultto0-basedindexingunlessdemonstratingatoolorlanguagewhichuses 1-basedindexing,which Iwillexplicitlynote. 1. 5 How to Read This Book I recommend first reading A Crash Course in Logic (page 5), and then moving to whichevertechniquelooksmostinteresting. Techniqueschaptersareindependent exceptwhenotherwisenoted,inwhichcasebackreferencesareprovided. Thefirstfivetechniques(startingwith Refactoring Code(page22))focusonhowlogic appliestoeverydaysoftware. Thelastfour(startingwith Data Modeling (page85))",
      "word_count": 124,
      "char_count": 1939,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 14.65,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_10_0",
      "page": 10,
      "paragraph_index": 0,
      "text": "4 CHAPTER1. INTRO coverspeciallogic-basedtoolsthatunlockpowerfulnewsolutionstodifficultsoft- wareproblems. Large code samples are available online at https://github. com/ logicforprogrammers/book-assets. 1. 5.1 Exercises Exercises are provided to help you check your knowledge and develop your skills further. Allexerciseshavesolutionsinthebackofthebook. Someoftheexercises havemultiplepossiblesolutions. Youranswercanbecorrectevenifitdiffersfrom the“official”solution! Somequestionsinvolvewritingshortsnippetsofcode. Inthesecases,usewhatever languageyoulike. Iwillpersonallygiveexamplesin Pythonorpseudocode. When writing Python,Ihavetriedtomakeitasaccessibleaspossible,meaningitdoesnot dothingsinanidiomaticway.",
      "word_count": 46,
      "char_count": 713,
      "annotations": {},
      "sentence_count": 14,
      "avg_word_length": 14.52,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_11_0",
      "page": 11,
      "paragraph_index": 0,
      "text": "Chapter 2 A Crash Course in Logic Formallogicisaverypowerfultool,butit’salsoverysimple. Overthischapter,we’ll motivateandexplainallofthebasicconceptsandsyntax. Muchofitmayalready befamiliartoyoufromprogrammingexperience! 2. 1 Predicates Toafirstapproximation,apredicateisafunctionthatreturnsaboolean. Youhave probablywrittendozensofpredicatesasaprogrammer. Theseareallpredicates: • Positive(x)istrueifxisgreaterthan0 • Is Sum(x,y,z)istrueifxplusyequalsz • RAMAt Least(c,r)istrueifthecomputerchasatleastrbytesofphysical RAM. Isaytoafirstapproximationbecausepredicatesareamathematicalconcept, nota programming construct. A program function needs to come with a way of com- putingtheanswer, whileapredicatesimplydefineswhattheansweris. Take RA- MAt Least: the software implementation would depend on the programming lan- guage, operating system, and possibly even user permissions. But the predicate? Trueifthecomputerhasthe RAM,falseifnot. That’sit. Thismeanspredicatescanbemoreabstractthanprogrammingfunctions,express- ingthingsthatwedon’tyetknowhowtocomputeorevencancompute. Theseare allvalidpredicates,too: • Can Run Program(c)istrueifthecomputerciscapableofrunningourprogram, whatever“capable”endsupmeaning • Rainy Day In Ca(date)istrueifondate,itrainedsomewherein Canada • Not Alone()istrueifaliensarereal. [[That said, predicates don’t have to be abstract. If we know how to compute the resultofapredicate, there’snothingwrongwithjustimplementingit! Thepower ofpredicatesisthattheycanspanthefullrangeofabstraction.]] Solet’sintroduce somesyntax. Ifapredicateisabstract,Iwillwrapthebodyin`backticks`: # concrete Positive(x) = x > 0 Is Sum(x, y, z) = x + y == z (continuesonnextpage) 5",
      "word_count": 131,
      "char_count": 1687,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 11.89,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_12_0",
      "page": 12,
      "paragraph_index": 0,
      "text": "6 CHAPTER2. ACRASHCOURSEINLOGIC (continuedfrompreviouspage) # abstract Can Run Program(c) = `c can run our program` Thisisnotacommonmathematicianconvention,butit’sclearenoughtoprogram- mers. Todistinguishpredicatesfrom“ordinaryfunctions”likeadd_two,predicates willalwaysbe Title Casedandfunctionswillalwaysbesnake_cased. 2. 1.1 APractical Example Predicatesactasabridgebetweenhowwetalkaboutsystemsinahumanlanguage andhowweencodetheminaprogramminglanguage. Let’scomebackto Can Run- Program. Iincludedthatexamplebecause Ioncesawaprogramwiththeserequire- ments: Thecomputermusthaveenough RAMandafast CPUoragoodgraphics card(GPU). Ifoundthisconfusing. Thesentencesoundsnaturalenoughin English,butwecan findaproblembyformalizingwithlogic. Wewillstartbyfirstwritingpredicatesfor eachsubrequirement,likeso: RAM(c) = `c has enough RAM` CPU(c) = `c has a fast CPU` GPU(c) = `c has a good GPU` These predicates are abstract because we don’t know the specifics of what these mean. Is64gb“enough RAM”?Is32gb? Thespecificsdon’tmatterforus,because thisisalreadyenoughtowrite Can Run Programasaconcretemathematicalexpres- sion. Can Run Program(c) = RAM(c) && CPU(c) || GPU(c) (Herewe’reusing&&for ANDand||for OR. Thisisjusttheconventionforthisbook: youmayseeotherresourcesuse“and”and“or”orsomethingelse. Mathematicians use∧and∨. I’mnotgoingtousethesebecausethey’renotfoundonthekeyboard. We’llalsouse! for“not”;mathematiciansuse¬.) Nowtheproblemisclearer: isa&&b||csupposedtobereadas(a&&b)||corasa &&(b||c)? Thepredicateismalformedandwehavetwodifferentwaysofmakingit makesense:",
      "word_count": 110,
      "char_count": 1561,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 13.2,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_13_0",
      "page": 13,
      "paragraph_index": 0,
      "text": "2. 1. PREDICATES 7 # way 1 Can Run Program(c) = RAM(c) && (CPU(c) || GPU(c)) # way 2 Can Run Program(c) = (RAM(c) && CPU(c)) || GPU(c) Both interpretations make sense in English! But they have different outputs for some inputs. We can see this by listing every single possible combination of val- uesfor RAM/CPU/GPU,andseewhattheygivefor Can Run Program. Thisiscalleda truthtable. R(RAM) C(CPU) G(GPU) R&&(C||G) (R&&C)||G T T T T T T T F T T T F T T T T F F F F F T T F T F F T F T F T F F F F F F F F Therearetwocombinationsofinputswhereoneinterpretationisfalseandtheother istrue. It’spossiblethatthevendormeantthefirstinterpretationwhenwritingthe requirements, but I read it as the second interpretation. Then I am sure that the programwillrunonmycomputer,thevendorneverexpectsitto,and Igetmadthat they“lied”tome. Muchbettertoexpresstherequirementmathematically! Expressingpropertieswithformallogicislessambiguousthanwithinformal En- glish. Forthepurposeofteaching,wewillassumetheintendedpredicateis(RAM(c) &&CPU(c))||GPU(c)). Tip Ifyoueverhavetroublegeneratingatruthtable,youcantrytouseatruthtable generator,likehere1. Tryp||!qandexperimentfromthere. 1https://web. stanford. edu/class/cs103/tools/truth-table-tool/",
      "word_count": 140,
      "char_count": 1217,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 7.7,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_14_0",
      "page": 14,
      "paragraph_index": 0,
      "text": "8 CHAPTER2. ACRASHCOURSEINLOGIC 2. 1.2 Conditional Predicates Let’snowmakeavariationonourpredicate. Someprogramshaveanativeversion andawebversion. Thenativeversionusesthelocalcomputer’sresources,theweb versiondoesmostoftheprocessingonsomecloudcomputersomewhere. Sothe nativeversionrequiresabeefycomputer,butany computercanrunthewebclient. If a computer is running the native version, it must have enough RAM andafast CPUoragoodgraphicscard(GPU)tousethisprogram. Butif it’snotrunningthenativeversion,you’refine. Tomodelthis,we’llneedanewpredicate,Native(p). Nativeisapropertyofthepro- gram,notthecomputer. Can Run Programthendependsonboththeprogramandthe computer. Can Run Program(c, p) = `true unless Native(p), in which case (RAM(c) && CPU(c)) || GPU(c))` Iusedbackticksherebecausehalfthepredicateisstillininformal English. Itturns out,though,thatwealreadyhavethetoolsweneedtoexpressthis. Wewantthatif Native(p)isfalse,Can Run Program(c,p)isautomaticallytrue: wedon’tneedtoeven lookatthecomputerspecs. Can Run Program(c, p) = !Native(p) || ((RAM(c) && CPU(c)) || GPU(c)) Howdoesthiswork? It’seasiertoseeifwepullouttherighthandsideintoanew predicate, like Beefy(c), sowehave! Native(p)||Beefy(c). Here’sthetruthtablefor thatexpression(using N(p)for Native(p)and B(c)for Beefy(c)): N(p) B(c) !N(p)||B(c) T T T T F F F T T F F T When Native(p) is false, !Native(p) || Beefy(c) is true, regardless of the value of Beefy(c).When Native(p)istrue,thentheexpressionisequaltothevalueof Beefy(c). Sowe’reonlycheckingthecomputerspecsifwe’rerunningthenativeversion,and ignoringitotherwise. This“trick”ofwriting! P||Qtomean“check Qonlyif Pistrue”isincrediblycommon inmath. Socommonthatmathematiciansuseaspecialoperatorforit:=>,whichis",
      "word_count": 130,
      "char_count": 1722,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 12.25,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_15_0",
      "page": 15,
      "paragraph_index": 0,
      "text": "2. 1. PREDICATES 9 named“implies”(orimplication). P=>Q(“Pimplies Q”)isthesameaswriting! P|| Q. Expressedthisway,ourpredicateis Can Run Program(c, v) = Native(v) => (RAM(c) && CPU(c)) || GPU(c) =>bindslesstightlythan&&and||: A&&B=>Cis(A&&B)=>C,not A&&(B=>C). Exercise 1 (Implication) Saywehadtwomore“conditions”,sothat Can Run Programwasinstead Can Run Program(c, p) = `true unless Native(p) and either Q(p) or R(p), in which case (RAM(c) && CPU(c)) || GPU(c))` Writethiswithoutusing=>. Thenwritethiswith=>. Whichiseasiertoread? Solution(page132) Exercise 2 Right now RAM(c) means that “computer c has sufficient RAM”. Modify it to mean“computerchasenoughramtorunprogramp”. Makesimilarchanges forourotherpredicatesandwrite Can Run Program. Solution(page132) Exercise 3 1. Using =>, write the expression “if Native(p) is true then Web(p) is false, andif Web(p)istruethen Native(p)isfalse.” 2. Using&&,writetheexpression“Native(p)and Web(p)arenotbothtrue.” 3. Using||,writetheexpression“Native(p)isfalseor Web(p)isfalse.” Solution(page132)",
      "word_count": 105,
      "char_count": 1036,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 8.88,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_16_0",
      "page": 16,
      "paragraph_index": 0,
      "text": "10 CHAPTER2. ACRASHCOURSEINLOGIC Exercise 4 (Implicationasconditional) Takethepredicate If Else(c, x, y) = (c => x) && (!c => y) Assumec,x,andyareallbooleans. 1. Whenis If Elsetrue? Whenitisfalse? 2. Whatcommoncodeconstructdoesthislooklike? Solution(page132) 2. 2 Sets Predicatesareuntypedbydefault. In Can Run Program(c),ccanbeacomputer,butc canalsobearobot,orthenumber26,orthestring“thenumber26”. Inprogram- ming, wewouldwanttogiveitatypetomakeitclearthatweshouldonlypassin computers. Somethinglike Can Run Program(c) = `c is a computer` && ((RAM(c) && CPU(c)) || GPU(c)) Now, even if we glue a good GPU to a poodle, Can Run Program(poodle) will still be false. Tomaketheconcept“cisacomputer”mathematicallyrepresentable,math- ematiciansusesets. Asetisanunorderedcollectionofuniquevalues,like“allcom- puters”, “allstringslongerthanfivecharacters”, or“allsortedarraysofintegers”. Conventionally,wewritetheelementsofasetlikethis: Computer = {my_laptop, your_laptop, your_other_laptop, ... } Then“cisacomputer”isequivalenttosaying“cisanelementoftheset Computer”, whichwewillwriteascin Computer. Can Run Program(c) = c in Computer && ((RAM(c) && CPU(c)) || GPU(c)) As syntactic sugar, I could instead write Can Run Program(c: Computer) to mean “c mustbeanelementof Computer”,likethis: Can Run Program(c: Computer) = (RAM(c) && CPU(c)) || GPU(c) Thiswillmakewritingpredicateswithseveralconstrainedparameterseasier.",
      "word_count": 132,
      "char_count": 1410,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 9.69,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_17_0",
      "page": 17,
      "paragraph_index": 0,
      "text": "2. 2. SETS 11 Note Thesetofallelementsourpredicatesareactingoniscalledthedomainofdis- course. Soastopreventeldritchmathhorrors,predicatescannot beinthedo- mainofdiscourse: therearenopredicatesthattakeotherpredicates. Other- wiseyoucandowhatyouwant. Usuallythedomainofdiscourseiscontextually evident,andwedon’tneedtowriteit. Ifyouwanttoknowmoreabouteldritch mathhorrors,checkout Beyond Logic(page129). Notice that if we define Enough RAM as the set of all computers with enough RAM, theneveryelementofthatsetisalsointheset Computer. Wesaythat Enough RAMis asubsetof Computer. Thesetofallsubsetsofasetiscalledthepowerset. Asanexample,ifaprogramcan taketwoflags,-nand-v,therearefourpossiblecombinationsofflagsyoucanpass in: power_set({-n, -v}) = { {}, {-n}, {-v}, {-n, -v}, } (Remember: functionsaresnake_cased.) 2. 2.1 Setoperations Programminglistshavealotofstructure,sothere’salotofwaysyoucanmanipulate them. Given[A,B]and[B,C],Icanconcat[B,C]to[A,B],concat[A,B]to[B,C],concat [B,A]to[B,C],interlacethetwo… Setsdon’thavemuchstructure,sothereareonlyafewbasicoperations. Givensets {A,B},and{B,C},thebasicthingswecandoare: 1. Unionthemtogether,orsmushthemintoonebigset: {A,B}|{B,C}={A,B,C} 2. Intersectthem,orfindthecommonelements: {A,B}&{B,C}={B} 3. Takethesetdifference,orsubtractonesetfromtheother: {A,B}-{B,C}={A} 4. That’sit! Mathematicians like sets for their simplicity, and use them as the foundational bedrock to build out more complex concepts, like lists. As programmers, we are alreadyusedtoworkingwithcomplexconcepts. Evenso,setsarestillusefulinpro- gramming. Wewillseethisinthenextchapter.",
      "word_count": 108,
      "char_count": 1600,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 13.82,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_18_0",
      "page": 18,
      "paragraph_index": 0,
      "text": "12 CHAPTER2. ACRASHCOURSEINLOGIC Exercise 5 (Setsvs Predicates) Saythatinsteadofhavingapredicates RAM(c),CPU(c),GPU(c),wehadthesets RAM,CPU,and GPU. Usethesetoconstructtheset Can Run Program,thesetofall computersthatwouldpass Can Run Program(c). Solution(page132) Exercise 6 (Disjoint Sets) Giventhesets Childand Adult,expressthestatements“nobodyisbothachild andanadult”bysayingthesetsdonotoverlap. HINT:youcanuse{}tomeanthe“emptyset”. Solution(page133) Exercise 7 (Symmetric Difference) Thesymmetricdifferenceoftwosetsisthesetofallelementsinexactlyoneof thetwosets. Forexample,thesymmetricdifferenceof{A,B}and{B,C}is{A,C}. Usingjustthebasicsetoperations,findthesymmetricdifferenceofarbitrary sets Sand T. Solution(page133) It’salsoquiteusefultomapandfiltersets. Thestandardmathnotationistowrite {𝑓(𝑥)|𝑃(𝑥)},butthat’sconfusing,soinstead Iwillsteal Pythonnotation. • Map: {x^2forxinset} • Filter: {xinset: x>2} • Mapandfilter: {x^2forxinset: x>2} Thisissometimescalleda“setcomprehension”or“setbuildernotation”.",
      "word_count": 59,
      "char_count": 1009,
      "annotations": {},
      "sentence_count": 11,
      "avg_word_length": 16.12,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_19_0",
      "page": 19,
      "paragraph_index": 0,
      "text": "2. 3. QUANTIFIERS 13 2. 3 Quantifiers Let’s move away from software requirements and switch to a different problem. Softwaredevelopmentteamsoftenrequirechangestothemaincodetobefirstpro- posedaspartofapullrequest,whichmustbereviewedbyanotherteammember. Moreconcisely: A pull request must be reviewed by a team member before it can be merged. Letusassumethatwehavetwosets,Pull Requestand Developer,thatwecanusein ourpredicates. Iwouldstartwiththis: Reviewed By(pr: Pull Request, d: Developer) = `d reviewed pull request pr` Can Merge(pr: Pull Request) = `someone reviewed pr` Bothofthesepredicatesareabstract, butitseemslikeweshouldbeabletomake Can Mergeconcretebydefiningitintermsof Reviewed By. Forthisweneedaquanti- fier,orapredicateoverawholeset. Therearetwocommonquantifiersinpredicate logic. Thefirst,theonewewillusehere,iscalledsome: somexinset: P(x)means that P(x)istrueforatleastonexinthesetset. Can Merge(pr: Pull Request) = some d in Developer: Reviewed By(pr, d) Note Reviewed Byisalreadytypedtoonly“accept”developers(befalseifdisapoo- dle). Butthepointoflogicistocommunicateclearly,soitisbettertobeclear andexplicithere. Iwouldreadthisas“Can Mergeistrueforthe Pull Requestelementprifthereisat leastoneelementdinthesetof Developerswhere Reviewed By(pr,d)istrue”. Or,as just“thereissomedeveloperthatreviewedthepr.” Thetokensomeis“quantifyingover”theset Developer,oralternativelyisscopedto thatset. Thismakesouruseofitascopedquantifier. Morerarely,anexpressionis trueforany valuewecaretoname. Forexample,thestatementsomexinset: P(x) =>somexinset: P(x)||Q(x)istrueregardlessofsetis. Inthiscase,wecanchooseto leaveoutthesetsandwrite some x: P(x) => some x: P(x) || Q(x)",
      "word_count": 127,
      "char_count": 1675,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 12.2,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_20_0",
      "page": 20,
      "paragraph_index": 0,
      "text": "14 CHAPTER2. ACRASHCOURSEINLOGIC Thisuseofsomeisnotscopedtoaset,sowecallitanunscopedquantifier. Almostall quantifiersweusedwillbescoped. 2. 3.1 all Asitstands,Can Mergeistoopermissive. Whathappensifthereviewerfoundama- jorsecuriteflaw? Whatiffivedevelopersreviewthepullrequestandtwofindflaws? Mostcompaniesuseastrictermergerequirement: A pull request must be reviewed by at least one team member, and all reviewersmustapprovetherequest,beforeitcanbemerged. Asisourhabit,westartbywritingtherequirementsasabstractpredicates. Approved By(pr: Pull Request, d: Developer) = `d approved pr` Someone Reviewed(pr: Pull Request) = some d in Developer: Reviewed By(pr, d) Everyone Approves(pr: Pull Request) = `everyone who reviewed pr also approved it` Can Merge(pr: Pull Request) = Someone Reviewed(pr) && Everyone Approves(pr) Thisgivesusanopportunitytointroducetheotherquantifier: all. allxinset: P(x) saysthat P(x)istrueforevery xinourset. Withthis,itseemslikeournewpredicate canbewrittenlikethis: Everyone Approves(pr: Pull Request) = all d in Developer: Approved(pr, d) Butthisiswrong. Thisrequireseverysingledevelopertoapprovethepullrequest, includingdevelopersoutsickoronmaternityleave. Weonlywanttorequirethatev- erydeveloperwhoreviewedthepullrequesttoapproveit. Wecanfixthis,though,with implication. Recallthat P=>Qmeans! P||Q. Then Reviewed By(pr,d)=>Approved(pr, d)meansthateitherdapprovedthepullrequestordidnotreviewitatall. Everybody Approves(pr: Pull Request) = all d in Developer: Reviewed By(pr, d) => Approved(pr, d) Weoftenuse=>toonly“evaluate”analloncertainelements. Note",
      "word_count": 126,
      "char_count": 1582,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 11.56,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_21_0",
      "page": 21,
      "paragraph_index": 0,
      "text": "2. 3. QUANTIFIERS 15 Ihaveseensixorsevendifferentnotationsthatlogiciansuseforexpressions andquantifiers. Abouttheonlythingtheydoagreeonisthesymbolforsome and all: ∃ and ∀. You might notice thesesymbolsisnotonyourkeyboard, which is why I instead use ASCII words. As always, you can check the appendix (page125)toseesomeofthemoreconventionalnotations. Mostprogrammerlanguageshavebuilt-inquantifierfunctions, aswewilldiscuss inalaterchapter(page25). Ifyourlanguageofchoicedoesnot,youcanusuallyap- proximatequantifierswithaloop. Forexample,youcouldwrite Someone Reviewed likethis(pseudocode): fun Someone Reviewed(pr: PR) { for (d in developers) { if(Reviewed By(pr, d)) return true; } return false; } Exercise 8 Why do we need Someone Reviewed at all? Isn’t it true that if everybody who reviewed the PR approved it, then someone musthave reviewed it? Find the edgecasewhere Everyone Approvedistrueand Someone Reviewedisfalse. Solution(page133) Exercise 9 Define Natasthesetof“naturalnumbers”: 0,1,2,etc. 1. Writethelogicalstatement“everynaturalnumberissmallerthanitself plus1.” 2. Writethelogicalstatement“0islessthanorequaltoeverynaturalnum- ber.” Solution(page133)",
      "word_count": 107,
      "char_count": 1164,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 9.89,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_22_0",
      "page": 22,
      "paragraph_index": 0,
      "text": "16 CHAPTER2. ACRASHCOURSEINLOGIC Exercise 10 (Nested Quantifiers) 1. Write the logical statement “for every PR, there is a developer that ap- provedit.” 2. Writethelogicalstatement“thereisadeveloperthathasreviewedevery singlepullrequest.” Inbothcasesyouwillneedtoputonequantiferinsideadifferentquantifier. Solution(page133) 2. 4 Notation Mathematicians like to say that logic is a “language”. The point of language is to communicate complex ideas clearly, and sometimes the best way to do that is to comeupwithnewwordsandgrammar. Inlogic,too,wecancomeupwithnewcon- structsandwaysofwritingformulae,aslongas1)it’sconsistentand2)weexplain clearlywhatwe’redoing. Infact,thisisencouraged. Forexample,thenormalway ofwriting“thesetofintegersbetween1and10”takesupalotofspace: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} If Iwantedsomethingmoreconcise,Icancomeupwithashorthand: {1, 2, 3, ... 100} If Iwantedtobeevenmorecompact,Icandefinenewsyntax: 1..=100 = {1, 2, 3, ... 100} 1..<100 = {1, 2, 3, ... 99} Thisisn’tcompletelyunambiguous: whatis10..=9? Iwilldefineitastheemptyset: ifa>b,thena..=bisempty. Similarly,a..<bisemptywhenevera>=b. Exercise 11 Rewritethatrule(thatifa>b,thena..=bisempty)usingtheallquantifier. As- sumebothaandbareinthesetofintegers. Solution(page133)",
      "word_count": 110,
      "char_count": 1253,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 10.4,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_23_0",
      "page": 23,
      "paragraph_index": 0,
      "text": "2. 4. NOTATION 17 Exercise 12 Write1..=100usingsetfilternotation. Filterontheset Int. Solution(page133) Exercise 13 (Divides) Write Is Divisible By(num,divisor),whichistrueifnumisevenlydivisiblebydi- visor. Usesomeand..=. Solution(page133) Anotherbitofsyntacticsugar Ifindveryusefulis“conjunctionlists”. Complicated systemsoftenhavecomplicatedrequirements: Rules = A && B && (C || D) && (E || (F && G)) That’shardtoread! Tomakeiteasier,let’sinsteadwriteitlikethis: Rules = 1. A 2. B 3. || C || D 4. || E || a. F b. G Numberslike4. andletterslikea. willalwaysmean“AND”.If Iwantalistof“OR”s,I willalwaysuse||. One last bit of syntactic sugar: sometimes we want to quantify over multiple ele- mentsinthesameset. Likethis: Is Unique(list) = all i, j in 0..<len(list): list[i] != list[j] Thiswillalmostalwaysbefalse. Doyouseewhy? It’sbecause Ineversaidthatiandjaredifferentvalues! Iflhasatleastoneelement, Is Unique(l)willbefalse. Normally I’dneedauniquenesscondition,likethis:",
      "word_count": 101,
      "char_count": 972,
      "annotations": {},
      "sentence_count": 27,
      "avg_word_length": 8.63,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_24_0",
      "page": 24,
      "paragraph_index": 0,
      "text": "18 CHAPTER2. ACRASHCOURSEINLOGIC Is Unique(list) = all i, j in 0..<len(list): i != j => list[i] != list[j] Thisworksbutisannoyingwhenwewanttoquantifyoverthreeormorevariables. So Iwilladdanewmodifierforquantifiers:alldisjx,yinset:means“foralldisjointx andyinset”,akaalldistinctpairsofvaluesintheset. Withthat,Icanwrite Is Unique inamoreintuitiveway. Is Unique(list) = all disj i, j in 0..<len(list): list[i] != list[j] Exercise 14 If Ihadsomedisjx,y: Pandwantedtorewriteitwithoutdisj,whatwouldthat looklike? Solution(page134) Exercise 15 If Ihadalldisjx,y,z: P(x,y,z)andwantedtorewriteitwithoutdisj,whatwould thatlooklike? Solution(page134) 2. 5 In Practice: Rewrite Rules Note Thissectionisdraft0 Inthebeginningofthebook,Isaidthatlogicisthemathematicsofbooleans,just asarithmeticisthemathematicsofnumbers. Knowingarithmeticletsussimplify expressionsofnumbers. Forexample,hereishowwecansimplifythefunctionf(x, y)=-10x+2(y+5x): 1. 2(y+5x)isthesameas2y+10x. 2. -10x+2y+10xisthesameas10x-10x+2y.",
      "word_count": 70,
      "char_count": 991,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 13.17,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_25_0",
      "page": 25,
      "paragraph_index": 0,
      "text": "2. 5. INPRACTICE:REWRITERULES 19 3. Thefirsttwotermsareopposites,sotheycancelout. 4. Sowehavejustf(x,y)=2y. In logic, these simplifications are called rewriterules. You may have already used onerewriteruleasakid: Areyousorry? No? Wellareyounotnotnotnotnotsorry? Therewriterulehereis!!a==a. Thismeans!!(!!(!!Sorry))isthesameas Sorry. Otherrewriterulesinclude: Name Rule De Morgan’s Law !(A && B) == !A || !B !(A || B) == !A && !B Contrapositive P => Q == !Q => !P And/Or Distribution (P && Q) || R == (P || R) && (Q || R) (P || Q) && R == (P && R) || (Q && R) Duality all x: !P(x) == !(some x: P(x)) some x: !P(x) == !(all x: P(x)) Some/Or Distribution some x: (P(x) || Q(x)) == (some x: P(x)) || (some x: Q(x)) All/And Distribution all x: (P(x) && Q(x)) == (all x: P(x)) && (all x: Q(x)) Exercise 16 Userewriterulestosimplify!(somex: !P(x)). Solution(page134) Exercise 17 Giveareal-worldexampleofeachdistributionrule. Solution(page134)",
      "word_count": 137,
      "char_count": 935,
      "annotations": {},
      "sentence_count": 32,
      "avg_word_length": 5.83,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_26_0",
      "page": 26,
      "paragraph_index": 0,
      "text": "20 CHAPTER2. ACRASHCOURSEINLOGIC Exercise 18 Thefollowingtwoarenotrewriterules: 1. allx: P(x)||Q(x)==(allx: P(x))||(allx: Q(x)) 2. somex: P(x)&&Q(x)==(somex: P(x))&&(somex: Q(x)) Giveanexamplewhereeachiswrong. HINT:forthesomecase,trystartingwithavalidexampleoftheright-hand-side andshowitdoesn’tmatchtheleft-hand. Solution(page134) Overtimeyou’llinternalizealotofrewriterules. See Useful Rewrite Rules(page127) foralist. 2. 5.1 Theorems Rewriterulesaretheorems,meaningwecanworkthemoutfromotherrules. Takecontrapositive,forexample: P=>Q==!Q=>!P. Wecanderiveitthisway: 1. Startwith! Q=>!P. 2. Applythedefinitionofimplicationtoget!!Q||!P. 3. Removethedoublenegativetoget Q||!P. 4. Applythedefinitionofimplicationagaintoget P=>Q. Tada,wejustprovedthecontrapositiverewriteruleworks! Trygoingtheotherway, startingfrom P=>Q. Exercise 19 (Contrapositives) Startfrom P=>Qandrewriteitinto! Q=>!P. Solution(page134)",
      "word_count": 55,
      "char_count": 904,
      "annotations": {},
      "sentence_count": 31,
      "avg_word_length": 15.45,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_27_0",
      "page": 27,
      "paragraph_index": 0,
      "text": "2. 6. SUMMARY 21 2. 6 Summary 1. A predicate (page 5) is a boolean “function”, which can be defined over any- thing. 2. Aset(page10)isanunorderedcollectionofuniqueelements. Setscancontain anything. Setofthingsweareworkingonisthe“domainofdiscourse”(Do D). 3. Expressionscanbequantified,checkedifthey’retrueforallelementsofaset oranyelement. 4. Mathnotationisflexible. Wecancomeupwithnewnotation,operators,gram- mar,etcaslongasit’sclearandconsistent. 5. Logicalformulaecanberewrittenandsimplified. Here’sallofthesymbolswelearnedabout: 1. Predicates are always Title Case(x), functions always lowercase and snake_case(x). 2. And,or,andnot: &&,||,! 3. Implies: => 4. Setunion,intersection,difference: |,&,- 5. Setmapandfilter: {x^2forxinset: x>2} 6. allxandsomex 7. Varioussyntacticsugar. Andthat’sit! That’sallofthebasicsofformallogic. Reallynotthatmuch,whenyou thinkofit. Thedifficulty,ofcourse,isintheapplication. It’sonethingtoknowdivision,quite anothertorealizethat“scalearecipewith5eggstouseonly3eggs”isadivision problem. Therestofthebookisaboutsoftwaresituationswherelogicisuseful,and howtomakeituseful. Let’suselogictounderstandtheworld.",
      "word_count": 78,
      "char_count": 1141,
      "annotations": {},
      "sentence_count": 33,
      "avg_word_length": 13.64,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_28_0",
      "page": 28,
      "paragraph_index": 0,
      "text": "Chapter 3 Refactoring Code Wewillstartouroverviewoftechniquesbyusinglogictosimplifycomplicatedcode. Latertechniqueswillcovermoreimpressiveapplications,butrefactoringisauni- versalprogrammingtaskandknowingmoretricksisalwayshandy. Allcodesam- plesareeithercode Ipersonallyencounteredorsamplesofproductioncode Ifound on Git Hub. 3. 1 Simplifying Conditionals Inthelastchapter,welearnedabout“rewriterules”,whichletussimplifysomelog- icalexpressions. Usingtheserewriterules,wecansimplifycodetoo. Startingwith theconditional!((x&&y)||!x){...}: Step Expression Rule 0 !((x && y) || !x) Initialvalue 1 !((x || !x) && (!x || y)) distribution(page19) 2 !(T && (!x || y)) x || !xisalwaystrue 3 !(!x || y) true && y == y 4 !!x && !y De Morgan’slaw 5 x && !y doublenegation Eachtransformationintheabovechainusesasolid,rigorouslogicalrule. Aslong aswedonotmakeamistakeinapplyingtherule,wedonotchangethevalueofthe expression,andwecanbeconfidentoursimplercodehasthesamebehavior. Most of the time, we don’t write out every single step along with the name of the appliedrule,sincethenextstepsareobviousinourheads. I“know”Icanrewrite (x&&y)||!xas! x||y,inthesameway I“know”thatfourtimesthreeistwelve. But we can always fall back on the rewrite rules if we get confused or have deal with somethingmessy. Tip Some equations can be simplified automatically with tools, like for example https://www. dcode. fr/boolean-expressions-calculator. 22",
      "word_count": 132,
      "char_count": 1421,
      "annotations": {},
      "sentence_count": 32,
      "avg_word_length": 9.77,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_29_0",
      "page": 29,
      "paragraph_index": 0,
      "text": "3. 1. SIMPLIFYINGCONDITIONALS 23 3. 1.1 Thepowerof=> Asaruleofthumb,whenever&&and||correspondtosomething“obvious”inpro- gramming,=>willcorrespondtosomething“special”. Thisistruehere,andintest- ing (page32),andinmanyotherplaces. The“special”thinghereisthatwhere&& and||representtheconditioninanifstatement,=>representstheifstatementit- self! if P {Q} # is the same as P => Q Technically,thisiswhatmathematicianswouldcallan“abuseofnotation”:thebody ofaconditioncanbeanycomputation,whiletheright-hand-sideofanimplication mustbeabooleanexpression. Evenso,itturnsoutwecanmanipulateifstatements andconditionalsinbasicallythesameway. Anyrewriterulefor=>givesusarefac- toringofconditionalcode. Forexample,P=>(Q=>R)isthesameas P&&Q=>R. Therefore: if P { if Q { R # is the same as if (P && Q) { R Wecantakethisfurther. Inapreviousexercise(page10)welearnedthatif Pthen Q else Risthesameas P=>Q&&!P=>R. Presentedwith if (P || !Q) { # body 1 } else { if (Q && R) { # body 2 } } Theelseisequivalentto Step Rule !(P||!Q) => (Q && R => body1) if-else !P && Q => (Q && R => body1) De Morgan !P && Q && Q => (R => body1) Seeabove !(P || !Q) => (R => body1) De Morgan",
      "word_count": 124,
      "char_count": 1148,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 8.27,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_30_0",
      "page": 30,
      "paragraph_index": 0,
      "text": "24 CHAPTER3. REFACTORINGCODE This is the same expression that we started with except that we removed Q from themiddle. Inotherwords,checking Qistrueinthesecondifisunnecessary; we alreadyknowit’struebecauseweareinthefirstif’selsebranch! Thecodesnippet simplifiesto if P || !Q: # stuff else: if R: # other stuff Exercise 20 (Rewritingifs) Recallthatweearlierweshowedif Pthen Qelse Rismathematicallyequivalent to P=>Q&&!P=>R. Usethattoshowwecanrewritethesameconditionalasif !Pthen Relse Q. Hint:don’tthinktoohardaboutit. Youonlyneedtoapplyacoupleofcommon rules. Solution(page135) 3. 2 Refactoring with Quantifiers Ifyousearch Git Hub,youcanfindalotofcodelikethis: def is_toolchain(self, *args): actual_toolchain = self. Toolchain Name() for v in args: if v. lower() == actual_toolchain: return True return False Considerwhatthisdoes. Itsearchesthroughalisttoseeifanyelementofthelist satisfiesaproperty. Doesn’tthatlooklikeoneofourquantifiers? Is Tool Chain = some v in args: Actual Tool Chain(v) There’s some subtle differences, in that lists are not sets, but it’s close enough. Wouldn’tis_toolchainbesimplerifwecouldjustusethesomequantifierdirectly? Infact,wecan! Mostlanguageshavebuilt-inquantifierfunctions. In Python,these areall(bool_list)andany. Here’swhatis_toolchainlookslikeusingthequantifier:",
      "word_count": 119,
      "char_count": 1300,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 9.93,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_31_0",
      "page": 31,
      "paragraph_index": 0,
      "text": "3. 2. REFACTORINGWITHQUANTIFIERS 25 def is_toolchain(self, *args): actual_toolchain = self. Toolchain Name() return any(v. lower() == actual_toolchain for v in args) Exercise 21 (Yourlanguage'squantifiers) Findthequantifiersinyourlanguageofchoice. Oneofthemshouldbealland oneshouldbesome. Bonus: does your language have any non-standard quantifiers, like “exactly one”or“none”? Solution(page135) Goingfurther,wecansimplifyexpressionsusingquantifiersjustlikewewouldany otherlogicalexpression. 3. 2.1 Simplifying Quantifiers Thisanonymizedblockof Pythoncodecomesfromalargepublicproject. if not all(P(x) for x in l) or any(not Q(x) for x in l): do_thing() else: do_other_thing() In formal logic, the condition is !(all x: P(x)) || some x: !Q(x). I can use unscoped quantifiersbecause Idon’tcareaboutthetypeofx;thissimplificationshouldwork regardless. Myfirstheuristicistotrytoreducethetotalnumberofquantifiersused. Basedon thequantifierdistributionrules(page19),Iknowthatsomedistributesover||,so Iwill makethedualrewriterule(page19)toturnthe! allx: Pintosomex: !P. Step Rule !(all x: P(x)) || some x: !Q(x) init some x: !P(x) || some x: !Q(x) duality some x: !P(x) || !Q(x) distribution Thisissimplermathematicallyandismoreefficientprogrammatically,asweonly iterateoverthelistonceinsteadoftwice. Stoppingherewouldbeabsolutelyfine. I",
      "word_count": 120,
      "char_count": 1329,
      "annotations": {},
      "sentence_count": 27,
      "avg_word_length": 10.08,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_32_0",
      "page": 32,
      "paragraph_index": 0,
      "text": "26 CHAPTER3. REFACTORINGCODE findituseful,though, tocontinueexperimentingwithrewrites. Isee De Morgan’s Lawcanbeusedhere,so Iwilltryitanywayandseewhereittakesus. Step Rule some x: !P(x) || !Q(x) init some x: !(P(x) && Q(x)) De Morgan !all x: P(x) && Q(x) duality Thisdoesn’tseemtomelikeasignificantimprovementoverwherewewere. Even so,therewasnocosttotryinganditstillgivesusgoodpractice. Thisalsoopensup onemorepossiblerefactor: if Pthen Qelse Risthesameasif! Pthen Relse Q. This letsusremovethetop-level“not”: # OLD if not all(P(x) for x in l) or any(not Q(x) for x in l): do_thing() else: do_other_thing() # NEW if all(P(x) and Q(x) for x in l): do_other_thing() else: do_thing() Thislastrefactoringcould beasteptoofar. Programmerstendtothinkoftheifas thenormalcaseandtheelseastheexceptionalcase,andbyswitchingthetwo,we mayhavechangedhowtheyunderstandthecode. Wemustalwaysapplyourbest judgementasasoftwareengineer. Exercise 22 Ioncesawsomecodethatusedthesamepredicateintwoquantifiers: return any(P(x) for x in l) and all(P(x) for x in l) Whyistheanynecessary? Rewritethistouseonlyonequantifier. Solution(page135)",
      "word_count": 102,
      "char_count": 1113,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 9.92,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_33_0",
      "page": 33,
      "paragraph_index": 0,
      "text": "3. 2. REFACTORINGWITHQUANTIFIERS 27 3. 2.2 Helperpredicates Inthepreviousexample, wetreatedthepredicates P(x)and Q(x)asopaque. Ifwe canmodifythepredicatesthenwecanoftensimplifycodeevenfurther. Onemore anonymizedexample: if not all(not a. chunks or len(a. chunks[0]) == df. npartitions for df in dfs): raise_error() Thelogicalrepresentationofthisconditionalis! alldfindfs:(!P(df)||Q(df)).First,we canstartbytreatingthepredicatesasopaqueandrewritetheabstractexpression: Step Rule !all df in dfs: (!P(df) || Q(df)) init some df in dfs: !(!P(df) || Q(df)) duality some df in dfs: P(df) && !Q(df) De Morgan Thiscorrespondstothiscodechange: if not all(not a. chunks or len(a. chunks[0]) == df. npartitions for df in dfs): # becomes if any(a. chunks and not len(a. chunks[0]) == df. npartitions for df in dfs): Lookingatthecodedirectly,though,revealssomeusefuldetailsnotpresentinour opaquepredicates. Thefirstisthat P(df)isactuallyjust P:thebodyofthepredicate, a. chunks,doesnotdependondfatall. Thereisnoreasontokeepitinthequantifer, andindeedwecanextractitoutside: Step Rule some df in dfs: P(df) && !Q(df) init some df in dfs: P && !Q(df) Pdoesn’tdependondf P && some df in dfs: !Q(df) Extraction if any(a. chunks and not len(a. chunks[0]) == df. npartitions for df in dfs): # becomes if a. chunks and any(not len(a. chunks[0]) == df. npartitions for df in dfs):",
      "word_count": 158,
      "char_count": 1357,
      "annotations": {},
      "sentence_count": 35,
      "avg_word_length": 7.59,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_34_0",
      "page": 34,
      "paragraph_index": 0,
      "text": "28 CHAPTER3. REFACTORINGCODE Theseconddetailisthatisthat Q(df)takestheformlen(a. chunks[0])==df. npartitions. We can abstract this by replacing the left hand side (lhs) with the constant c and therhswiththefunctionnp(df), givingus Q(df)=(c==np(df)). Then! Q(df)canbe simplifiedtoc!=np(df). Step Rule P && some df in dfs: !Q(df) init P && some df in dfs: !(c == np(df)) Defining Q P && some df in dfs: c != np(df) Negation Theoverallcodechangeis # OLD if not all(not a. chunks or len(a. chunks[0]) == df. npartitions for df in dfs): raise_error() # NEW if a. chunks and any(len(a. chunks[0]) != df. npartitions for df in dfs): raise_error() In general, we can define R(x) = !Q(x) to “hide” a negation. This only makes sense if we can find a suitable, easily understandable R(x) that doesn’t muddle things. Thiscanbeanewabstractfunction,likereplacing! correct_password(p)with wrong_password(). Othertimes,thiscaninvolvereplacinganinfixoperator. Tip Intheseexamples,weconvertedtheprogramtoalogicalformulaanddidall ourrewritingbeforeconvertingback. Inpracticeitcanbeeasiertoswitchbe- tweentherepresentations: rewritethelogic,convertbacktocode,rewritethe code,convertbacktologic,etc. Exercise 23 Simplifytheexpression!(x>1&&x<=10). TODO:more Solution(page135)",
      "word_count": 140,
      "char_count": 1254,
      "annotations": {},
      "sentence_count": 28,
      "avg_word_length": 7.96,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_35_0",
      "page": 35,
      "paragraph_index": 0,
      "text": "3. 3. PROGRAMSARENOTMATH 29 3. 3 Programs are not Math Logicgivesuslotsofwaystorewriteconditionals. Unfortunately, wecan’talways use them: programming languages (PLs) follow their own rules, and these aren’t alwayscompatiblewithmathematics. We’vealreadyseenonesuchdifference:logicprimarilyusessetswhile PLsuselists. Inmostcasesthisdoesn’tmatter,butitcanifyouneedtoworryaboutorderingor duplicates. Somelanguagesdohaveanativesettype,butnotall. Inmanylanguagesthequantifiersaren’tquitequantifiers,becausetheydon’ttake arbitrarypredicates. Theyinsteadcheckthatanarrayofbooleansallevaluatetrue. Thismakesexpressingnestedandchainedquantifiers(likeallx,y)awkward. Itcan alsoleadtosurprisingbehaviorwhenrunonnon-booleanlists. Manylanguageshave special“truthiness”rulesforevaluatingvaluesasbooleans. In Python, any([0])is false,whilein Ruby[0].any? istrue. 3. 3.1 Emulatingimplication Almostnolanguagesupportsimplicationasanoperator. Instead,implactioninex- pressionsusuallymapstotop-levelconditionalcontrolflow. Whilethisoftenisnot aproblem,itcancauseustroublewhentheimplicationisinsideaquantifier: # Not valid python if all((len(l) != 0 => x in l) for l in lists): Usuallyyoucangetawaywithwriting! P||Qinstead. Youcanalsosometimesuse thetrickofreplacinganimplicationwithafilter,asinthisexercise: Exercise 24 (Implicationviafiltering) Mostlanguagesdon’tsupport=>,buttheydosupportsomekindofcollection filter. Soifyouneedtoencode all x in set: P(x) => Q(x) Youcanusuallywriteitas all x in {x in set: P(x)}: Q(x) Explainwhytheseareequivalent. Solution(page135)",
      "word_count": 97,
      "char_count": 1549,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 14.98,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_36_0",
      "page": 36,
      "paragraph_index": 0,
      "text": "30 CHAPTER3. REFACTORINGCODE 3. 4 Using sets Ourlastrefactoringtoolisalittledifferent. Notalllanguageshaveabuilt-indata typeforsets. Forthosethatdo,settypescanbeafantastictoolforsimplifyingcode. Saythatwearemodelingasimplesocialnetwork,whereeveryuserhasalistofcon- nections. Wewanttowriteafunctionthat,foragivenuser,findsallotherusers“one hopaway”: everybodythatisconnectedtotheinput’sconnections. Forsimplicity wewillassumethatweretrieveconnectionswithconn_list[user],whereconnections issomemappingthatreturnslists. Listing3. 1: (Python) def get_with_lists(user, conn_list): out = [] for c in conn_list[user]: for u in conn_list[c]: if u != user and u not in out: out. append(u) return out Noticethattheoutputshouldbeacollectionofuniqueusers. Sincethelistdoesnot guaranteethatbydefault,wehavetoenforcethatwithchecks. Ontheotherhand, ifg. membersinsteadreturnedaset,wecouldsimplifythecodeconsiderably: def get_with_sets(user, conn_set): out = set() for c in conn_set[user]: out |= conn_set[c] #union= out -= {user} #difference= return out Wenolongerneedchecksbecausethesettype“takescare”oftheuniquenesscon- straintforus. Inadditiontobeingsimpler,thiscanoftenbemoreefficient. Since setsdonotneedworryaboutorderorduplicates,languageimplementerscanmake some set operations more efficient that the corresponding list operations. I pro- vided a Python benchmark in the book assets2: as the connection graph grows larger, the set-based approach becomes orders-of-magnitude faster. This holds even we include the time taken to construct a set representation from a list rep- resentation! Ontopofthesebenefits,setsalsoprovideausefulsignaltootherprogrammersread- ingourcode. When Iseeacodebasethatusesbothsetsandlists,Icanbeconfident theyareusingthesetsforuniqueunordereddataandlistsfordatathatmustbeor- 2https://github. com/logicforprogrammers/book-assets/tree/master/code/chapter-03",
      "word_count": 137,
      "char_count": 1875,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 12.69,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_37_0",
      "page": 37,
      "paragraph_index": 0,
      "text": "3. 5. SUMMARY 31 deredorduplicated. 3. 5 Summary 1. Logic provides us rewrite rules we can use to refactor boolean expressions. Somecontrolflowstatements,likeif,canbemanipulatedlikeimplication. 2. Manylanguagessupportquantifiers,whichletusfurthersimplifycode. 3. Settypescan,insomecircumstances,beclearerandmoreefficientthanlist types. 4. Becareful: notalllogicalrefactoringsaresupportedbyalllanguages! No refactor is complete until we have thoroughly tested that the behavior is the same. Inthenextchapter,wewilllearnalogic-basedtechniquetotestrefactorings andcodemorebroadly. 3. 5.1 Learn More [[Noneyetforthischapter!]]",
      "word_count": 52,
      "char_count": 622,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 10.98,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_38_0",
      "page": 38,
      "paragraph_index": 0,
      "text": "Chapter 4 Writing Better Tests Themostcommonformofsoftwaretestisthe“example”test: passaninputintoa functionandcheckthatitreturnsthecorrectoutput. Herearesomeexampletests formax: test max([1, 2, 3]) == 3 test max([1, 3, 2]) == 3 test max([2, 3, 3, 2]) == 3 Exampletestsareeasytowrite,buttheyarealsolimited. Manyfunctionsthatare notmaxpassthesetests: 1. Afunctionthatreturnsthelargestabsolutevalueinthelist 2. A function that returns the most common element, breaking ties with max value 3. Afunctionthatreturnsthemaximumofthefirstfiveelements 4. Afunctionthatjustreturns3. The more examples we write, the more invalid functions we rule out. But this is tedious and error prone. Logic provides us an alternative: express the essential meaningofthefunction,andthenusethistogeneratehundredsoftestsforus. 4. 1 Strong and Weak Tests Sometestsarestrongerthanothers. “Stronger”hasapreciselogicalmeaning. Thisisbecausetestsareequivalenttopred- icates. Thefirsttestinthelastsectionisequivalentthesameasthepredicate P = max(l)==3. Thetestpasseswhen Pistrueanditfailswhen Pisfalse. Forconve- nience,Iwilluse“P”toreferbothtothepredicateandthecorrespondingtest. Thismeanswecanuseoursamelogicaloperatorstoexpressstatementsabouttests. P&&Qistrueif(thetestscorrespondingto)Pand Qbothpass. P||Qistrueifatleast oneofthetwotestpasses. !Pistrueifthetest Pfails. Finally,P=>Q(aka! P||Q)is trueif Ppassingimpliesthat Qalsopasses. Whatdoesthatmeaninpractice? Itmeansthatthereisnopossibleversionofmax thatpasses Pandfails Q. Ifafailingtestmeansabuggyimplementation,thenanybug that“slipspast”Pwillslippast Q,too. Thismeansthat Pisatleastasstrong as Q, 32",
      "word_count": 124,
      "char_count": 1628,
      "annotations": {},
      "sentence_count": 27,
      "avg_word_length": 12.14,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_39_0",
      "page": 39,
      "paragraph_index": 0,
      "text": "4. 1. STRONGANDWEAKTESTS 33 whichistotallycapturedinthelogicalexpression P=>Q. If Pcancatchabugthat Q willmiss,then Pisstronger. Asanexample: P = max([1, 2, 3]) == 3 Q = max([1, 2, 3]) >= 0 R = 1. max([1, 2, 3]) >= 0 2. max([0, 1, -1]) >= 0 If Ppasses,Qalsopasses. If Rpasses,Qalsopasses. Thismeans P=>Q&&R=>Q. Wecanfurtherseethatbotharestrongerthan Q. Noticethat Pand Rarestronger than Qindifferentways: Pgivesamorespecificanswerforthesameinput,while R testsawiderrangeofinputs. Finally,neither Rnor Parestrongerthaneachother: eachwillpasssomeversionofmaxtheotherwouldreject. Mathematicianswould saythat=>formsa“partialordering”. [[TODOgraphicaldiagramofthis]] Exercise 25 (Partial Ordering) 1. Giveabuggyimplementationofmaxthat Rpassesbut Pfails,andabuggy implementationthat Ppassesand Rfails. 2. Modifythetwoclausesof Rtocreateatest Tthat’sstrongerthanboth P and R. Itshouldfailbothimplementationsyouwroteabove. 3. Howwouldyouexpress“Tisatleastasstrongasboth Pand R?”Doesthis mean Tisstrongerthan Q,too? Solution(page135) Exercise 26 (The Flawwith False) Foranypredicate P,false=> P. Soanypossiblebuginmaxthat’scaughtbya testwillalsobecaughtbytestfalse,makingitthestrongestpossibletestimag- inable. Andinfact Explaintheflawinthisreasoning. Solution(page136) While Pand Rarestrongerthan Q,neitherisstrongenough,onitsown,toguarantee thatmaxiscorrect. Thisversionofmaxpassesbothtestsbutstillisincorrect:",
      "word_count": 110,
      "char_count": 1403,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 11.76,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_40_0",
      "page": 40,
      "paragraph_index": 0,
      "text": "34 CHAPTER4. WRITINGBETTERTESTS max(list) = if list == [1,2,3] then 3 else if list == [0,1,-1] then 1 else -infinity We now have two separate ways of making a test stronger: widen the number of inputsittries,ormakemorespecificclaimsabouttheoutputs. Themostpowerful possibletestwouldtryeverypossiblevalidinputtomaxandmakethemostspecific claimpossibleabouttheoutput. Wewouldcallsuchatestatotalspecification(ortotal “spec”)ofmax. Itwouldpassifandonlyif maxwascorrectlyimplemented,making anyotherkindofdirecttestingredundant. Inotherwords, if Tisany testofmax, then Total Spec=>T. Whatthen,wouldbethattest? 4. 1.1 Specifyingafunction Firstweneedtodefinethedomain ofmax-thesetofallvalidinputs. Forthepur- posesofthischapter,I’llsaymaxshouldworkforanynonempty,noninfinitelistof integers. Thetotalspecificationlookslikethis: Is Max(x, l) = `x is the maximum value in l`. Total Spec = all l in Non Empty Integer Lists: Is Max(max(l), l) Itsometimesconvenientforourpurposestorestrictthedomaintosomethingex- pressableinalanguage’stypesystem. all l in Integer Lists: len(l) > 0 => Is Max(max(l), l) Nowwehavetodefinewhatitmeanstobethe“maximumvalue”ofalist. Firstofall, ithastobeanelementofthelist:ifwetakethemaxvalueandaddten,wenolonger havethemaxvalue. Second,noelementofthelistislargerthanit. Itiseasiertosee howtoformalizethispropertyifwestartbydefining Is Maxforsets: Is Max(x, set) = 1. x in set 2. `no element of the set is larger that x` Anotherwaytosay“noelementislargerthanx”istosay“forallelementsyinthe set,xisasleastasbigasy.” Thatlookslikeanall(page14)tome!",
      "word_count": 129,
      "char_count": 1558,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 11.09,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_41_0",
      "page": 41,
      "paragraph_index": 0,
      "text": "4. 2. INPRACTICE:PROPERTY-BASEDTESTING 35 Is Max(x, set) = 1. x in set 2. all y in set: x >= y [[Programmersworkinlists,notsets. Wecan’tusequantifiersonlists,butwecan insteadusethemonthesetoftheirindices]]: Is Max(x, list) = some i in 0..<len(list): 1. list[i] = x 2. all j in 0..<len(list): x >= list[j] Total Spec = all l in Non Empty Integer Lists: Is Max(max(l), l) Trywritingafewvalidtestsformax,andthenseeiftheyareimpliedby Total Spec. Exercise 27 (Uniqueness) Writethepredicate Is Unique(l),whichistrueiffeveryelementoflisunique. IE Is Unique([1, 2, 3]) !Is Unique([1, 2, 1, 3]) Solution(page136) 4. 2 In Practice: Property-Based Testing Reminderthatourtotalspecificationformaxwasthis: Is Max(x, list) = some i in 0..<len(list): 1. list[i] = x 2. all j in 0..<len(list): x >= list[j] Total Spec = all l in Non Empty Integer Lists: Is Max(max(l), l)",
      "word_count": 116,
      "char_count": 855,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 6.38,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_42_0",
      "page": 42,
      "paragraph_index": 0,
      "text": "36 CHAPTER4. WRITINGBETTERTESTS Implementing Is Maxinourfavoriteprogramminglanguageisstraightforward, as iscallingmaxonalistandcheckingthattheoutputpasses Is Max. Tryingthisforall infinitynon-emptyintegerlistsisimpossible(atleastwithoutsometoolscovered inthenextchapter).Whatwecoulddoasasubstituteistestonehundredrandomly generateddifferentlists. Thiswouldnotbeasstrongas Total Spec,butitwouldbe muchstrongerthanmax([1,2,3])==3. This is the idea behind Property-Based Testing (PBT). We first write a test that ap- pliestoanypossibleinput,andthenwerandomlygenerateinputstotestit. There aresomeengineeringdetailstofigureout(“howdowegeneratenon-emptyinteger lists?”),butmostlanguageshaveahighlevellibrariesthathandlethesedetailsfor us. Here’sanexample,usingthepythonlibrary Hypothesis3: import hypothesis. strategies as s from hypothesis import given @given(s. lists(s. integers(), min_size=1)) def test_max(l): max_val = f(l) # our max function assert max_val in l # (a) assert all(max_val >= x for x in l) # (b) The@givenisagenerator(“strategy”inhypothesis’terms)thatsaystheinputcan beanynonemptylistofintegers. Wedefineallofthefunction’sinputsthisway,pass themtothetest,runthefunctionnormally,andgettheoutput. Finally,wecheckif theoutputsatisfiesourspecification. Tip Reminder, you can download this code sample directly from https://github. com/logicforprogrammers/book-assets. Compare that to our total specification. The quantified set Non Empty Integer Lists becomesthegenerator(onlytestnonemptylists)andthebodyofthequantifierbe- comesourassertions. Inadditiontohandlingtherandomgeneration,Hypothesisalsogivesussomecon- vinces. Inadditiontopurelyrandomlists,itwillalsotrycommonpathologicalcases. Ifaninputfails,itwill“shrink”thefailinginputtoasmaller,simplerfailinginput. Forexample,ifmyimplementationofmaxlookedonlyatthefirstfiveelementsof thelist,here’swhatitcouldgivemeback: Falsifying example: test_max( l=[0, 0, 0, 0, 0, 1], ) 3https://hypothesis. works/",
      "word_count": 129,
      "char_count": 1963,
      "annotations": {},
      "sentence_count": 23,
      "avg_word_length": 14.22,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_43_0",
      "page": 43,
      "paragraph_index": 0,
      "text": "4. 3. NOTESONPROPERTYTESTING 37 Finally,Hypothesisstoresadatabaseofknownfailuresandretriesthemonfuture runs. Exercise 28 (Property Testing Find) Look into whatever your favorite language’s PBT library is, and then write a propertytestforfind. Youmayhavetowriteyourownversionmyfindforyour language, ifthebuiltindoessomethingbesidesreturn-1foramissingvalue (likeraiseanexception). Solution(page136) 4. 3 Notes on Property Testing 4. 3.1 Partial Specifications A partialspecification is any spec that is covered by a total spec, ie any test where Total Spec=>Partial Spec. Everytestwehaveseensofarbesidestest_maxisapartial specification. Intheory,weshouldneverneedtotestapartialspecification. Inpractice,thema- jorityofthetestswewritearepartialfortworeasons. [[One,mostofthefunctions weworkwithinsoftwarearetoocomplextobeeasilytotalspecifiable.]] Andeven ifwecantotallyspecafunction,partialspecshelpuslocalizethesourceofbugs. A totalspecfailingtellsusthatthefunctionisincorrect,butapartialspecfailingtells uswhy it’sincorrect. Forthisreason,usingpropertytestingwellmeanscomingupwithstrong,testable partialspecifications. Mostfunctionswillhaveatleastsomethingexpressible,often todowiththedomainoftheproblem: • Adatingapp’smatchfunctionshouldn’tmatchpeoplewithcatstopeoplewith catallergies. • Making a chess move and undoing it should return us to the original game state. • A customer who clicks “submit payment” ten times should only be charged once. • If we cut frames 126-143 of a video, the output will be seventeen frames shorterandthe906thframewillnowbethe889th.",
      "word_count": 125,
      "char_count": 1564,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 11.52,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_44_0",
      "page": 44,
      "paragraph_index": 0,
      "text": "38 CHAPTER4. WRITINGBETTERTESTS Note Icouldprobablymakethoseexercises. There are also universal “tactics” that apply to many different problems in many differentdomains. Oneofthesimplestandmostfamoustactics: thecodedoesnot crash on some input. This is called fuzzing and is very popular for low-level code (where memory leaks can lead to security vulnerabilities) and parsers. Similarly, wecouldtestthatnoqueriesmadetoan APIreturna500error. Ifwehaveexception handlingincode,wecantestthatonly“expected”inputsraiseerrors,andthatno othererrorsareraised. Refactoringwith Tests Anotherpopulartacticis“ourfunctionmatchesareferencefunction”. all x: f(x) = g(x) Whymight Iwanttotestthat Ihavetwoidenticalfunctions? Onecommonreason is that I might have a simple function that solves my problem, but is too slow for production. I can use that to test a faster-but-more-complex version of the same function. Or Imighthaveasimplifiedfunctionthatworksforthehappypath,and I want to make sure an edge-case-handling version still gets the same results on “good”inputs. Myfavoriteuse-case,though,istestingthatarefactoringdidnotchangethecode’s behavior. We can take anexamplefromthelastchapter (page 25) and show exactly that. import hypothesis. strategies as s from hypothesis import given def old_function(l, P, Q): if not all(P(x) for x in l) or any(not Q(x) for x in l): return 1 else: return 2 def refactor(l, P, Q): if all(P(x) and Q(x) for x in l): return 2 else: return 1 (continuesonnextpage)",
      "word_count": 174,
      "char_count": 1483,
      "annotations": {},
      "sentence_count": 15,
      "avg_word_length": 7.53,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_45_0",
      "page": 45,
      "paragraph_index": 0,
      "text": "4. 3. NOTESONPROPERTYTESTING 39 (continuedfrompreviouspage) @given(s. lists(s. integers()), s. functions(like=lambda x: ..., returns=s. booleans(), pure=True), s. functions(like=lambda y: ..., returns=s. booleans(), pure=True) ) def test_max(l, P, Q): assert old_function(l, P, Q) == refactor(l, P, Q) Noticethat Hypothesisisabletorandomlygeneratefunctions. Thesebehavesome- whatlikemocksorstubsinunittesting: theyaresettotakeanynumberofparam- etersandreturnabooleanvalue. Inonerun Pmightreturn Falseforeveryinteger, inanotheritmightreturn Trueforintegers-1,15,and7. Running this test shows that for all values, the simplified version of our function returnsthesameresult. Othertactics One of the most famous tactics is the “round-trip” property, that converting data intoanotherformatandthenbackdoesn’tchangethedata. Roundtrip(x_to_y(x), y_to_x(y)) = all x in X: y_to_x(x_to_y(x)) = x Thepolarsdataframelibraryfoundabugthisway. Theygenerateddataframes,con- vertedthecolumnsintopythonlists,thenconvertedthelistsbackintodataframe columns. Theroundtripisthatcolumn->list->columnshouldgivebacktheoriginal column. Hypothesisfoundthatthiscoulddroptimezones. Roundtrippropertiesaregenerallyeffectivewhenyouhaveacustomdatatypeyou wanttoconvertintoaportableformat,likejsonor CSV. Afinalusefulclassoftacticsis“metamorphicproperties”.Thesearepropertiesthat relatemultiplefunctioncallstogether. Forexample,ifyourcomputervisionsystem recognizesanobject,itshouldrecognizethesameobjectifyoutiltthepicturebytwo degrees. Orifyouhavequery APIwithfilters,addinganewclausetoafiltershould giveyouasubsetoftheresultsyougetwithoutit(arealbugthisfoundin Spotify).",
      "word_count": 105,
      "char_count": 1640,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 14.63,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_46_0",
      "page": 46,
      "paragraph_index": 0,
      "text": "40 CHAPTER4. WRITINGBETTERTESTS 4. 4 Summary 1. A function specification (page 34) is a mathematical description of how it be- havesanditsproperties. Specificationscanbefullorpartial. 2. Specificationscandeterminewhatarevalidinputsandhowtheyrelatetoout- puts. 3. Testsultimatelycheckthatafunctionmatchesitsspecification. Unittestsdo thisbycheckingasingleinput. Propertytestsinsteadgeneratelotsofrandom inputsandchecktheyallsatisfytheproperties. 4. Wemaynotbeabletogetafullspecificationforyourfunction,butwecanstill usefullyusepartialspecifications. 5. Notallpropertiesarefunction-local. Somespanmultiplefunctionsorinputs. Asusefulas PBTis,theideathatfunctionshavespecificationsgoesfurther. Withit, wecanexpandontheideaofusingspecificationstoverifythecorrectnessoflarger setsofcode. 4. 4.1 Learn More [[Talkaboutfuzzing,quickcheckhere,model-basedtesting]] • Property Testing with Complex Inputs: https://www. hillelwayne. com/post/ property-testing-complex-inputs/ • In Praise of Property Testing: https://increment. com/testing/ in-praise-of-property-based-testing/ • The Fuzzing Book: https://www. fuzzingbook. org/html/Fuzzer. html • Choosing properties in practice: https://fsharpforfunandprofit. com/posts/ property-based-testing-3/ • Metamorphic Testing: https://www. hillelwayne. com/post/ metamorphic-testing/",
      "word_count": 89,
      "char_count": 1316,
      "annotations": {},
      "sentence_count": 29,
      "avg_word_length": 13.8,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_47_0",
      "page": 47,
      "paragraph_index": 0,
      "text": "Chapter 5 Functional Correctness Codehasthenotorioushabitofrelyingonothercode,whichmeansrelyingonother code’s specifications. It doesn’t matter how thoroughly we test max if some other codecallsitwithanemptylist. In other words, specifications leak. Using logic, we can analyze how properties “flow”throughalargerprogram,andfindbugsthatoccurwhenotherwise-correct functionsarecomposedinthewrongway. Tobuildthismachinery,wewillstartwithasimpleandubiquitouslanguagefeature: theassertstatement. 5. 1 Assertions Anassertionisastatementthatshouldbetrueofacorrectprogram,andisonlyfalseif theprogramhasabug. Inalmostallmodernlanguages,assertionsareimplemented withtheassert Pstatement,whichendstheprogramif Pisfalse. Note Assertionsdifferfromexceptionsinthatexceptionscanbethrownevenifthe codeiscorrect,butencounterssomeunexpectedconditionatruntime. Ifwe trytoreadafileandthefiledoesn’texist,wethrowanexception. Missingfiles arenotwhatwewantbutitoccasionallyhappens. Ifwetrytoreadafileand somehowcomputeanegativefilesize,weraiseanassertionerror. Negativefiles shouldnotbepossible. Withassertstatementswecantaketheprogramspecificationfromatestandembed itdirectlyinthefunction. Let’sdothatwithlastchapter’smaxfunction. Listing5. 1: (Python) def max(l): assert len(l) > 0 # (a) out = l[0] for i in l: if i > out: out = i assert out in l #(b) (continuesonnextpage) 41",
      "word_count": 90,
      "char_count": 1355,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 14.07,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_48_0",
      "page": 48,
      "paragraph_index": 0,
      "text": "42 CHAPTER5. FUNCTIONALCORRECTNESS (continuedfrompreviouspage) assert all(out >= x for x in l) return out Whenweaddtheseassertions,theonlypropertytestweneedtowriteis @given(s. lists(s. integers(), min_size=1)) def test_max(l): max(l) Howdoesthiswork? Saywewrotemaxincorrectly,likethis: +for i in map(abs, l): -for i in l: Thepropertytestenginewillgeneratearandominput,like[-1]. Ourfunctionwill setout=1,andthenrunassert1in[-1]. Theassertfails,raisinganerror,whichis caughtbythetestharnessandreportedasatestfailure. Thismeansthatwecanexpressthespecificationofafunctionviaassertionsjustas wedoviapredicates. Let Max Pre(forprecondition)coveralloftheassertionsatthe beginningofthefunctionandlet Max Post(forpostcondition)bealloftheassertions attheend. Thenmaxiscorrectifalllin Integer Lists: Max Pre=>Max Post. Computerscientistsoftenuse“requires”and“ensures”tomean“precondition”and “postcondition”,asthosewordsareeasiertoreadandtype. Iwillusethoseterms interchangeably. Nowthatweknowaboutassertions,preconditions,andpostconditions,wecancan usethemtobuildup“contracts”. 5. 2 Contracts Doesthisfunctioncontainabug? Listing5. 2: (Python) # Get max price of available items def max_avail_price(items): avail = [] for item in items: if item. available: avail. append(item. price) return max(avail)",
      "word_count": 90,
      "char_count": 1290,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 13.34,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_49_0",
      "page": 49,
      "paragraph_index": 0,
      "text": "5. 2. CONTRACTS 43 Yes: ifnoitemsareavailable,thenwecallmax([]),whichfailstheassertionassertl !=[]. if item. available: avail. append(item. price) + assert avail != [] # surprise! return max(avail) Maxrequiresthateverycallersatisfiesitspreconditions. Inreturn, maxensures thepostconditionsaretrueofwhateveritreturns. Forreason,wesaythatmaxhasa contract,asin“Irequireyoufulfillyoursideofthecontract,and Iensure Iwillfulfill myside.” Formax(avail)tosatisfymax’scontract,availmustbenonempty,whichmeansthere mustbesomeavailableiteminitems. Andnowmax_avail_price,too,hasacontract: def max_avail_price(items): + assert any(i. available for i in items) ... Thepostconditionsalsopropagate. Weknowthateveryvalueinavailcorrespondsto anavailableiteminitems,andthatthefunctionreturnsthelargestvalueinavail. So max_avail_priceensuresthatitsoutputisthepriceofthemostexpensiveavailable itemintheinput. Wearebeginningtorunintoacommonissueimplementingcontracts: program- minglanguagesarenotasexpressiveaslogic,andencodingthesepostconditions purelyinassertstatementsgetscumbersome(andcomputationallyexpensive)! So it can be helpful to first express the contract mathematically. This is sometimes doneascommentsabovethefunction: # returns: out # requires: some i in items: i. available # ensures: # some i in items: # 1. i. available # 2. i. price == out # 3. all lesser in items: # lesser. available => lesser. price <= out def max_avail_price(items): ... Wecouldalsokeepthemseparatefromthecodeandcreateourown“contractno- tation”forfunctions. Thiswouldmakeiteasiertonamesubpredicatesofourcon- tract,annotateoutputvalues,usehelperpredicatesandfunctions,etc. Something likethis:",
      "word_count": 121,
      "char_count": 1658,
      "annotations": {},
      "sentence_count": 31,
      "avg_word_length": 12.71,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_50_0",
      "page": 50,
      "paragraph_index": 0,
      "text": "44 CHAPTER5. FUNCTIONALCORRECTNESS max_avail_price(items) returns o helpers: available = `list of available items in items` requires: `has an available item`: available != [] ensures: `output is priciest available item`: some i in available: 1. i. price = out 2. all i2 in available: i2. price <= i. price Inpractice,Ihavefoundthatpreconditionsandinlineassertionsarebotheasierto directlyencodeandmoreimpactfulthanpostconditions. Exercise 29 ([[Defensive Programming]]) Takethefollowingchangetomax_avail_price: for item in items: if item. available: avail. append(item. price) + if avail == []: + return None + else: return max(avail) Whathappenstothefunction’spreconditions? Whathappenstoitspostcon- ditions? Solution(page137)",
      "word_count": 81,
      "char_count": 726,
      "annotations": {},
      "sentence_count": 13,
      "avg_word_length": 7.98,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_51_0",
      "page": 51,
      "paragraph_index": 0,
      "text": "5. 2. CONTRACTS 45 Exercise 30 (Funwithsquareroots) 1. Writethefunctionalspecificationforsqrt(x: number)incontractform. It shouldrequirexisnotnegativeandensurethattheoutputsquaredgives backx. 2. The“quadraticformula”findsthevaluesofxsuchthat𝑎𝑥2 +𝑏𝑥+𝑐 = 0. It’swritten √ −𝑏± 𝑏2−4𝑎𝑐 2𝑎 Writeafunctionquadratic(a,b,c)thatcomputesthequadraticfor- mula,usingthepreconditionsandpostconditionsofbothsqrtand division(nodividingby0!) Useanylanguageyou’dlike. 3. Given x = 5 # requires (a): x >= 0 y = sqrt(x) # requires (b): y >= 0 z = sqrt(y) Is requirement (b) satisfied? You may need to modify your func- tionalspecificationofsqrttoshowit’svalid,oryoumayhavealready addedtheextrapostcondition. Solution(page137) 5. 2.1 Correctnessand Debugging Inatypicallanguage,ifanyoftheassertionsfail,theprogramcrashes. Sometimes, weprefertorecovergracefully. Othertimes,acrashisourbestoption. Toseewhy,considerthecasewherewedidn’thaveanycontractsatallandcalled max_avail_pricewithnoavailableitems. Thebestcase,maxtriestoindexanempty listandthrowsanerror,sowecrashanyway. Theworstcase(Java Script,Ruby),max indexesanemptylist,returnsnullorundefined,whichisthensenttocausestrouble insomedistantpartofourcode. Not only do the contracts raise problems earlier, they help us debug the problem better. Thinkofthecontractsasaseriesofcheckpointsthecodemustpassthrough:",
      "word_count": 96,
      "char_count": 1342,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 12.99,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_52_0",
      "page": 52,
      "paragraph_index": 0,
      "text": "46 CHAPTER5. FUNCTIONALCORRECTNESS Note (v0. 11)Ineedtomakeapictureforthisbutinthemeantime,here’sasketchin acodeblock: . max ----------------- MAPPre => Max Pre => Max Post => MAPPost -------------------------------------- max_avail_price Ifthe Map Precontractspassbutthe Max Precontractsfail,thenmax_avail_pricemust havedonesomethingwronginbetweensetupandcallingmax. If Max Prepassesand Max Postfails,thebugisprobablyintheimplementationofmax. If MAPPrefailsthen thebugisinwhateveriscallingmax_avail_price. Tip Sometimesweprefertocheckourassertionsindevelopmentandtesting,but disabletheminproduction. Forthisreason, mostlanguageswithassertions supportdisablingthemwithaflag. In Pythonthisisthe-Oflag. 5. 3 Contracts vs Types Atthispoint,contractsandassertionslookverysimilartoamorepopularsoftware tool:thetypesystem. max(l)hasthetypesignaturelist[int]->int,meaningitrequires thatlbealistandensuresthatitreturnsaninteger. Manylanguagescanchecktypes statically,andthetypecheckerdeterminesthatmaxdoesnotreturnaninteger,then theremustbeaproblemwithourfunction’simplementation. Howdoesthiscom- paretocontracts? It’shardtosummarizetwoenormousfieldsofresearch,butasageneralrule,con- tractsarebetteratexpressingpropertiesthantypes,whiletypesareeasiertocheck arecorrect. Typescanbe“replaced”withcontractsbutnotviceversa. Forexample, replacingthetypesignaturesofmax: def max(l): # l is a list of integers assert type(l) == list assert all(type(x) == int for x in l) (continuesonnextpage)",
      "word_count": 85,
      "char_count": 1477,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 16.39,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_53_0",
      "page": 53,
      "paragraph_index": 0,
      "text": "5. 3. CONTRACTSVSTYPES 47 (continuedfrompreviouspage) # the algorithm... assert type(out) == list return out It’snotasobvioushowtoconvertthecontracts“lisnonempty”or“outisthelargest elementinl”backintotypes! Contractscanencodearbitrarycomputations,while typescannot. Theflipsideof“encodingarbitrarycomputations”isthattypescanbecheckedat compiletimeandcontractscannot. Atleast, notwithoutspecialtoolsandalotof work(see Proving Code Correct(page53)). Forthisreason,it’sgenerallyagoodidea tousetypeswherepossibleandcontractsonlywherenecessary. Inmanylanguages,itispossibletoencodecomplexpropertiesinclevertypedefi- nitions. Saywewanttogivetheitemdatatypethetwobooleanfieldsavailableand cancelled, andwewanttoguaranteethattheycannotbothbetrue. Insteadoftwo booleans,wecouldusetheenumeratedfieldstatus: {avail,unavail,cancelled}. Then thereisnopossiblewaytohaveanitemthatisavailableandcancelled. Thistech- niqueisknownas“Making Illegal States Unrepresentable”,or MISU. 5. 3.1 Type Invariants Wehavetypes, wehavecontracts, wemusthavecontractsontypes. Atypeinvari- antisapropertythatmustbetrueforallvaluesofatype. “Anitemcannotbeboth availableandcancelled”isatypeinvariant,onethatwecancaptureinthetypedef- inition. Anotheris“itemsmusthaveapositiveprice”,whichwehavetoleaveasa contract: # invariant: price >= 0 # invariant: available => !cancelled # invariant: cancelled => !unavailable struct Item { price: int; status: {avail, unavail, cancelled} # ... } Weneedtochecktheinvarianteverytimewecreateor mutateavalueofthetype. Ifanyfunctioncandirectlymodifyitem. pricethenwehaveourworkcutoutforus chasing down every single use. If functions have to go through an item. set Price() methodthenweonlyneedtoputanassertinoneplace. Forthisreason,typeinvariantscanbequiteusefulinobject-orientedprogramming. OOPinvariantsarealsocalledclassinvariants.",
      "word_count": 107,
      "char_count": 1831,
      "annotations": {},
      "sentence_count": 28,
      "avg_word_length": 16.12,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_54_0",
      "page": 54,
      "paragraph_index": 0,
      "text": "48 CHAPTER5. FUNCTIONALCORRECTNESS Note Languagesthatsupportthemoftentimes(butnotuniversally)onlycheckthe invariant after calling public method. If the public method calls a private method,that isallowedtobreaktheinvariant,aslongasitisrestoredbythe endofthepublicmethod. 5. 3.2 Changeassertions Ifweareworkingwithfunctionsovermutablevalueswemayaswellcomeupwith anotationfor“thisiswhatchanged”inourcontracts. buy(acct, item) returns ok: bool ensures: `ok => price deducted from acct. balance, but balance still >= 0` `!ok => balance unchanged` Inrepresentingthesecontractswehavetwoadditionaldifficulties. Thefirstisthat weneedsomewaytorefertothe“oldvalue”andthe“newvalue”ofmutabledata. The few languages that support change variants use acct for the new value and somethinglikeold(acct)fortheoriginalvalue. ensures: if ok then 1. acct. balance >= 0 2. acct. balance + item. price == old(acct. balance) else acct. balance == old(acct. balance) Unfortunately,fewlanguagessupporttrackingtheoldvalueofamutation:theyjust change the state and are done with things. Some niche languages can track this butforthemostpartwehavetoreasonaboutchangeassertionslogically,notcheck themdirectly. 5. 4 Polymorphism and Refactoring All modern languages have some sort of polymorphism feature: the ability to pass many different types to the same function. It might be provided as interfaces, class-basedinheritance,Haskelltypeclassesor Rusttraits,orsomethingmoreex- otic. Regardlessofhowitisdone,thepurposeisthesame: wedefineafunctionto takean“abstraction”(forlackofabetterword)andthenitan“implementation”of thatabstraction.",
      "word_count": 144,
      "char_count": 1605,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 10.15,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_55_0",
      "page": 55,
      "paragraph_index": 0,
      "text": "5. 4. POLYMORPHISMANDREFACTORING 49 Acommonabstractionisthe“Mappable”:anythingwherewecaninsertandretrieve valuesatspecifickeys. Here Visa“generic”foranytype. # string keys for simplicity abstract Mappable[V] { keys(): set[str] # requires: k in keys() get(k: str): V # ensures: get(k) == v put(k: str, v: V) } If Iwriteafunctionfthattakesa Mappable,Icouldpassinanytypethatimplements get(),put(),andkeys().But Ihaveplacedcontractsontheabstraction’smethods:get hasapreconditionandputhasapostcondition. Ifthebodyoffiscompatiblewith thesecontracts,itdoesn’tmatterwhatimplementation Iputin,Ishouldbesafe. Butthoseimplementationscomewithcontractsoftheirown! Considertheimple- mentation Counter, which we might use to track how many of each value are in a list: impl Counter { d: Dict[Int] # other definitions... get(k: str): Int { d. get(k) if k in d. keys() else 0 } } Thisgetdoesn’thavethesamepreconditionsastheabstraction;itdoesn’thaveany abstractions at all! If we take last chapter’s notion of weaker and stronger, where Strong=>Weak,itisalwayssafetoweakenpreconditionsinanimplementation. Map- ping Pre => Counter Pre. On the other hand, if our new precondition is stronger or incomparable, code satisfying the abstract precondition might not satisfy the im- plementation. Suchanimplementationisn’tguaranteedtobe“safe”. Postconditions behave differently. Let History Map be an implementation of Map- pablethattracksthehistoryofeachkey’svalues. impl History Map[V] { hash: Dict[V] hist: Dict[List[V]] (continuesonnextpage)",
      "word_count": 154,
      "char_count": 1519,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 8.87,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_56_0",
      "page": 56,
      "paragraph_index": 0,
      "text": "50 CHAPTER5. FUNCTIONALCORRECTNESS (continuedfrompreviouspage) # ensures: get(k) == v # ensures: last(hist[k]) == old(get(k)) put(k: str, v: V) { hash[k] = v hist. append(k) } } Ifanycodefollowingaputdependson Mapping’sensurances,theycanalsodepend on History Map’sensurances. Soitisalwayssafetostrengthenpostconditions: Histo- ry Map Put Post=>Mapping Put Post. Ifourimplementedpostconditiondoesnotimply ouroldone,weareonceagainatrisk: ourimplementationmaynotlongerprovide theguaranteesweneed. Note Ifyouarefamiliarwithobject-orientedlanguages,youmightnoticehowsim- ilarthisistothe Liskov Substitution Principle. Thisisnotacoincidence. Bar- bara Liskov’smodelwasoriginallydefinedintermsofcontracts. Seethepaper ABehavioral Notionof Subtyping4. 4https://www. cs. cmu. edu/~wing/publications/Liskov Wing94. pdf",
      "word_count": 63,
      "char_count": 808,
      "annotations": {},
      "sentence_count": 13,
      "avg_word_length": 11.84,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_57_0",
      "page": 57,
      "paragraph_index": 0,
      "text": "5. 5. SUMMARY 51 Exercise 31 (ASquareisnota Rectangle) Inobject-orientedinheritance,thereisacommonsayingthat“asquareisnot arectangle”. Inotherwords,thisisininvalidinheritance class Rectangle { int length, width; set Width(x) { self. width = x; } # etc } class Square inherits Rectangle { int side; set Width(x) { self. side = x } get Width(x) { return self. side } # et } If we treat Rectangle as the abstraction and Square as the implementation, what’swrongwiththischange? Solution(page138) Theserulesapplytoanykindof“replacement”,like“replacingcodewitharefactor- ing.” Ifwerewritemax_avail_priceinawaythatpreservesorweakenstheprecon- ditions,weareguaranteedtonotbreakanyexistinguseofthefunctionanywhere in our codebase, and the same with preserving or strengthening a postcondition. This does not mean that violating this rule is guaranteed to fail. If we know that ourcodebasealwayscallsmax_avail_priceswithahundredavailableitems,wecan strengthensafelythepreconditiontoalwaysrequireahundreditems. However,this carriesariskthatsomerarely-seencodepathcannowbloweverythingup. 5. 5 Summary • Assertsarestatementsthatareonlyfalseiftheprogramhasabug. Typically, ifanassertionfails,wecrashtheprogram(thoughthisisoftenconfigurable). • Assertions that must hold going into a block of code are called precondi- tions/requirements,andthosethatmustholdexitingablockofcodearecalled postconditions/ensurances. Thesearepartofafunction’s“contracts”. • Contracts “spread” from everywhere a function is used. If X calls Y, X must guarantee Y’s preconditions and can safely assume Y’s postconditions. This makesthemusefulforcatchinganddebuggingerrors.",
      "word_count": 153,
      "char_count": 1635,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 9.69,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_58_0",
      "page": 58,
      "paragraph_index": 0,
      "text": "52 CHAPTER5. FUNCTIONALCORRECTNESS • Typesandcontractssharesimilarrolesbuthavedifferent,synergisticprop- erties. Typescanalsohavecontracts,whicharecalled“typeinvariants”. • Wecanusecontractstounderstandifcertainrefactoringsorsubstitutionsare “safe”. Now that we are familiar with specifications and contracts, we can do something extraordinary: we can mathematically prove our code correct. This will be the focusofthenextchapter. 5. 5.1 Learn More Assertionshavebeenaroundsincetheeraofvacuumtubecomputers. Thefirstlan- guagewithfunctioncontractswasthe Euclid Research Language5. Theywerefur- therpopularizedin OOPby Bertrand Meyerandhislanguage Eiffel,whoalsonamed the term “Design By Contract”. [[More recently, contract-heavy programming as seenarevivalasacomponentofthebroader“Negative Space Programming”style, suchaswith Tigerbeetle]]. Otherlanguageswithbuilt-incontractsupportinclude D,Ada,Clojure,and Racket (whichisthepredominantlanguageusedto“research”contracts). Mostlanguages haveatleastanassertstatement, andmanyhaveathirdpartycontractlibraryin theecosystem(suchas Java’s JML6. Inpractice,contractsandassertionstendtobemostoftenusedin“low-level”or“al- gorithmic”programming,whichneedstomaintainmoreinternalproperties(and wheremorethingscangowrong). John Regeherhasanexcellentoverview7onthe useofassertionsinthiscontext. 5https://dl. acm. org/doi/10. 1145/954666. 971189 6https://www. cs. ucf. edu/~leavens/JML/index. shtml 7https://blog. regehr. org/archives/1091",
      "word_count": 96,
      "char_count": 1475,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 14.38,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_59_0",
      "page": 59,
      "paragraph_index": 0,
      "text": "Chapter 6 Proving Code Correct Inprogramming,wewantoursoftwaretobecorrect. Commonprogrammingtools giveusconfidenceincorrectnessbutnotcertainty. Testingonlyshowscodeiscor- rectforsomeinputs,whilecompilersandconventionaltypecheckingshowcodepar- tially correctforallinputs. Ifwewanttobesurethatafunctionistotallycorrectforallinputs,weneedamore powerfulapproach. Weneedtouselogictoprovethecorrectness. Firstwewillcoverwhatwemeanbyaproofandhowwecan“provesoftwarecorrect”, andthenshowhowit’sdone. Thischapterisalittlemoremathematicallyinvolved thantheothertechniquechapters. 6. 1 What is a proof? Amathematicalproofisarigorousargumentthatsomethingistrue,possiblygiven someotherassumptions. Wehavealreadyencounteredproofsinchapter2when we “rewrote” the contrapositive rule: starting from the assumption of Q => P, we concludedthat! P=>!Q. In the context of programming, we most often want to prove “correctness”, that a functionorprogram’simplementationmatchesitstotalspecification. Aswehave seen,therearemanywaystowritethetotalspecificationofafunction,butthecon- tractmodelmakeslearningproofsmucheasier. Soafunctioniscorrectifsatisfying itspreconditionsguaranteesitspostconditions. Todothis,wetaketheinformationweknowtobetrueatthestartofthecondition (thepreconditions),thenupdateourinformationoneverystepofthealgorithm,and ifwhatweknowtobetrueattheendimpliesthepostconditions,thenourfunction iscorrect. We should not overstate what correctness actually means. “Correct” does not mean“guaranteedtodowhatwewantinallcircumstances”. Itmeans“conforms tothespecification”. Provencodecanfailinpracticebecausethespecmakesas- sumptions that are not true in practice, like “the hardware will not randomly flip bits”or“people’snamesdonotcontainemoji”. 53",
      "word_count": 99,
      "char_count": 1737,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 16.56,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_60_0",
      "page": 60,
      "paragraph_index": 0,
      "text": "54 CHAPTER6. PROVINGCODECORRECT 6. 2 Proofs Takethefunctionqr(x,y),whichreturnsthequotientandremainderfortwopositive numbers. Forqr(19,3),theresultshouldbe(6,1),since6*3+1==19. Thecontract formofthetotalspecificationis qr(x, y) returns (q, r) requires: x >= 0, y > 0 ensures: a. q*y + r == x b. 0 <= r < y c. q >= 0 Toprovethatqrisfully“correct”,weneedtoprovethat(a),(b),and(c)alwayshold forallinputsthatsatisfyourpreconditions. Let’sstartwithasimple,linearversion ofthefunction: # requires: x >= 0, y > 0 # ensures (a): q*y + r == x # ensures (b): 0 <= r < y # ensures (c): q >= 0 def qr(x, y): q = floor(x / y) r = x - q*y return (q, r) Whenstarting out, it is easier to reason through a function ifweexpand it to one instructionperline. # requires: x >= 0, y > 0 # ensures (a): q*y + r == x # ensures (b): 0 <= r < y # ensures (c): q >= 0 def qr(x, y): # requires: y != 0 tmp1 = x / y # assert tmp1 * y == x q = floor(tmp1) # assert q <= tmp1 # assert q + 1 > tmp1 tmp2 = q * y # assert tmp2 <= x r = x - tmp2 return (q, r)",
      "word_count": 188,
      "char_count": 1026,
      "annotations": {},
      "sentence_count": 10,
      "avg_word_length": 4.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_61_0",
      "page": 61,
      "paragraph_index": 0,
      "text": "6. 2. PROOFS 55 Thefirstlinehasadivision,whichrequiresthaty!=0. Weknowfromqr’srequire- mentsthaty>0,andy>0=>y!=0. So,assumingthepreconditionshold,thiswillnot throwadivide-by-zeroerroratruntime. Thedivisionensuresthattmp1*y==x,whichisknowledgewecanuseinthenext steps. Followingthroughtherestofthealgorithmtellsusthatr==x-tmp2==x-q*y, soweusesomehigh-schoolalgebraandrewritethattoq*y+r==x. Thatsatisfies postcondition(a). Thataloneisnotenough: -11*3+14==19,butthosecertainlyarenotthequotient and remainders! That’s why we have the second postcondition, which requires a littlemorereasoning. Justlikewedidourrewriterulesstepbystep,wecandothe algebraherestep-by-step: Step Rule r == tmp1*y - q*y init r == (tmp1 - q)*y distribution r == (tmp1 - floor(tmp1))*y definitionofq 0 <= tmp1 - floor(tmp1) astmp1 >= floor(tmp1) tmp1 - floor(tmp1) < 1 asfloorchopsoffthedecimal 0 <= (tmp1 - floor(tmp1))*y < y multiplyalltermsbyy 0 <= r < y definitionofr Ifindithelpfultoaddassertstatementstothebodiesoffunctionsas“checkpoints”, confirmingwhatknowledge Iknowforsureistrueatthatpoint. This proves postcondition (b). Postcondition (c) will be left as an exercise for the reader. Exercise 32 (AMissing Ensurance) Provethatqrensuresq>=0. Solution(page138)",
      "word_count": 104,
      "char_count": 1238,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 10.91,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_62_0",
      "page": 62,
      "paragraph_index": 0,
      "text": "56 CHAPTER6. PROVINGCODECORRECT 6. 2.1 Loopinvariants Wecouldalsoimplementqrbyrepeatedlysubtractingyfromxuntilweareleftwith anumberundery. Thenthenumberofsubtractionsisqandtheremainderiswhat’s left. # requires: x >= 0, y > 0 # ensures: q*y + r == x # ensures: 0 <= r < y # ensures (c): q >= 0 def qr_loop(x, y): q = 0 r = x while r >= y: r -= y q += 1 # assert 0 <= r < y return (q, r) Thisismorecomplicatedtoprovebecausewedon’tknowhowmanytimesthewhile loop will run. qr(100, 60) will only run the loop once, while qr(100, 6) will run it sixteentimes! Whatweneedtodoisfindaloopinvariant,somethingthatholdstrueoneveryiter- ationoftheloop. Thatmeans,attheveryleast: 1. Itmustbetruewhenweentertheloop 2. Itmustbetrueaftereveryloopiteration 3. Itmustbetruewhenweexittheloop. Thisistheinvariant Iwillpickforourloop: # loopinv: q*y + r == x Nowisittrueonloopentry? Yes: q==0andr==x,and0*y+x==x. Isittrueon eachloopiteration? Yes,becauseeveryloopincreasesqby1andrbyy,and(q+1)*y +(r-y)==q*y+y+r-y==q*y+r,whichwealreadyknowonloopentry. Loopinvariantsonforloopslookalittledifferent. Saywewanttoprovemaxiscor- rect. Sinceweareiteratingthroughalist, ourloopinvariantisthatouroutisthe maximumnumberseensofar. Hereisonewaytoproveit: # requires: len(l) > 0 # ensures out in l # ensures all(out >= x for x in l) def max(l): (continuesonnextpage)",
      "word_count": 140,
      "char_count": 1329,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 8.5,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_63_0",
      "page": 63,
      "paragraph_index": 0,
      "text": "6. 2. PROOFS 57 (continuedfrompreviouspage) assert l != [] out = l[0] for elem, i in enumerate(l): # loopinv pt 1 # true on entering loop and every iteration assert all(out >= x for x in l[:i]) if i > out: out = i # loopinv pt 2, true on exiting loop assert all(out >= x for x in l) return out The loop invariant looks a lot like our top-level ensurance, just on prefixes of the list instead of the whole list. This is common and intentional: the loop invariant progressively“buildsup”thetoplevelpostcondition,byshowingitholdsforevery stepofbuildingtheoutput. Asimilarapproachcanbeusedtoprovethecorrectness ofrecursivefunctions. 6. 2.2 Wecannotproveincorrectcode “We can prove this code is correct” is logically Have Proof => Correct. Contraposi- tively,!Correct=>!Have Proof,asinitisimpossibletoproveincorrectcode. Thisiswhereproofmostdiffersfromourusualformsofverification. Incorrectcode canstilltestcorrectly,ifitiscorrectformostoftheinputs. Anditcanstilltypecheck properly,aslongthebugdoesnotchangethetypesofthevalues. Toseethis,let’slookatanincorrectversionofqr: # requires: x >= 0, y > 0 # ensures (a): q*y + r == x # ensures (b): 0 <= r < y # ensures (c): q >= 0 def qr_loop_bad(x, y): q = 0 r = x # loopinv: q*y + r == x while r > y: # here r -= y q += 1 # assert 0 <= r < y return (q, r) The change is that I replaced r >= y with r > y. This adds a bug that only appears",
      "word_count": 208,
      "char_count": 1379,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 5.63,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_64_0",
      "page": 64,
      "paragraph_index": 0,
      "text": "58 CHAPTER6. PROVINGCODECORRECT whenxisamultipleofy. Ifwetrytoprovethiscodecorrectfromscratch,wewill quicklydeterminethatwhile(a)and(c)stillhold,(b)doesnot:r==yisapossibility! It’sfairlylikelythattestsuitewouldcoverthatcase,butformorecomplexbehavior, wearemorelikelytomisssomeunusualedgecaseinourtestsuite. Then again… for complex code, we are also more likely to make a mistake in the proof,ornotnoticethattheexistingproofisinvalidatedbyacodechange. Atleast atestsuitecanbererunoneverychange. Forproofstobepractical,wewouldneed somewaytoprogrammaticallycheckproofsforcorrectness. Enterformalverification. 6. 3 Formal Verification Formalverificationistowritingproofswhatautomatedtestingistomanuallytrying functioninputs. Insteadofrelyingonhumandiligencetocheckaproof, weusea special program to read a proof and check if it is correct. Then we never have to worryaboutmakingamistakeoraproofgettingstale. Mainstream languages can be verified with special tools. For example, Frama C8 extractscontractsandproofstepsfrom Ccommentsandusesthemtoprove Cpro- grams. Otherlanguages,like Dafny9,arebuiltforformalverificationfromthestart. Dafnyhasdedicatedsyntaxforcontracts, proofsteps, andassertions, aswellasa set of more complicated use cases like memory and concurrency. [[It has a tight integrationbetweenthelanguagedesign,thecompiler,andtheprover.]] Tocheck proofs,Dafnyusesan SMTSolver. Wewilllearnhowtouse SMTsolversourselvesin the Solvers(page108)chapter. 6. 3.1 qrin Dafny Thisiswhatqrlookslikein Dafny: method qr(x: int, y: int) returns (q: int, r: int) requires x >= 0 requires y > 0 ensures q*y + r == x // a ensures 0 <= r < y // b ensures q >= 0 // c { (continuesonnextpage) 8https://www. frama-c. com/ 9https://dafny. org/",
      "word_count": 153,
      "char_count": 1728,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 10.3,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_65_0",
      "page": 65,
      "paragraph_index": 0,
      "text": "6. 3. FORMALVERIFICATION 59 (continuedfrompreviouspage) q := x / y; r := x - q*y; } (Dafnytreatsdivisionbetweenintegersasfloordivision).Thecompilerwillthentry toprovealloftheensurancesaresatisfied,giventherequirements. Inthiscase,it issmartenoughtoprovecorrectnesswithoutanyhelpfromus. Whathappensifwe introduceabug? - q := x / y; + q := x / y - 1; // bug Thecompilergivesusanerror(Fig. 6.1)sayingitcannotproveensuresr<=y. Inter- estingly,itcanstillproveensurances(a)and(c). Similarly,ifweremoverequiresx >=y,itcannolongerprovethatensurance(c),butcanstillprove(a)and(b). Fig. 6.1: Dafnyshowsapostconditioncannotbeproven(VSCode) Nowlet’slookatqr_loop: method qr_loop(x: int, y: int) returns (q: int, r: int) requires x >= 0 requires y > 0 ensures q*y + r == x ensures 0 <= r < y ensures q >= 0 { q := 0; r := x; (continuesonnextpage)",
      "word_count": 90,
      "char_count": 832,
      "annotations": {},
      "sentence_count": 13,
      "avg_word_length": 8.26,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_66_0",
      "page": 66,
      "paragraph_index": 0,
      "text": "60 CHAPTER6. PROVINGCODECORRECT (continuedfrompreviouspage) while r >= y invariant q*y + r == x { q := q + 1; r := r - y; } } Dafny fails compilation, unable to prove ensures r <= 0. Formal verification tools often need help proving things that seem obvious to us. Then again, sometimes what’s obvious to us is actually incorrect, and Dafny will never make that kind of mistake. The only help we need to give it is to add another loop invariant saying thatr>=0oneveryloopiteration: while r >= y invariant q*y + r == x + invariant r >= 0 { Nowthecodesuccessfullycompiles. 6. 3.2 The Limitsof Formal Verification Ifformalverificationcanprovecodecorrect,whybotherwritingtests? Because formal verification is hard. Very hard. It demands we prove every sin- gle postcondition we declare, often to the satisfaction of limited tools. Dafny’s firstmajorsuccessstorywasthe Iron Fleetpaper10,whereresearchersverifiedtwo distributed systems in Dafny. In their restropective, they noted that it took 3. 7 person-yearstodevelopandprove5114linesofcode,arateofaboutfourlinesof verifiedcodeperworkday. Thisisconsideredfastbyproofstandards. Andjustbecausecodeisprovencorrectdoesnotmeanitisactuallycorrect! Itisonly “correct”ifallofourassumptionsholdandweonlydependonprovenproperties. A customermightdependonqrbeingreasonablyfast;replacingitwithqr_loopwould ruintheirday. Andmaxassumesnothingelseismodifyinglasweiteratethrough it. Inamulti-threadedprogramthismaynotbeasafeassumption. For most use cases, it is more economical to rely on informal proofs, inline con- tracts, and property testing. Formal verification only becomes economical for high-risk, high-severity software, like code involved in cryptography or low-level 10https://www. andrew. cmu. edu/user/bparno/papers/ironfleet. pdf",
      "word_count": 203,
      "char_count": 1774,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 7.74,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_67_0",
      "page": 67,
      "paragraph_index": 0,
      "text": "6. 4. SUMMARY 61 systems. Andeveninthosesystems,onlyoneortwocorelibrariesneedformalver- ification,whiletherestdoesnotneedthatlevelofscrutiny. Forthisreason,FVlan- guagesoftensupportcompilingintomainstreamprogramminglanguages. Dafny supports Python,C#,and Go,amongothers. Listing6. 1: Dafnyqrcompiledinto Python class default__: def __init__(self): pass @staticmethod def qr(x, y): q: int = int(0) r: int = int(0) q = _dafny. euclidian_division(x, y) r = (x) - ((q) * (y)) return q, r Itneverbeaselegantorasidiomaticascodewritteninthenativelanguage,butit willalwaysbereliable. Evenso,thetechniquesofinformalproof arewidelyapplicable. Reasoningthrough thecorrectnessofafunctionshowsuswhatweneedtotest,wheretopaythemost attentionto,etc. Andwedon’talwaysneedtodofullverificationofthetotalspeci- fication. Manylanguagescanprovesomepropertiesthroughthetypesystem,and Rust’scompilercanprovetheabsenceofmemoryerrors. 6. 4 Summary • Aproofisamathematicallyrigorousargumentthatsomethingistrue. • Ifwecandefinefunction“correct”tomeanpreconditionsguaranteepostcon- ditions,wecanmathematicallyprovethemcorrect. • Wecanmakemistakesinwritingproofs. Withformalverificationlanguages, thecompilercancheckourproofsforerrors. Some FVlanguagescanbecom- piledintootherlanguages. • Formal verification is very difficult, and often only reserved for mission-critical software. Informal proof remains useful for reasoning aboutcodeingeneral. Formalverificationispartofthebroadertopicofformalmethods,whichwewillre- turntoinalaterchapter (page85). Fornow, though, wehavespentalongtimeon",
      "word_count": 101,
      "char_count": 1559,
      "annotations": {},
      "sentence_count": 22,
      "avg_word_length": 14.45,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_68_0",
      "page": 68,
      "paragraph_index": 0,
      "text": "62 CHAPTER6. PROVINGCODECORRECT usinglogictoimproveourcoding,butwritingcodeisonlypartofourprofessional work. Inthenextchapter,wewilluselogictohelpusbetterunderstandourproject requirements. 6. 4.1 Learn More Provingcodecorrectviacontractsstartswith Tony Hoare’s Hoare Logic11,firstin- troducedin1969: {x in Int; x < 10} x = x+1 {x <= 10} Dafnyusesanextensionof Hoare Logiccalled“separationlogic”,whichbettercov- erslanguagefeatureslikealiasing, memory manipulation, andconcurrency. The Dafnywebsite12 hasmorematerialonitsadvancedfeaturesandacollectionoftu- torialsandreferences13. Notallformalverificationlanguagesarebasedoncontracts. Languageslike Liquid Haskell and Idris have type systems that are far more powerful than mainstream languages, powerful enough to encode the complete specifications of functions. Contractstendtobemorepopularwithprocedurallanguages,andtypestendtobe morepopularwithfunctionallanguages. Formalverificationisalsooftendonewithproofassistants, toolsmeantforproving mathematicaltheorems,adaptedtoinsteadproveprogramscorrect. Isabelle,Rocq, and Agdahavebeenaroundforalongtime. Recently,lean14 isrelativelynew,but rapidlyrisinginpopularity. Youcanalsolearn Leanthroughinteractivegames15, like“The Natural Numbers Game”. Tohelppeoplecomparedifferentformalverificationlanguages,Imaintainthe Let’s Prove Leftpad16 project,wherethepropertiesof Java Scriptswhichcomparesover twodozensuchlanguageswithexplanations. 11https://en. wikipedia. org/wiki/Hoare_logic 12https://dafny. org/ 13https://dafny. org/latest/toc 14https://lean-lang. org/ 15https://adam. math. hhu. de/#/ 16https://github. com/hwayne/lets-prove-leftpad",
      "word_count": 106,
      "char_count": 1640,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 14.48,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_69_0",
      "page": 69,
      "paragraph_index": 0,
      "text": "Chapter 7 Case Analysis Asurprisingnumberoftheproblemswesolvewithsoftwareareaboutmaking“de- cisions”basedoncombinationsofinputs: • Anapplicationmightdecidewhattoshowauserbasedonwhatfeatureflags aresetandwhatpartoftheworldtheyarein. • Aloadbalancermightdecidewhethertospinuporwinddownserversbased onserverload,minimum/maximumconstraints,andtimeofday. • Anairlinemightdecidewhethertoofferaperkbasedontheuser’stickettype, travellerclass,andcreditcardused. • Apopulartexteditordecideseverysetting’svaluebasedontheglobaldefault, language default, the custom user global setting, custom user language set- ting, custom user project setting, custom user project language setting, and whethertheoptiontakesanumberoranobject. When we are asked to implement this kind of software, we don’t get the require- ments as an exhaustive set of possible combinations, we are given a set of rules. Andthisleadstobugsintherequirementsthemselves,wheretheruleshaveagapin theircoverage…oracontradiction. Thesimplestlogicaltoolforanalyzingcasesisthedecisiontable. Theconceptcan belearnedinminutes, usedevenbynontechnicalteammembers, andisbroadly usefulinfindingproblemsinbothcodeandhumanrequirements. Theyonlywork if the decision depends on a finite set of combinations, but that is a large enough categorytomakethemworthknowing. 7. 1 Decision Tables To make a decision table, write down every combination of possible inputs, write theoutputforeachinput,andthenputtheminasortedtable. That’sit,that’sdecisiontables. Infact,wehavealreadyuseddecisiontablesearlierinthebook. Atruthtable(page7) isjustadecisiontablewherealloftheinputsandoutputsarebooleans. Let’sseeanexample. Imaginewearemanaginganevent’sticketpage,andareasked toprovidethesediscounts: • First100registrationsgeta10%discount 63",
      "word_count": 124,
      "char_count": 1765,
      "annotations": {},
      "sentence_count": 15,
      "avg_word_length": 13.24,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_70_0",
      "page": 70,
      "paragraph_index": 0,
      "text": "64 CHAPTER7. CASEANALYSIS • Next100registrationsgetan8%discount • Seniorsgeta5%discount • Otherwise,attendeespayfullprice. Thistablehasoneoutput,thediscount. Ithastwoinputs,registrationnumberand senior status. While the registration number isn’t a finite input, we can collapse itintothreecases: 0-100, 101-200, and201-. Seniorstatusisjustaboolean. We wouldexpectourtabletohavesixrows,threevaluesforthefirstinputtimestwofor thesecond. Table7. 1: Discounts(Ambiguous) reg# senior? discount -100 T ??? -100 F 10% 101-200 T ??? 101-200 F 3% 201- T 5% 201- F 0% Therequirementsareincompletebecausetheydonotspecifywhatshouldhappen whensomeoneiseligiblefortwodiscounts. Incompleterequirementshavemultiple valid“extensions”: therearedifferent,perfectlysensiblewaystocompletethem. I haveseenatleastfourdifferentsolutionsinreal-worldsystems: 1. Onlyallowtheonehighestdiscount(here10%) 2. Applydiscountsinsequence(here14. 5%) 3. Addalldiscountstogetherandapplyatonce(here15%) Letusassumethatinthisexample,theclient’schoiceis(1),onlythemaximumdis- countapplies. Inthiscase,iftheattendeeisanearlyregistrant,itdoesnotmatter whethertheyareaseniorornot. Ifavalue“doesn’tmatter”inthefinaldecision,we canmakethetableshorterbycollapsingallofthethatvalue’spossibilitiesintoone row. Weconventionallycallthisanany valueandmarkitwithadash.",
      "word_count": 79,
      "char_count": 1317,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 15.68,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_71_0",
      "page": 71,
      "paragraph_index": 0,
      "text": "7. 1. DECISIONTABLES 65 Table7. 2: Discounts(complete) reg# senior? discount -100 - 10% 101-200 - 8% 201- T 5% 201- F 0% This table has only four real rows, but each of the any values covers two possible values for senior?, so counts as two effective rows. This means this table has six “effective”rows,asweexpected. If the table were to have less than six effective rows, we would immediately know thatsomeinputwasmissing. Ifthetablehadmorethansixeffectiverows,wewould immediatelyknowthatitrepeatsoneinputontwodifferentrows,mappingthemto differentoutputs. Atablethatdoesnotmissanyinputsiscalledsound,whileatable thatdoesnotcontradictitselfiscalledcomplete. This is enough to define “validity” for decision tables: a valid table is one that is both sound and complete, while an invalid table is unsound or incomplete. This meansthatatablewithoutexactlytherightnumberofrowsisautomaticallyinvalid, revealingaproblemwithourrequirements. Exercise 33 (Exactnessisnot Validity) Theconverseisnottrue: atablecanhavethecorrectnumberofrowsandstill beinvalid. Giveanexampleofthis. HINT:Thetablewouldbeunsoundandincomplete. Solution(page138) I’mbeingcarefultousevalid,notcorrect. Adecisiontablecanbevalidbutincorrect— say, if it does not capture what the client asked of us. But if it is invalid then it is definitely incorrect. Logically,Correct=>Valid. Validityisstructural,correctnessis businessal. Exercise 34 (Fizzbuzz) fizzbuzz(x: Int)isafunctionthatreturns“fizz”ifxisdivisibleby3,“buzz”ifx isdivisibleby5,“fizzbuzz”ifdivisiblebyboth3and5,andotherwisereturns thenumberunchanged. Writethedecisiontableforfizzbuzz. Solution(page139)",
      "word_count": 152,
      "char_count": 1624,
      "annotations": {},
      "sentence_count": 22,
      "avg_word_length": 9.69,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_72_0",
      "page": 72,
      "paragraph_index": 0,
      "text": "66 CHAPTER7. CASEANALYSIS 7. 2 Another Requirements Example Note Thismightberemovedinthenextversion(v0. 12),unlessenoughpeoplecom- plainaboutthat Wehavesomevideocallsoftwarewitha“sharescreen”feature. Thehostcansettwo options: 1. Whethermorethanonepersoncanshareatatime 2. Whocanshare(Host,Participants) We’lluseadecisiontabletomodelwhether Icansharemyscreenornot. Basedon theseoptions,therearefourpossibleinputsinourdecisiontable: 1. Canonlythehostshare? 2. Am Ithehost? 3. Issomeoneelsesharing? 4. Ismultishareenabled? Allofthesearebooleans. Ourtablethenhas24 =16virtualrowstotal. Herewego: O H S M out 1 T T T - ERROR 2 T T F - T 3 T F - - F 4 F - T T T 5 F - T F F 6 F - F - T Imarkedrow(1)as“error”becauseitshouldbeanimpossiblestate: “onlythehost canshare”,“wearethehost”and“someoneelseissharing”cannotallbetrueatthe sametime. Ifweseethiscaseinproduction,there’sabugsomewhereinoursystem. Countingtherowswithoneanyastwovirtualrows,andtherowswithtwoanysas four, we have a total of 16 unique rows. That means there’s no missing rows in- dicating a missing requirement, and no duplicate rows indicating a requirement contradiction.",
      "word_count": 111,
      "char_count": 1131,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 9.2,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_73_0",
      "page": 73,
      "paragraph_index": 0,
      "text": "7. 3. ANALYZINGCODE 67 Butjustbecausethetable’scompletedoesn’tmeanit’scorrect. Thisversionofthe tablehasabug. Canyouseeit? It’srow(5).Ifmultishareisdisabledandsomeoneelseissharing,then Ican’tshare, evenif I’mthehost. One nice thing about decision tables is that even nontechnical people can under- standthem,soyoucangettheirinvolvementincheckingrequirements. Fixingthe table: O H S M out 5a F T T F T(kicksother) 5b F F T F F Exercise 35 Speakingofscreensharing,Irecentlyembarrassedmyselfonavideocall. My microphonehasahardwaremuteswitch,which Ihadtoggledon,andassumed Ididn’tneedtopressthesoftwaremutebutton. What Ididn’trealizewasmy webcam also had a microphone, zoom was using it, and my hardware mute switchwasdoingnothing. Everybodycouldhearmeloudandclear. Model “Am I (m)uted” as a decision table, with the columns “(z)oom mute”, “(h)ardwaremute”,and“(w)hichmic”(deskorwebcam). Bonus: howcan Ipreventthisfromhappeningagain? Solution(page139) 7. 3 Analyzing Code If a code path uses branches and no loops or recursion, we can represent its high-levelbehaviorasadecisiontable. Thiscanbeusefulifthecodedependson external sources for some of the inputs. [[While the implementation may have to spreaditslogicoverthewholefunction,wecanstilluseadecisiontabletoorganize thehigh-levelbehavior. ]] For example, Python’s file open function17 has different behavior depending on whatmodestringwaspassedin,whetherthestringincludesa“+”,andwhetherthe fileexists. Intheimplementation18,thefunctionparsesthemodestringandthen, 17https://docs. python. org/3/library/functions. html#open 18https://github. com/python/cpython/blob/main/Modules/_io/fileio. c#L248",
      "word_count": 145,
      "char_count": 1647,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 10.37,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_74_0",
      "page": 74,
      "paragraph_index": 0,
      "text": "68 CHAPTER7. CASEANALYSIS muchlater, checksifthefileexists. Representingthefunctionasadecisiontable makesiteasiertoseethehigh-levelbehavior. mode file_exists? effect r T open r F error w T truncatesfile w F createsfile a T appendstofile a F createsfile x T error x F createsfile '' - sameasr 7. 4 Techniques 7. 4.1 Separate Independent Outputs In Python’sopenfunction’smodestring,wecanwrite\"r+\"insteadof\"r\". Adding+? asaninputtothetablewouldbringitfromteneffectiverowstotwenty. Itwouldalso notbenefitusinanyway,becausethe+doesnotchangeanyofthefileeffects. Writing\"r+\"insteadof\"r\"insteadchangesthefilehandle’sread/writepermissions. But those permissions do not change if the file already exists or not, unless that wouldbethesourceofanerror(like\"x+\"onanexistingfile). Theseindependencesmaynotbeobvioustosomeonelookingatagianttwenty-row, six-column table. We can instead present them with two smaller tables that only containtheinputsrelevanttoeachdecision.",
      "word_count": 83,
      "char_count": 955,
      "annotations": {},
      "sentence_count": 15,
      "avg_word_length": 10.52,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_75_0",
      "page": 75,
      "paragraph_index": 0,
      "text": "7. 4. TECHNIQUES 69 +? key can_read can_write T r T T T w T T T a T T T x T T T '' error / F r T F F w F T F a F T F x F T F '' T F Therearetradeoffshereinhowconcisevscomprehensivewewantthetablestobe. Ifitisimportantforthetabletokeeptrackofallerrorcases,thenweneedallthree inputs. 7. 4.2 Representing Mutations Decisiontablesaren’tthebesttoolforrepresentingawholelotofstatechanges,or somethinggettingchangedmultipletimes,butsometimesit’susefultoshowhowa singlevaluechanges. # example code if x % 2 == 0 x = x/2; else x = 3*x+1; Inapreviouschapterwerepresentedchangeswithold(x)(page48). Inthiscase,we aregoingtoborrowamathematicalnotationthatisalittlemorecompact. Insome branchesofmathandscience,theywritex'tomeanthenew valueofxaftersome change. Here,thatwouldgiveusthetable x%2 x' 0 x/2 1 3x+1 Ideally,thetableshouldmodelasinglestep. Thismeansthatwecanupdatemultiple valuesinthesametable,asinaswapfunction:",
      "word_count": 91,
      "char_count": 906,
      "annotations": {},
      "sentence_count": 12,
      "avg_word_length": 8.97,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_76_0",
      "page": 76,
      "paragraph_index": 0,
      "text": "70 CHAPTER7. CASEANALYSIS x' y' y x Wecouldrepresentthevaluesinthestepafterwithx'',butifwearedoingthatthen decisiontablesareprobablythewrongtoolforthejob. 7. 4.3 Impossible Rows Ifwewanttodemonstratenotjustthatanoutputisimpossible,butthataparticular combinationofinputsisimpossible,wecanusea/tosaynotjust“itdoesn’tmatter”, but“it’snotpossible”. password-correct? 2auth-enabled? 2auth-correct? Login T T T T T T F F T F / T F - / F Logically,thisisthesameaswritingadash/any,butitsignalstothereaderthatit shouldn’thappen,notthatitdoesn’tmatter. 7. 4.4 Validity Footguns The easiest way to accidentally make a table unsound is through misuse of anys. Fortunately,thisisalsorelativelyeasytodetect. Table7. 4: Unsound Table A B o T - T - T F Ifweexpandtheanys,wehaveboth TT->Tand TT->F,whichisunsound. Herewe candetecttheissuebecausethetableisn’tcomplete,aswedon’thavearowfor FF. Ifweaddthatasaspecialcase,thenwe’llhave5effectiverowstotal,whichshould alertusthatthetableisunsound. Oneeasywaytoavoidthisistoneverplaceananytotheleftofafixedvalue. This canleadtosometablebloatbutisbetterthanhavinganinvalidtable!",
      "word_count": 81,
      "char_count": 1104,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 12.64,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_77_0",
      "page": 77,
      "paragraph_index": 0,
      "text": "7. 5. WHENISATABLETHEWRONGCHOICE? 71 Anothercommonmistakeistonotexhaustivelyenumerateallvaluesinacolumn. count o -10 T 11-20 F 21-30 T If weknowforsure count maxes out at30 then this table is complete. If it cango higher,wehavenotcoveredallpossibilities,sothetableisincomplete. 7. 5 When is a Table the Wrong Choice? Fourquestions Iaskmyselfwhenconsideringadecisiontable: 1. Am Imodelingsomethingwithaclearmapbetweenindependentinputsand outputs? 2. Can Icleanlyandconciselyenumeratetheinputsinasensibleway? 3. Wouldatablebethemostusefulwayofpresentingthisinformation? 4. Wouldthetablebelegible? Question(1)is“no”iftheinputsstronglydependoneachother,ifthedecisionin- volveslotsofsideeffects,orifthedecisioncannotbemade“instantly”. Ifthedeci- sionrequiresalooporrecursion,tablesarelikelyinsufficient. Question (2) is a “no” if some input has an infinitely-many values and there is no wayofgroupingthem,orifoneoftheinputsisalistorothercomplextype. Question(3)isa“no”ifthedecisioncanberepresentedbyasimplerequation. This canhappenwithoverrides,likeifa CLIisconfiguredbasedoncodedefaults,user options,andparameterflags. Wecouldwriteatablewhereeachcolumnhasthree possibilities,andshowthefinalconfigurationsettingforall27rows. Butitcouldbe clearertoinsteadsay“flagsalwaysoverrideuseroptionsoverrideuserdefaults”. Question(4)isa“no”ifthetableistoobig. Howbigis“toobig”dependsonalotof factorsbutaveryroughruleofthumbisthatthetableshouldallfitononesheetof paperormonitorscreen. Ifonecolumnhaseightpossiblevalues,orifthedecision dependsonsixteeninputcolumns,thenthetablewillbeillegible.",
      "word_count": 86,
      "char_count": 1575,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 17.33,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_78_0",
      "page": 78,
      "paragraph_index": 0,
      "text": "72 CHAPTER7. CASEANALYSIS 7. 6 Summary • Truth tables enumerate every possible input and output of a logical expres- sion. • Decisiontablesextendtruthtablestosystems,byallowingmultipleinputsand outputs. • Decisiontablesarecompleteiftheyhavenomissinginputs, andsound ifthey don’thavethesamesetofinputstwice. In the next chapter, we will look at how logic can be used to better understand databases. 7. 6.1 Learn More Decision tables are an example of a formal specification. We have already written plenty“formalspecifications”inpreviouschapters. Whatmakesthetermmatter isjust“aspecificationwecancheckforvalidityandmanipulate.” Wewillcoverfor- malspecificationinmoredetailinlaterchapters. [[Othertoolsinthesameverygeneralcategoryofdecisiontablesincludeflowcharts, faulttrees,andstatemachinediagrams.]] [[TODOSomethingaboutcombinatoricsand Parnastables]]",
      "word_count": 71,
      "char_count": 852,
      "annotations": {},
      "sentence_count": 13,
      "avg_word_length": 11.01,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_79_0",
      "page": 79,
      "paragraph_index": 0,
      "text": "Chapter 8 Databases Sofar, wehaveonlyappliedlogictounderstand“softwareinmotion”: algorithms andhowtheyexecute. Butitisalsoanextraordinarilypowerfultoolforunderstand- ingdatabases,too. Forsimplicitywewillrestrictourattentiontoonly SQL-driven relational databases. However, many of these concepts are adaptable with CSVs, dataframes,documentdatabases,etc. 8. 1 A Relational Model Overview Modernrelationaldatabasesarebasedon Edgar F. Codd’srelationalmodel. Wewill not go into comprehensive detail on the model but provide an overview we need. Seethe Further Reading(page84)foradeeperdive. Adatabaseisasetoftables, andatableisasetofrecords. Whatisarecord? We canstartbysayingthatarecordisanorderedlistofvalues,ortuples. Oneexample databasecouldbe db = {users, groups, user_groups} users = { (1, \"h@hillelwayne. com\"), (2, \"kate@example. com\"), (3, \"asher@example. com\"), # etc } # etc Foragivenrecordu,wecangetthefirstelementwithu[0],thesecondwithu[1],etc. Thissatisfiesourneedsforbothinconvenienceandincomprehensibility. Itwould bebettertogivetheelementsnamesandtypes,sowecouldwriteu. idinsteadofu[0]. And,aswecancreatenewnotationwheneverwewant (page16),Iwilladdasimple recordsyntax: record users { id: Int email: String | {NULL} } 73",
      "word_count": 99,
      "char_count": 1232,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 11.45,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_80_0",
      "page": 80,
      "paragraph_index": 0,
      "text": "74 CHAPTER8. DATABASES Recall that | is setunion (page 11). We will define this to mean that each element ofthesetusershastwofields,onecalledidthatmustbeanintegerandonecalled emailthatmaybeastringornull. Youmaynotethisisverysimilartohowwewould defineatablein SQL: CREATE TABLE users ( id int NOT NULL, email varchar(9999) ) Thisisintentional! Wecanchooseourlogicalnotationtocloselymatchthesoftware systemswebuild. Atthesametime,Ichosetomakenullablefieldsexplicit,where SQLmakesthemthedefault. Ifindthatleadstofewermistakes. Thatsaid,Ifindwritingset|{NULL}alittleunwieldy,so Iwilladdabitofsyntactic sugaranddefineset+xtomeanset|{x},sothatwecanwriteemail: String+NULL. Inanycase,becausetablesarejustsets,wecanquantifyoverthemlikeanyother sets. Andthisiswherethelogicalmodelreallyshines. Ourtwoquantifiersrepresent thetwoessentialpurposesofadatabase:queryingdataandensuringdataintegrity. 8. 2 Querying Data Giventhequery SELECT u. email FROM users as u WHERE u. id = 5 Theresultsofthisquerycanberepresentedasthesetfilter{(u. email)foruinusers: u. id==5}. Itwillhelpusdowntheroadifwecaninsteadexplorethepropertiesof queriesasiftheyweresomeexpressions. Sowecaninsteadask“doesthequeryre- turnanyresultsatall”?Thatquestioncorrespondstotheexpressionsomeuinusers: u. id==5. Ifwewantedmultiple WHEREclauses,wecouldjustaddmoreclausesto thelogicalexpression: SELECT * FROM users as u WHERE u. id = 5 AND (u. email = \"\" OR u. email IS NULL) -- some u in users: -- 1. u. id == 5 -- 2. (u. email == \"\" or u. email == null) Nestedsubqueriesandcommontableexpressionsarejustnestedquantifiers. If I wanttoqueryifuserfivebelongstoany groups,Icouldwrite",
      "word_count": 128,
      "char_count": 1632,
      "annotations": {},
      "sentence_count": 30,
      "avg_word_length": 11.76,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_81_0",
      "page": 81,
      "paragraph_index": 0,
      "text": "8. 2. QUERYINGDATA 75 SELECT * FROM users AS u WHERE u. id in (SELECT ug. user_ids FROM user_groups AS ug) -- some u in users: -- some ug in user_groups: -- u. id == g. user_id Whatdoeslogicalrepresentationofqueriesactuallygetus? Forone,itmeanswecan abstractcomplicated SQLexpressionswithpredicates. Whendotwousersbelong tothesamegroup? Wheneachuserhasagroupmembershipforthesamegroup. Asapredicate,thisiseasy: Member(user: users, group: groups) = some ug in user_groups: 1. ug. user_id == user. id 2. ug. group_id == group. id Connected(u1, u2: users) = some g in groups: 1. Member(u1, g) 2. Member(u2, g) And from there we can compose our predicates to make more complex queries. But SQL databases cannot do this. Standard SQL does not support directly using user-defined predicatesin queries. As a consolation prize, we caninstead gener- atethesetofallvaluesthatpassapredicateandthenusethatsetinotherqueries. Thedatabasetermforthisisaview. CREATE VIEW memberships AS SELECT u. email, g. name FROM users AS u, groups AS g WHERE ( SELECT COUNT(*) FROM user_groups AS ug WHERE ug. user_id = u. id AND ug. group_id = g. id ); -- memberships = -- {(u. id, g. id) for u in user, g in groups: Member(u, g)} Ofcoursethat’snothowanyactual SQLuserwouldwritememberships. Theywould useajoin!",
      "word_count": 176,
      "char_count": 1281,
      "annotations": {},
      "sentence_count": 33,
      "avg_word_length": 6.28,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_82_0",
      "page": 82,
      "paragraph_index": 0,
      "text": "76 CHAPTER8. DATABASES 8. 2.1 SQLJoins ASQLjoinconnectstheinformationintwotables,forexample: -- users without an email in groups SELECT * FROM users as u INNER JOIN user_groups as gu ON gu. user_id = u. id WHERE u. email IS NULL Most SQLtutorials“explain”joinsintermsofsetunionsandintersection,oftenwith diagramslikethis: Fig. 8.1: ABADexplanationofjoins Butthismakesnosense. usersanduser_groupsaredisjointsets,sotheintersection shouldbeempty! Toproperly representaninnerjoin,weneedtointroduceonesmallnewsetopera- tion. The Cartesianproduct oftwosets Sand Tisthesetofalltupleswherethefirst elementofthetupleisin Sandthesecondelementisin T. Wecanformallydefine thisviathesetmap(page12): S x T = {(s, t) for S in S, t in T} S x T x U = {(s, t, u) for S in S, t in T, u in U} # etc Forexample,the Cartesianproductof Natx Alphabetisthesetcontaining(0,a),(0, b), (1,a), etc. Theoperatorisnamedafter RenéDescartes, whopioneereditsuse, andiscalleda“product”because#(S x T) == #S * #T(where#Sisthenumberof elementsin S).",
      "word_count": 111,
      "char_count": 1012,
      "annotations": {},
      "sentence_count": 14,
      "avg_word_length": 8.13,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_83_0",
      "page": 83,
      "paragraph_index": 0,
      "text": "8. 2. QUERYINGDATA 77 Exercise 36 (Cartesian Cardinalities) Showthat,if Sand Tarefinitesets,then#(Sx T)==#S*#T. HINT:Thinkgeometrically. Solution(page139) Withthe Cartesianproduct,wecanrepresenttheinnerjoinlikethis: some (u, gu) in users x user_groups: 1. u. id == gu. user_id 2. u. email == NULL Thereisnodifferencebetweenthe WHEREand ONclausesinthelogicalrepresen- tation,justasthereisnodifferencein SQL:mostdialectswillhappilyletyouputa joinconditioninthe WHEREorafilterinthe ON. Ifwewanttoinnerjoinacrossthree tables,thesyntaxisexactlythesame: some (u, gu, g) in users x user_groups x groups: 1. u. id == gu. user_id 2. gu. group_id = gu. id Outerjoinsaremoredifficultforbeginnerstolearn,whichmayberelatedtothefact thatouterjoinsarealsomorecomplextorepresentlogically. Aleftouterjoinon S and Treturnsallthesamerowsasaninnerjoin,butalsotherowsof Sthatdon’tjoin withany rowson T. Thisisthesameasthisquery: || some (u, gu) in users x user_groups: u. id == gu. user_id || some (u, null) in users x {NULL}: all gu in user_groups: u. id != gu. user_id Arightouterjoinisdefinedanalogously. Note Whataboutaggregatefunctions,like GROUPBY? Thisiswhereourlogicbreaks downalittle. Aggregateswereneverpartoftherelationalmodelandactmore like “postprocessing” steps on the query. I have not found any good formal modelsbutpersonallythinkofthemas“partitionfunctions”. # given SELECT g, h, aggrfunc(t) FROM Table AS t WHERE P GROUP BY t. g, t. h",
      "word_count": 146,
      "char_count": 1432,
      "annotations": {},
      "sentence_count": 30,
      "avg_word_length": 8.82,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_84_0",
      "page": 84,
      "paragraph_index": 0,
      "text": "78 CHAPTER8. DATABASES # we could write partition_set = {(t. g, t. h) for t in Table} rows_for(g, h) = {t for t in Table: t. g == g && t. h == h && P(t)} {(g, h, aggrfunc(rows_for(g, h))) for (g, h) in partition_set} It’skindofamessbutitcanbeworkedwithgivenpatience. Pleasedonotask meaboutwindowfunctions. 8. 3 Database Constraints Getting data out of a database is only half of the challenge. The other half is get- tingdataintothedatabase,andmoreimportantlykeepingitcorrect. Wedon’twant recordstobemissingvaluesorforeignkeys, orhaveduplicateids, ormissanyof the application specific requirements like “user balances must be above zero” or “nomorethantenrecordscanbeactiveatonce.” Wecanstartbylookingatsomewaysdatabasesrepresentconstraints: CREATE TABLE users ( id INTEGER balance integer, email TEXT, -- ... CHECK (balance > 0), UNIQUE (email) ); CREATE TABLE user_groups ( user_id INTEGER, -- ... FOREIGN KEY(user_id) REFERENCES users(id) ); These two tables define three constraints, each with its own special syntax. One appliestoeachrecordinatable,onetoeverypair ofrecordsinthetable,andone to records between tables. All three constraints can be directly represented with logicalexpressions. Startingwith“userbalancesmustbeabovezero”: constraint User Positive Balances = all u in users: u. balance > 0",
      "word_count": 162,
      "char_count": 1307,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 7.07,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_85_0",
      "page": 85,
      "paragraph_index": 0,
      "text": "8. 3. DATABASECONSTRAINTS 79 I put constraint in front because it helps me distinguish predicates that represent actual system constraints from helper predicates. All logical constraints that of the form all x in set: P(x)— that is, constraints over a single table row— can be implemented via CHECK. UNIQUE is a standard uniqueness predicate (using disj (page18)): constraint User Email Unique = all disj u1, u2 in Users: u1. email != u2. email Thelastconstraint,aforeignkeyconstraint,saysthateveryuser_grouprecordhas acorrespondinguserrecord. Anotherwayofthinkingaboutthisthatifuser_group. user_id==17, theremustexist auserwithid17, whichmeansthequery someuin users: u. id==17istrue. Inotherwords,foreignkeysconstraineachrecordtoguar- anteeaquery! Forthisreasonwecanrepresentkeyconstraintswithanestedquan- tifier,placingasomeinsideanall. constraint User Group User FK = all ug in user_groups: some u in users: ug. user_id = u. id # Or, to make things simpler: FK(from_tbl, to_tbl, col, to_col) all record in from_tbl: some ref in to_tbl: record.[col] = ref.[to_col] constraint User Group User FK = FK(user_groups, users, user_id, id) Note Thisraisesaquestion: ifall-somenestedquantifiershaveadeepmeaningin databases, does some-all meananything? Ihavenoidea. Iwelcomesugges- tionsfromreaders.",
      "word_count": 148,
      "char_count": 1292,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 7.74,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_86_0",
      "page": 86,
      "paragraph_index": 0,
      "text": "80 CHAPTER8. DATABASES Exercise 37 (Compoundkeys) SQL UNIQUE constraints can refer to multiple columns. If I add UNIQUE (user_id,group_id)touser_groups,thismeansthatdifferentuser_grouprecords cansharethesameuseridorthesamegroupid,butnotbothatthesametime. Writethisasaconstraint. Solution(page139) Exercise 38 Writetheconstraint“Ifauserbelongstoagroup,theusermusthaveanon-null email”. HINT:use=>. Solution(page140) Exercise 39 Let#Sbethenumberofelementsin S. Writetheconstraint“allgroupscanonly havefivemembersatmost.” HINT:Usesetfilter(page12). Solution(page140) 8. 4 Constraints Are Queries Predicatelogiccanexpressanenormousnumberofinterestingconstraints. Each ofthemechanismsearliercanonlyimplementanarrowsubclass: • REFERENCESonlyimplementsallsin S:(sometin T:s. col1=t. col2). • UNIQUEonlyimplementsallx,yin S:(x. col1!=y. col1)||(x. col2!=y. col2)... • CHECKonlyimplementsallxin S:P(x),where Pdoesnotuseanyquantifiers. Inotherwords,CHECKcannotconstrainarowbasedonotherrows. Howwouldweimplementsomethinglike“allbookshaveanauthorbornbeforethe publicationdate”? Itiseasytoexpresslogically:",
      "word_count": 65,
      "char_count": 1092,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 15.82,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_87_0",
      "page": 87,
      "paragraph_index": 0,
      "text": "8. 4. CONSTRAINTSAREQUERIES 81 constraint No Time Travel = all b in books: some a in authors: 1. b. author_id = a. id 2. b. published_on > a. birthday Implementing No Time Travelisanothermatter. Itcannotbedonewith REFERENCES (as it has two conditions), nor with CHECK (as it uses a second quantifier), nor with UNIQUE (obvious). So can our databases enforce this, or are we limited to application-sidevalidation? Itturnsoutmost SQLdatabases,can,infact,enforcethisconstraint! Wejusthave toputinalittleworkandapplysomelogicalrulestogetthere. First, wecansplit No Time Travelintoan“easy”constraintanda“hard”constraint: # Just a foreign key constraint Books Authors FK = all b in books: some a in authors: b. author_id = a. id constraint No Time Travel = all b in books: all a in authors: b. author_id != a. id || b. published_on > a. birthday We turned the some in No Time Travel into an all. We also changed the body to be “eithertheauthorisdifferentorthebookwaspublishedaftertheauthorwasborn”. Whilewecouldhaveuseda=>instead,SQLdoesnothaveanimplicationoperator, sowriting! P||Qkeepsusclosertotheeventualimplementation. This,combined with Books Authors FKforcingeachbooktohaveexactlyoneauthor,isequivalentto ouroriginalconstraint. Ournextstepisnotstrictlynecessary, butwillclarifyour finaloutcome: constraint No Time Travel = all (b, a) in books x authors: b. author_id != a. id || b. published_on > a. birthday Nowfortheinsight. Ifthisconstraintdoesnothold,theremustbeaspecific(book, author)counterexamplethatviolatesit. Andwecanwriteaquerytofindthecoun- terexample! Ifthequeryturnsupnothingweknowtherearenocounterexamples, meaningtheconstraintholds. Thisisjustanotherexampleoflogicalduality!",
      "word_count": 183,
      "char_count": 1691,
      "annotations": {},
      "sentence_count": 35,
      "avg_word_length": 8.25,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_88_0",
      "page": 88,
      "paragraph_index": 0,
      "text": "82 CHAPTER8. DATABASES constraint No Time Travel = !some (b, a) in books x authors: !(b. author_id != a. id || b. published_on > a. birthday) # Apply De Morgan's Law constraint No Time Travel = !some (b, a) in books x authors: 1. b. author_id = a. id 2. b. published_on <= a. birthday Thisdirectlymapstoa SQLquery: -- No Time Travel holds if this finds 0 rows SELECT COUNT(*) FROM books as b INNER JOIN authors as a ON b. author_id = a. id AND b. published_on <= a. birthday; Toactuallyenforcetheconstraint,wecanusea SQL“trigger”,orastoredprocedure settorunonrowortablechanges. Allweneedtodoisdeclareatriggertriggerthat makesthisqueryandraisesanexceptionifthequeryisnonempty. Forbrevity,an exampleisseparatelyprovidedwiththecodesamples19. 8. 4.1 State Change Constraints SQLtriggershaveoneotherusefulfeature:whentriggeredbyarecordupdate,they cancheckconstraintsonhowtherecordchanged. Wecanforexampleenforcethat anupdated_attimestampcanonlygoforwardsintimeorthatwhenanullablefield hasanon-NULLvalue,itcannotbesetbackto NULL. We have already represented changes in previous chapters: in change assertions (page 48) we used old(x) and x, while in decision tables (page 69) we used x and x' (“x prime”). SQL syntax uses NEW and OLD, but to make a laterchapter (page 95) easier Iwillusetheprimesyntaxrightnow. constraint No Null After Admin = all g in Groups: g. admin_id != NULL => g. admin_id' != NULL Oncetheadmin_idisnotnull,thenextvaluecannotbenulleither,meaningthatit cannevergobacktonull. 19https://github. com/logicforprogrammers/book-assets",
      "word_count": 177,
      "char_count": 1544,
      "annotations": {},
      "sentence_count": 34,
      "avg_word_length": 7.73,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_89_0",
      "page": 89,
      "paragraph_index": 0,
      "text": "8. 5. SUMMARY 83 Thisisalsousefulforstatemachinecolumns:arecordcango WAITING->READYor READY->DONE,butnot WAITING->DONE. Inthatcaseit’sconsideredgoodformto “allowxtochangetoitself”: constraint State Machine Transitions == all t in tasks: 1. t. status = \"WAITING\" => t. status' in {\"WAITING\", \"READY\"} 2. t. status = \"READY => t. status' in {\"READY\", \"DONE\"} Exercise 40 (Transition Helper) Writeahelperpredicate Valid Transitions(task,from,to),sothatwecanwritethe bodyof State Machine Transitionsthisway: all t in tasks: 1. Valid Transitions(task, \"WAITING\", {\"READY\"}) 2. Valid Transitions(task, \"READY\", {\"DONE\"}) Notethattoisgoingtobeasetoftransitions. Solution(page140) 8. 5 Summary 1. Databasesaresetsoftables,whicharesetsofrecords. 2. Thesomequantifierscorrespondstodatabasequeries. Joinsarequeriesover the Cartesianproduct oftwoormoretables. Inthecaseof SQL,mostsomeex- pressionsaredirectlytranslatabletoqueries,thoughyoumayneedtoinline abstractpredicates. 3. all expressions correspond to database constraints, and all-some nested ex- pressions correspond to foreign keys. Databases have different features for enforcingconstraints. Constraintsmaybeondata,orhowdatachanges. 4. By using duality, we can check a constraint by querying its negation. SQL databasescanusethistoenforcecomplexconstraints,viatriggers. Sofarwe’vebeenkeepingthelogicveryclosetothedatabase: we’retalkingabout properties of database tables and records. [[But the database is just an imperfect implementationofthedatamodel,theconceptualsliceoftheworldwe’retryingto makelegible.]] Nextchapterwewilluselogictostudyourdatamodel,onelevelof abstractionhigher.",
      "word_count": 140,
      "char_count": 1632,
      "annotations": {},
      "sentence_count": 29,
      "avg_word_length": 10.66,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": true
    },
    {
      "id": "p_90_0",
      "page": 90,
      "paragraph_index": 0,
      "text": "84 CHAPTER8. DATABASES 8. 5.1 Further Reading The database representation in this chapter comes from Edgar Codd’s Relational Model. The relational model was first introduced in A relational model of data for largeshareddatabanks20,alongwithasetofoperatorsthatmadethe Relational Al- gebra. Agentlerintroductiontorelationalalgebracanbefoundhere21. SQLisbased onrelationalalgebrabutdoesnotfollowitinitsentirely. The best way to learn about the capabilities of database invariants is to read the officialdatabasedocumentation. Whilethischapteriscompatiblewith SQLite,the bestdocumentedisarguably Postgres: • CHECKconstraints22 • Triggerconstraints23 20https://dl. acm. org/doi/10. 1145/362384. 362685 21https://cs186berkeley. net/notes/note6/ 22https://www. postgresql. org/docs/current/ddl-constraints. html 23https://www. postgresql. org/docs/current/sql-createtrigger. html",
      "word_count": 78,
      "char_count": 872,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 10.19,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_91_0",
      "page": 91,
      "paragraph_index": 0,
      "text": "Chapter 9 Data Modeling Note This is scheduled for a rewrite and needs to be updated after the databases chapterwasrewritteninv0. 11 In the last chapter, we used logic to figure out database constraints. To do so, we stuckclosetodatabasesemantics:foreignkeysarenumbercolumns,relationships betweenentitiesgothroughamany-to-manytable,etc. Anydatabaseschemaisonlyonepossiblerepresentationoftheabstractdatamodel. Inthischapter,wewilluselogictoanalyzethemodeldirectly. 9. 1 Abstracting from Data Let’spullourrecordsfromthelastchapter: record Users { id: Int } record Groups { id: Int admin_id: Int } record Group Membership { id: int user_id: int group_id: int } Iseethree“implementationdetails”thatdon’tmattertotheabstractmodel: 1. I don’t care whether the group id is an integer or a UUID or something else, what Ireally careaboutisthatthegroupsaredistinct. 2. Why is admin_id an integer? Why can’t we just say the admin is a user? The databaseneedsanintegercolumn,butinourheads,groupshaveadmins,not integers. 85",
      "word_count": 113,
      "char_count": 1009,
      "annotations": {},
      "sentence_count": 12,
      "avg_word_length": 7.94,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_92_0",
      "page": 92,
      "paragraph_index": 0,
      "text": "86 CHAPTER9. DATAMODELING 3. Forthatmatter,whydoweneeda Group Membershiprecord? Whatweactually intendisthatgroupshavemembersthatareusers. Ormaybethatusersbelong togroups. Themany-to-manytableis,onceagain,justanimplementationde- tailtoworkwithinthedatabase. This all gets in the way of thinking about the actual data model. It’d be easier to throwtheseallawayandjustfocusontheusers,thegroups,andtheirrelationships. Somethinglikethis: sig User {} sig Group { admin: User members: set User } I’m using “sig” for signature, because these are not records. They’re just a data model, where groups have admins and sets of users. No implementation details haveleakedintomymodel! (Thougheventhisisbiasingthingsalittle: whatifweinsteadwantedtohavemem- ber_ofbeanelementofthe Userandnotthegroup?) Oneoftheconstraintsfromlastchapter,thatagroup’sadminmustalsobeagroup member,iseasilyexpressedlikethis: all g in Group: g. admin in g. members 9. 2 In Practice: Formal Specification Letmestartbyaskingtwoquestions: 1. Isitpossibleforonegrouptohaveeveryadmininthesystemasmembers? 2. Isitpossibleforonegrouptohavenomembers? Thesearen’ttoocomplicated,andyoucanprobablyreasonthroughtheminacouple ofminutes. Butasthecomplexityofadatamodelgrows,andweaddincreasingly elaborateconstraints,itbecomesprogressivelymoredifficulttosolvetheseinyour head. Thisisaplacewherewewantthecomputertocheckourmodelforus. Andthisisthedomainof Formal Specification: creatingmodelsofdata(orsystems) andusingtoolstocheckthemforcorrectness. It’stheothersideoftheformalmeth-",
      "word_count": 109,
      "char_count": 1528,
      "annotations": {},
      "sentence_count": 23,
      "avg_word_length": 13.03,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_93_0",
      "page": 93,
      "paragraph_index": 0,
      "text": "9. 2. INPRACTICE:FORMALSPECIFICATION 87 odscointhatwefirstintroducesinanearlierchapter(page58),justcheckingdesigns insteadofcode. Therearemanydifferentformalspecificationlanguages,buttheone Iwanttouse nowiscalled Alloy24. I’mnotgoingtogointotoomanyofthespecificsof Alloy;that’s beyondthescopeofthisbook. But I’llshowyouhowitsolvestheseproblems. First,wedefinethecomponentsofourdatamodelandourconstraints: sig User {} sig Group { admin: User, members: set User } pred admins_members_of_groups { all g: Group | g. admin in g. members } pred is_admin[u: User] { some g: Group | g. admin = u } Notethat Alloyusesadifferentsyntaxforquantifiers: allg: Group|propinsteadof allgin Group: prop. Oncewehavethebasics,wecanwritea“command”,telling Alloytofindexamples of systems where certain properties are true. In this case, ask it for examples of groupscontainingalladmins: run group_with_all_admins { admins_members_of_groups && some g: Group | all u: User | is_admin[u] => u in g. members } Running Alloy’sbuilt-inanalyzer(Iuse VSCode)givesusavisualizationoftheex- ample: Alloycanalsogeneratenewexamplestovisualize,changethetheme,andevenrun a REPLonspecificexamples. It’sagreattoolforfindingunexpectedsituations! 24https://alloytools. org/",
      "word_count": 109,
      "char_count": 1232,
      "annotations": {},
      "sentence_count": 15,
      "avg_word_length": 10.31,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_94_0",
      "page": 94,
      "paragraph_index": 0,
      "text": "88 CHAPTER9. DATAMODELING Fig. 9.1: Analloyvisualization. We can also ask Alloy to check that a property always holds. This is usually used to check that we guarantee a data invariant. For example, we might want a data invarianttobe“groupsareneverempty”. check no_empty_groups { admins_members_of_groups => all g: Group | some g. members } Runningtheanalyzeronthiswouldgiveusavisualizationofacounterexample,if it can find one. In this case, though, it doesn’t find anything, so we can be more confidentthepropertyholds. Executing \"Check no_empty_groups\" No counterexample found. Assertion may be valid. 2ms.",
      "word_count": 81,
      "char_count": 607,
      "annotations": {},
      "sentence_count": 13,
      "avg_word_length": 6.51,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_95_0",
      "page": 95,
      "paragraph_index": 0,
      "text": "9. 2. INPRACTICE:FORMALSPECIFICATION 89 9. 2.1 Abstractions Specificationlanguagesliveatahigherlevelofabstractionthatprogramminglan- guages,meaningtheycanexpressandcheckpropertiesthatwouldbetoocompu- tationallyinfeasibletoprogram. Let’saddintoourdatamodelthatsomeuserscan haveanotheruserwhoreferredthem. That’seasytoexpressasadatabaserecord. record Users { id: Int + referrer: Int + NULL } This implies a new data invariant: users cannot be their own referrer. As a SQL constraint,itwouldlooksomethinglikeu. referrer!=u. id. In Alloy,itwouldlooklike this: sig User { referrer: lone User // 0 or 1 } pred no_self_loops { all u: User | u != u. referrer } Now,onemoretwisttotheconstraint:nousercantransitively betheirownreferrer. If Alicerefers Boband Bobrefers Eve,Evecannothavereferred Alice. Thisisextraordinarydifficultin SQL. Attheveryleastwe’dneeduserecursivecom- mon table expressions, and the resulting query will be convoluted and computa- tionallyexpensive. Ontheotherhand,transitivelookupsaretrivialin Alloy. In Alloy,Alice.^referreris the“transitiveclosure”ofreferrals: thesetcontaining Alice’sref,theref’sref,the ref’sref’sref,etc. Thesameconstraintin Alloy: pred no_cycles { all u: User | !(u in u.^referrer) }",
      "word_count": 113,
      "char_count": 1221,
      "annotations": {},
      "sentence_count": 23,
      "avg_word_length": 9.81,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_96_0",
      "page": 96,
      "paragraph_index": 0,
      "text": "90 CHAPTER9. DATAMODELING 9. 2.2 and Implementations It’sgoodthatwecanexpresstheconstraintin Alloy, butthatdoesn’thelpuswith ouractual SQLdatabase. SQLstilldoesn’tcleanlysupporttransitivelookups. Butwecanuse Alloytofigureoutanimplementable SQLconstraintthatalsoguar- anteesno_cycles. Thenwe’dtest check { implementable_property => no_cycles } In this case we’d say that implementable_property is stronger than no_cycles. One idea Ihavewouldbetoplacesomeorderingonusers,likeidorsignupdate. Then I’d predictthatifwecouldonlyrefersomeonewithanearliersignupdate,wewouldn’t haveanycycles. Thiswouldberelativelyeasytocheckin SQL. Exercise 41 Writetheconstraint(inournotation,not Alloy’s)“Ifauserhasareferrer,the user’screated_atislaterthanthereferrerscreated_at. Solution(page140) In Alloy: sig User { referrer: lone User, created_at: disj Int } pred referral_must_come_later { all u, ref: User | u. referrer = ref => gt[u. created_at, ref. created_at] } Now we can check that our implementable constraint guarantees our data model property: check implementation_works { referral_must_come_later => no_cycles } Alloy passes this with no counterexample, so we can be confident this constraint doeswhatwewant. Alloyhelpedusfindacheapwayofenforcinganexpensivedata modelconstraint.",
      "word_count": 116,
      "char_count": 1271,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 9.97,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_97_0",
      "page": 97,
      "paragraph_index": 0,
      "text": "9. 3. FINDINGBUGSWITHSPECIFICATIONS 91 The technical term for “showing an implementation matches a more abstract model”isrefinement. 9. 3 Finding Bugs with Specifications Themainuse-caseofformalspecificationsistofinderrorsindesigns. Designer- rorsaremoreexpensivethancodeerrors,andsoaremoreimportanttodetectearly. [[Sinceformalspecificationsliveatahigherlevelofabstraction,theycanmoreeas- ilyfinddesignerrors.]] When I teach Alloy, I demonstrate this with a simplified model of access permis- sions. Wehaveasetof Usersand Resources. Resourcescanonlybereadby Users intheirreadable_byset. sig User {} sig Resource { readable_by: set User } pred can_access[u: User, r: Resource] { u in r. readable_by } run {some u: User, r: Resource | can_access[u, r]} Ontopofthis,weaddthatsomeresourceshaveparents. Ifourresourcesarefiles, theparentcouldbethecontainingfolder. Aswithourpriorexampleofreferrals,no resourcecantransitivelybeitsownparent. sig Resource { readable_by: set User + ,parent: lone Resource } + fact no_cycles { + no r: Resource | + r in r.^parent +} Finally,weamendtheaccessrule,sothatausercanaccessaresourceiftheyhave permissiontoreaditsparent. pred can_access[u: User, r: Resource] { u in r. readable_by (continuesonnextpage)",
      "word_count": 121,
      "char_count": 1233,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 9.2,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_98_0",
      "page": 98,
      "paragraph_index": 0,
      "text": "92 CHAPTER9. DATAMODELING (continuedfrompreviouspage) + || u in r. parent. readable_by } Afteraddingthis,Iaskmyclass“ifwecanaccessaresource,areweguaranteedto accessallofitschildren?” assert parent_implies_child { all u: User, r: Resource | can_access[u, r] => all child: r.~parent | //r.~parent is `children of r` can_access[u, child] } check parent_implies_child Mostpeoplearesurprisedtofindoutno,thispropertydoesnothold! Asbefore,we canseethecounterexampleasagraphvisualizatin,butwecanalsooutputitasan ASCIItable: ┌─────────────┬───────────┬──────────┐ │this/Resource│readable_by│parent │ ├─────────────┼───────────┼──────────┤ │Resource$0 │User$0 │ │ ├─────────────┼───────────┼──────────┤ │Resource$1 │ │Resource$0│ ├─────────────┼───────────┼──────────┤ │Resource$2 │ │Resource$1│ └─────────────┴───────────┴──────────┘ Toexplaintheerrorinstance,thisistheproblem: 1. We start with three resources: Parent (Resource$0), Child (Resource$1), and Grandchild(Resource$2). Only Parenthasthe Userinreadable_by. 2. Because the User can access Parent, the property asserts they can access Child. 3. Inchecking Child,weseethat Userin Parent. readable_by,sowecanaccessit. 4. Becausewehaveaccessto Child, thepropertyassertswecanaccess Grand- child. 5. The User is not in Child or Grandchild’s readable_by. So we cannot access Grandchild. 6. Wecanaccess Childbutnotallofitschildren,leadingtoapropertyviolation.",
      "word_count": 121,
      "char_count": 1402,
      "annotations": {},
      "sentence_count": 22,
      "avg_word_length": 10.6,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_99_0",
      "page": 99,
      "paragraph_index": 0,
      "text": "9. 4. SUMMARY 93 Thisistherealpowerofformalspecification: thefullspecislessthan30linesand stillfindsasubtleerrormanyexperienceddevelopersmiss. Tofixthis,wecanmod- ifyreadable_bytotransitivelycheckaresource’sentireancestry. pred can_access[u: User, r: Resource] { u in r. readable_by - || u in r. parent. readable_by + || u in r.^parent. readable_by } (Asbefore,wewouldstillneedtofindawaytoimplementatransitiveconstraintin ourdatabase. Butitisalwaysbettertobeworkingonimplementingacorrectdesign thantoimplementapossibly-brokenone.) 9. 4 Summary 1. Wecanrepresentdata(orothersystems)atahigherlevelofabstractionthan whatthedatabaseimplements. 2. By doing this, we can test the abstractions directly, in a formal specification language. 3. Alloy is one such formal specification language, and can produce visualiza- tionsofsatisfyingproperties. Itcanalsotestthatpropertieshold. 4. Becausewe’reatahigherlevelofabstraction,wecanexpressinvariantsthat wouldbeimpossibletodirectlyenforceatthedatabaselevel. 5. Alloycantestifanimplementableconstraintalsoguaranteesanabstractin- variant. Whiledatamodelingisagoodusecaseforformalspecification,itreallyshinesfor modelingconcurrentsystems. Inthenextchapter,wewillshowhowaformalspec- ificationcanfindraceconditionsinasoftwaredesign. 9. 4.1 Further Reading • Alloy Docs25 • Formal Software Designwith Alloy626 • Software Abstractions27(book) 25https://alloy. readthedocs. io/en/latest/ 26https://haslab. github. io/formal-software-design/ 27https://mitpress. mit. edu/9780262528900/software-abstractions/",
      "word_count": 106,
      "char_count": 1538,
      "annotations": {},
      "sentence_count": 33,
      "avg_word_length": 13.52,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_100_0",
      "page": 100,
      "paragraph_index": 0,
      "text": "94 CHAPTER9. DATAMODELING Examplesof Alloymodels: • Modeling Databasetablesin Alloy28 • Modeling Git Internalsin Alloy29(3-parter) • Storm Surges30 28https://bytes. zone/posts/modeling-database-tables-in-alloy/ 29https://bytes. zone/posts/modeling-git-internals-in-alloy-part-3-operations-on-blobs-and-trees/ 30https://jwbaugh. github. io/papers/baugh-abz-2016. pdf",
      "word_count": 25,
      "char_count": 365,
      "annotations": {},
      "sentence_count": 6,
      "avg_word_length": 13.64,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_101_0",
      "page": 101,
      "paragraph_index": 0,
      "text": "Chapter 10 System Modeling Inthelastchapter,weshowedhowformalspecificationcanbeusedtoanalyzeadata modelandlookforproblems. Butthat’sonlythetipofthespecificationiceberg. We canalsouseittomodelsystems. 10. 1 Situation Wehavesomebankusers. Bankuserscanwiremoneytoeachother. Wehaveover- draftprotection,sowirescannotreduceanaccountvaluebelowzero. That’seasyto guarantee,justthrowanif checkoneachwireandyou’redone! …Butwhatifuserscansendmultiplewiresatthesametime? Whatifacomputer crashesinthemiddleofprocessingawire? Whatifsomeonetriestosendthemselves money? Whatifsomeonetriestosendthemselvesmoneyinmultiplewiresatthe sametime,andthenoneoftheserverscrash? Thisiswhyweneedtomodelsystems. Wewanttoseethatourpropertiesholdunder everypossiblebehavior,notjustonthehappypath. Andwe’lluselogictomodelit. 10. 2 The Logic We’regoingtohandlethissysteminthreestages. First, we’llseehowourregular predicatelogicisenoughtoaccuratelymodelourproblem. Then,we’llmakeasim- pleextensiontoourlogictomoreelegantlyexpressthespec. Finally,we’lltranslate ittoarealtoolthatcandirectlycheckourlogicforerrors. Fornowwe’llassumeanextremelysimplesystem: twohardcodedvariablesalice andbob,bothstartwith10dollars,andtransfersareonlyfrom Aliceto Bob. Also, thetransferistotallyatomic: wecheckforadequatefunds,withdraw,anddeposit allinasinglemomentoftime. Ourmodeledsystemwillbemorecomplex; thisis justtorelatetheideas. First,let’slookatavalidbehaviorofthesystem,orpossiblewayitcanevolve. alice: 10 -> 5 -> 3 -> 3 -> ... bob: 10 -> 15 -> 17 -> 17 -> ... 95",
      "word_count": 76,
      "char_count": 1521,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 19.03,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_102_0",
      "page": 102,
      "paragraph_index": 0,
      "text": "96 CHAPTER10. SYSTEMMODELING Inprogramming,we’dthinkofaliceandbobasvariablesthatchange. Howcanwe expressthosevariablespurely intermsofpredicatelogic? Onewaywouldbetore- placethemwitharraysofvalues. alice[0]istheinitialstateofalice,alice[1]isafter thefirsttimestep,etc. Time,then,is“just”thesetofnaturalnumbers. Time = {0, 1, 2, 3, ...} alice = [10, 5, 3, 3, ...] bob = [10, 15, 17, 17, ...] Thatisavalidbehavior. Herearesomeinvalidbehaviors: alice = [10, 3, ...] bob = [10 15, ...] alice = [10, -1, ...] bob = [10 21, ...] Thefirstisinvalidbecause Bobreceivedmoremoneythan Alicelost. Thesecondis invalidbecauseitviolatesourproposedinvariant,thataccountscannotgonegative. Canwewriteapredicatethatistrueforvalidtransitionsandfalseforsometransition inourtwoinvalidbehaviors? Here’soneway: Time = Nat Transfer(t: Time) = some value in 0..=alice[t]: 1. alice[t+1] == alice[t] - value 2. bob[t+1] == bob[t] + value Gothroughandcheckthatthisistrueforeverytinthevalidbehaviorandfalsefor atleastonetintheinvalidbehavior. Notethatthestepswhere Alicedoesn’t senda transferalsopass Transfer;wejustpickvalue=0. Icannowwriteapredicatethatperfectlydescribeswhata“validbehavior”is: Spec = 1. alice[0] == 10 2. bob[0] == 10 3. all t in Time: Transfer(t) Now allowing “nothing happens” as “Alice sends an empty transfer” is a little bit weird. Intherealsystem,weprobablydon’twantpeopletoconstantlybesending eachotherzerodollars:",
      "word_count": 126,
      "char_count": 1410,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 10.2,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_103_0",
      "page": 103,
      "paragraph_index": 0,
      "text": "10. 2. THELOGIC 97 Transfer(t: Time) = - some value in 0..=alice[t]: + some value in 1..=alice[t]: 1. alice[t+1] == alice[t] - value 2. bob[t+1] == bob[t] + value Butnowtherecan’tbeatimestepwherenothinghappens. Andthatmeansnobe- haviorisvalid! Exercise 42 (Novalidbehaviors) Explainwhythecurrentversionofthespeccannothaveany validbehaviors, ieforatleastsomet,Transfer(t)isfalse. Hint: Remember,Timeisanaliasforthenaturalnumbers,meaningeverybe- haviorhasaninfinitenumberofsteps. Solution(page141) Sotypicallywhenmodelingweaddastutterstep,likethis: Spec = 1. alice[0] == 10 2. bob[0] == 10 3. all t in Time: || Transfer(t) || 1. alice[t+1] == alice[t] 2. bob[t+1] == bob[t] (This is also why we can use infinite behaviors to model a finite algorithm. If the algorithmcompletesatt=21,t=22,23,24...areallstuttersteps.) There’senoughmovingpartsherethat I’dwanttobreakitintosubpredicates. Init = 1. alice[0] == 10 2. bob[0] == 10 Stutter(t) = 1. alice[t+1] == alice[t] 2. bob[t+1] == bob[t] Next(t) = Transfer(t) // forshadowing Spec = (continuesonnextpage)",
      "word_count": 116,
      "char_count": 1051,
      "annotations": {},
      "sentence_count": 23,
      "avg_word_length": 8.07,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_104_0",
      "page": 104,
      "paragraph_index": 0,
      "text": "98 CHAPTER10. SYSTEMMODELING (continuedfrompreviouspage) 1. Init 2. all t in Time: Next(t) || Stutter(t) Nowfinally, howdowerepresenttheproperty No Overdrafts? It’saninvariant that hastobetrueatalltimes. Sowedothesamethingwedidin Spec,writeapredicate overalltimes. property No Overdrafts = all t in Time: alice[t] >= 0 We can even say that Spec => No Overdrafts, ie if a behavior is valid under Spec, it satisfies No Overdrafts. Exercise 43 (Extendingto Bob) Modify the Next so that Bob can send Alice transfers, too. Don’t try to be too clever,justdothisinthemostdirectwaypossible. Bonus: can Aliceand Bobtransfertoeachotherinthesamestep? Solution(page141) 10. 2.1 Temporal Logic Thisisgoodandall,butinpractice,there’stwodownsidestotreatingtimeasaset wecanquantifyover: 1. It’scumbersome. Wehavetowritevar[t]andvar[t+1]allovertheplace. 2. It’stoopowerful. Wecanwriteexpressionslikealice[t^2-5]==alice[t]+t. Problem(2)mightseemlikeagoodthing;isn’tthewholepointoflogictobeexpres- sive? Butwehavealong-termgoalinmind:gettingacomputertocheckourformal specification. Weneedtolimittheexpressivityofourmodeltomakeittractableto ourtooling. Inpractice,thiswillmeanmakingtimeimplicittoourmodel,insteadofexplicitly quantifyingoverit. [[The first thing we need to do is limit how we can use time.]] At a given point in time, allwecanlookatisthecurrent valueofavariable(var[t])andthenext value (var[t+1]). Novar[t+16]orvar[t-1]oranythingelsecomplicated.",
      "word_count": 127,
      "char_count": 1441,
      "annotations": {},
      "sentence_count": 25,
      "avg_word_length": 10.35,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_105_0",
      "page": 105,
      "paragraph_index": 0,
      "text": "10. 2. THELOGIC 99 Anditturnsoutwe’vealreadyseenamathematicalconventionforexpressingthis: priming (page 69)! For a given time t, we can define var to mean var[t] and var' to meanvar[t+1]. Then Transfer(t)becomes Transfer = some value in 1..=alice: 1. alice' == alice - value 2. bob' == bob + value We don’t even need to parameterize Transfer by time anymore! A predicate with primesinthebodyissometimescalledanaction. Exercise 44 (Stutteringwith Primes) Rewrite Stutter(t)touseprimesinsteadoft. Solution(page141) Nextwehavetheconstructalltin Time: P(t)inboth Specand No Overdrafts. Inother words,“Pisalwaystrue”. Sowecanaddalwaysasanewterm. Logiciansconven- tionallyuse(cid:3)or[]tomeanthesamething. property No Overdrafts = always (alice >= 0 && bob >= 0) // or [](alice >= 0 && bob >= 0) Spec = Init && always (Next || Stutter) Exercise 45 (Alwaysrules) Herewewilluse[]Ptomeanalways P. 1. Showthatthat[](allx: P(x))isequivalenttoallx: []P(x),where Pissome sortoftemporalpredicate(whichimplicitlytakesatime). 2. Showthat[](P&&Q)isthesameas[]P&&[]Q Solution(page142) Nowtimeisalmostcompletelyimplicitinourspec,withjustoneexception: Inithas alice[0]andbob[0]. Wejustneedonemoreconvention: ifavariableisreferenced outsideofthescopeofatemporaloperator,itmeansvar[0]. Since Initisoutsideof the[],itbecomes",
      "word_count": 128,
      "char_count": 1301,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 9.17,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_106_0",
      "page": 106,
      "paragraph_index": 0,
      "text": "100 CHAPTER10. SYSTEMMODELING Init = 1. alice == 10 2. bob == 10 Andwiththat,we’veremoved Timeasanexplicitvalueinourmodel. Theadditionofprimesandalwaysmakesthisatemporallogic: onethatcanmodel how things change over time. And that makes it ideal for modeling software sys- tems. Note Youdon’thavetomakeatemporallogictoanalyzesystems. Before2022,Alloy usersmodeledsystemsbymakinganexplicit Timesignature. Butthisproved tobecumbersome,soin2022Alloyincorporatedatemporallogicmodel. Regardless,we’llbeusingaspecificationlanguagewasthatdesignedwithtem- porallogicfromthegroundup. 10. 3 In Practice: TLA+ Oneofthemostpopularspecificationlanguagesformodelingthesekindsofcon- current systems is TLA+. TLA+ was invented by the Turing award-winner Leslie Lamport, who also invented a wide variety of concurrency algorithms and La Te X. Here’sourcurrentspecin TLA+: Listing10. 1: (TLA+) ---- MODULE transfers ---- EXTENDS TLC, Integers VARIABLES alice, bob vars == <<alice, bob>> Init == alice = 10 /\\ bob = 10 Alice To Bob == \\E amnt \\in 1..alice: alice' = alice - amnt /\\ bob' = bob + amnt (continuesonnextpage)",
      "word_count": 121,
      "char_count": 1101,
      "annotations": {},
      "sentence_count": 15,
      "avg_word_length": 8.11,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_107_0",
      "page": 107,
      "paragraph_index": 0,
      "text": "10. 3. INPRACTICE:TLA+ 101 (continuedfrompreviouspage) Bob To Alice == \\E amnt \\in 1..bob: alice' = alice + amnt /\\ bob' = bob - amnt Next == Alice To Bob \\/ Bob To Alice Spec == Init /\\ [][Next]_vars \\* [](Next \\/ Stutter) No Overdrafts == [](alice >= 0 /\\ bob >= 0) ==== TLA+ uses ASCII versions of mathematicians notation: /\\ and \\/ for &&/||, \\A and \\Eforall/some,etc. ==isusedfordefinition,and[][Next]_varsis TLA+notationfor [](Next||Stutter). Nowthatwehaveaspecificationandaproperty,wecanuseamodelcheckertogener- ateallpossiblestatesofthissystemandseeifanyofthembreakourinvariant. Like Alloy,TLA+ismostoftencheckedfrom VSCodeviaanextension31. Butsettingupa modelruntakesabitofconfiguration,so Icreatedatoolcalledtlacli32 todomore fromthecommandline. Itdoesn’tsupportallof TLA+’sfeaturesbutissuitablefor quickdemoslikethis. tlacli check transfers. tla --prop No Overdrafts Anditgetsnoerrorsfound: Model checking completed. No error has been found. 421 states generated, 21 distinct states found. Sothisisallwellandgoodforoursimplemodel,butwhatifmorethanonetrans- actioncouldbeinflightatthesametime? Doesourinvariantstillworkifwithcon- current,nonatomictransactions? 31https://github. com/tlaplus/vscode-tlaplus/ 32https://github. com/hwayne/tlacli",
      "word_count": 115,
      "char_count": 1252,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 9.9,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_108_0",
      "page": 108,
      "paragraph_index": 0,
      "text": "102 CHAPTER10. SYSTEMMODELING 10. 3.1 Adding Concurrency Wecouldaddconcurrencytoour“pure”TLA+,[[butthatrequiresafew“TLA+-isms” Idon’tfeellikeexplainingrightnow.]] Soinsteadwe’regoingtouse Plus Cal,alan- guagethatcompilesto TLA+. It’sbuilt-inwiththe TLA+toolingandlooksmorelike programminglanguagethanamathformula,soit’sverypopularwithbeginners. Listing10. 2: (TLA+/Plus Cal) ---- MODULE transfers2 ---- EXTENDS TLC, Integers People == {\"alice\", \"bob\"} Money == 1..10 Num Transfers == 2 (* --algorithm wire variables acct \\in [People -> Money]; define No Overdrafts == [](\\A p \\in People: acct[p] >= 0) end define; process wire \\in 1..Num Transfers variable amnt \\in 1..5; from \\in People; to \\in People begin Check: if acct[from] >= amnt then Withdraw: acct[from] := acct[from] - amnt; Deposit: acct[to] := acct[to] + amnt; end if; end process; end algorithm; *) ==== Mostofthislookslikeaprogramminglanguagewithsomeunusualsyntacticchoices, but there’s some things to pay attention to. acct is set to any value of [People ->",
      "word_count": 121,
      "char_count": 1023,
      "annotations": {},
      "sentence_count": 11,
      "avg_word_length": 7.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_109_0",
      "page": 109,
      "paragraph_index": 0,
      "text": "10. 3. INPRACTICE:TLA+ 103 Money],roughlythesetofallmappingsof Aliceand Bobtonumbersbetween1and 10. Soacctcanstartas{alice: 1,bob: 10},{alice: 3,bob: 6},oranyoftheother98 possiblecombinations. Our model also starts with two distinct wires simultaneously (process wire \\in 1.. Num Transfers where Num Transfer == 2). Each wire has itsown amnt, from, and to, whicharealsoindividuallyelementsofsets. Differentwirescanpickdifferentlocal valuesforthis. Betweenthisandtheamnt,thereare40,000possibleinitialstates. Insidewirewehave Check:,Withdraw:,and Deposit:. Thesearelabels,orgroupsof atomicactions. Eachwiretakesthreestepstofullyprocess: checkingthebalance is one step, withdrawing is one step, and depositing is one step. To a first order approximation,therearetwentypossiblewaysthetwowirescaninterleave. More precisely,slightlyfewer,becausesomewireswillendearlyatthe Check. Finally,No Overdraftsisastraighttranslationofouroldversion,justgeneralizedto anynumberofpeople. Tocompilethe Plus Calto TLA+,Irantlaclitranslatetransfers2. tla. Thetranslationis donein-fileandappearsbelowthecode. Nowlet’smodelcheckitandseeif No Over- draftsstillholds: tlacli check transfers2. tla --prop No Overdrafts Ifwedothis,wesuddenlygetanerror: Error: Invariant No Overdrafts is violated. Error: The behavior up to this point is: State 1: <Initial predicate> /\\ acct = [alice |-> 1, bob |-> 1] /\\ amnt = <<1, 1>> /\\ to = <<\"bob\", \"alice\">> /\\ from = <<\"alice\", \"alice\">> /\\ pc = <<\"Check\", \"Check\">> \\* four more states after this Thisisanexactsequenceofeventsrequiredtotriggeraviolatedinvariant. Insum- mary: 1. Alicehas1dollarandcreatestwowires,onedollareach,to Bob. 2. Wire1runscheck,sees Alicehasatleastadollar,andproceedsto Withdraw. 3. Beforewire1withdraws,Wire2runsthesamecheck,seesthesamedollar,and alsoproceedsto Withdraw. 4. Bothwireswithdrawonedollar,putting Aliceatanegativebalance.",
      "word_count": 165,
      "char_count": 1874,
      "annotations": {},
      "sentence_count": 29,
      "avg_word_length": 10.36,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": true
    },
    {
      "id": "p_110_0",
      "page": 110,
      "paragraph_index": 0,
      "text": "104 CHAPTER10. SYSTEMMODELING Thisbughappensbecausecheckingandwithdrawingarenonatomic: theyhappen in different time steps. If we make them happen in the same time step, the error shouldgoaway: begin - Check: + Check And Withdraw: if acct[from] >= amnt then - Withdraw: acct[from] := acct[from] - amnt; + \\* remember to retranslate the file! Wecanrerunthemodelcheckerandseethattheerrornolongeroccurs. Ifwewant, wecanset Num Transfersto6oraddanotherthreepeople,and TLA+willseamlessly check our larger problem. This is what makes formal specification so useful for complexsystems! 10. 3.2 Liveness Ifyoulookatthetranslation,you’dseethisextraproperty Plus Calgenerated: Termination == <>(\\A self \\in Proc Set: pc[self] = \"Done\") Proc Set is the set ofall wires (so 1..2). pc tracks the current stepofeach process: pc[1]=\"Deposit\"meanswhichprocess1isreadytodeposit. Thewholequantifieris then“everyprocessisatthe‘Done’step.” Whataboutthe<>? Remember how [] was always, and meant all t in Time? <>, or eventually, instead meanssometin Time. Termination = some t in Time: all self \\in Proc Set: pc[self][t] = \"Done\" <>Pmeansthat Pdoesn’tneedtobetrueatthestart,butitneedstoeventuallybe- cometrueinallpossibletimelines. Thisgetstooneofthemostpowerfulfeaturesof TLA+. Ourinvariantwasakindofsafetyproperty: apromisethatsomething“bad” doesn’thappen. Theotherhalfofthecoinisthelivenessproperty: something“good” is guaranteed to happen. Like, for example, our processes eventually finish pro- cessing. Wecancheck Terminationwithtlaclicheckwire. tla--prop Termination. Surprisingly, itfails:",
      "word_count": 163,
      "char_count": 1575,
      "annotations": {},
      "sentence_count": 22,
      "avg_word_length": 8.67,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_111_0",
      "page": 111,
      "paragraph_index": 0,
      "text": "10. 4. SPECIFICATIONINTHEWILD 105 State 4: /\\ acct = [alice |-> 0, bob |-> 1] /\\ amnt = <<1, 1>> /\\ to = <<\"alice\", \"alice\">> /\\ from = <<\"alice\", \"alice\">> /\\ pc = <<\"Deposit\", \"Done\">> State 5: Stuttering “Stuttering”is TLA+-speakfor“crashes”.Thefirstwireisalmostfinished,itjusthas tocomplete“Deposit”,butcrashesjustbefore. Bobnevergetshismoney. Bydefault,TLA+assumesanyprocesscancrashatanystep. [[It’sbettertoassume maximum perversity and force users to make their assumptions explicit.]] If we wanttosaytheprocessdoesn’tcrash,wehavetomakeit“fair”: + fair process wire \\in 1..Num Transfers - process wire \\in 1..Num Transfers Notalllivenessbugsaresolvedsoeasily. Often,fixingalivenessbugrequiresre- thinkingthefundamentaldesign. Bettertodothatrethinkingwhilewe’restillinthe designphase,asopposedtoafterwereleasedtheproduct. Exercise 46 (Eventuallyrules) 1. Showthatthat<>somex: P(x)isequivalenttosomex: <>P(x),where Pis somesortoftemporalpredicate(whichimplicitlytakesatime). 2. Showthat<>(P||Q)isthesameas<>P||<>Q. 3. Showthat<>P=![]!P. Solution(page142) 10. 4 Specification in the wild Thepasttwochapterscoveredtwodifferentformalspecificationlanguages: TLA+ and Alloy. When people learn about these kinds of tools, they generally have two questions: 1. Isthisactuallyusedintherealworld? 2. Howdo Imakesuremycodematchesthespecification?",
      "word_count": 117,
      "char_count": 1340,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 10.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": true,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": true
    },
    {
      "id": "p_112_0",
      "page": 112,
      "paragraph_index": 0,
      "text": "106 CHAPTER10. SYSTEMMODELING Questiononeiseasytoanswer: therearealotofhigh-profilecasestudiesofformal specification saving everyday companies a lot of time and money. I’ve put some examplesinthe“Further Reading”section. Questiontwoisharder. Aswe’veseeninthefunctionalcorrectness(page41)chapter, formal verification of code (page 58) is hard. Code needs to worry about a lot more thingsthanspecificationsdo. Ourtransfermodelabstractedawayeverythingfrom the specific packages we use to the “insufficient funds” dialog we show to users. Thatlevelofabstractioniswhatmakesspecificationsopowerfulinthefirstplace; verifyingcodelosesthatpower. (There are some specification languages that can “refine” spec into code, such as Event-B33. These tend to be significantly more difficult and expensive to use, though.) Butthefieldofformalspecificationisyoungandwe’restartingtoseesomeinterest- ingdevelopments. Themostexcitinginnovation,inmyopinion,isusingaformal spectogeneratetests. Youcanseethsinthepapere Xtreme Modelingin Practice34, wheretheyuseda TLA+specificationtogenerateatestsuitefora C++library. 10. 5 Summary 1. TLA+isaformoflogicusedtomodelsoftwaresystemsandexpresstheirprop- erties. 2. Youcanmodelchecka TLA+specificatontofindtimelineswhichbreakproper- ties. 3. Wecancheckthatapropertyistrueforallstatesinalltimelines, oratleast onestateineachtimeline. The last two chapters covered two uses of and two tools for formal specification. But this is just the tip of the iceberg: specification is a rich field with all sorts of interesting languages and applications. I’ve worked with specification languages for modeling probability, robotics, system dynamics models, and even corporate bureaucracies! Formalspecificationandformalverificationtogetherforformalmethods,thedisci- pline of directly applying math to write code. I’ve found formal specification lan- guages (on abstract models) more useful to industry than formal verification lan- guages(onactualcode),mostlybecauseit’seasiertolearnandalotcheapertoin- corporateintoaregulardevelopmentworkflow. 33https://www. event-b. org/ 34https://arxiv. org/abs/2006. 00915",
      "word_count": 193,
      "char_count": 2120,
      "annotations": {},
      "sentence_count": 29,
      "avg_word_length": 9.99,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_113_0",
      "page": 113,
      "paragraph_index": 0,
      "text": "10. 5. SUMMARY 107 Inthenextchapter, wewillleaveformalmethodsbehindandfocusonadifferent classofpracticalproblemselegantlysolvablewithlogic. 10. 5.1 Further Reading TLA+: • Learn TLA+35 • Specifying Systems36isthecanonicaltextbook. Case Studies: • Findingbugswithoutrunningorevenlookingatcode37[video] • Useof Formal Methodsat Amazon Web Services38 35https://www. learntla. com 36https://lamport. azurewebsites. net/tla/book. html 37https://www. youtube. com/watch? v=Fv NRl E4E9QQ 38https://lamport. azurewebsites. net/tla/formal-methods-amazon. pdf",
      "word_count": 46,
      "char_count": 549,
      "annotations": {},
      "sentence_count": 17,
      "avg_word_length": 10.96,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_114_0",
      "page": 114,
      "paragraph_index": 0,
      "text": "Chapter 11 Solvers Let’ssaywehaveasetof Ttests,andeachtakesadifferentamountoftimetorun. T1mighttake1second,T27seconds,etc. Wecandividethetestsamong Nidenti- calservers. Wewanttodistributethemtominimizetheoveralltestingtime. Iftwo serverstake1secondtorunallofitstestsandathirdtakes27seconds,theoverall testingtimeis27. Fig. 11. 1: Twodifferentassignmentswithdifferentoveralltesttimes. Tomaketheproblemmoreinteresting, sometestsmaybelongtoagroup, andwe wantalltestsinthesamegrouptorunonthesameserver. Thiskindofproblemisdifficulttosolveinanormalprogramminglanguage,butit’s veryeasytoexpresslogically,andletsususeanewclassoftoolstosolvethem. 11. 1 Logic Normally,weuselogicbecauseitismoreexpressivethantheaverageprogramming language. Butthistimewe’lldothingsalittledifferentlyandwriteourproblemina lessexpressiveway. Trustme,Ihaveareasonfordoingthingsthisway. First,howcanwerepresentthetesttimes? Withatest_timesarray: test_times[2]is thetimethesecondtesttakes. Unlikeeverythingelseinthisbook,thisis1-indexed. Next,howcanwerepresenttheserverassignments? Ifwesayourserversarerep- resented by integers (just like our tests) we can also represent the server with an 108",
      "word_count": 54,
      "char_count": 1163,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 20.56,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_115_0",
      "page": 115,
      "paragraph_index": 0,
      "text": "11. 1. LOGIC 109 array. assignment[5]==2meansthattest T5isassignedtoserver2. Finally, we can represent the groups as- you guessed it- an array. group[1] == 2 means that test T1 is in group 2. We’ll also say there’s no “group 0”; group[2] == 0insteadmeansthat T2doesn’tbelongtoanygroup. Notice that two of those arrays are “constants”: the test_times and the groups are fixedbyoutside forces. Only assignment isa“variable”: weare lookingto findits valuethatsatisfiesourconstraints. Note This is a different meaning of “constraint” than the “constraints” in the database chapter. Different disciplines, different etymologies. If I was logi- callyanalyzingbothdatabasesandthisclassofproblemsatthesametime,I’d probablycallthedatabaseconstraints“rules”orsomething. Thegroupconstraintissimple: constraint Groups Have Same Assignment = all t1, t2: 1..=T: (group[t1] == group[t2] && group[t1] != 0) => assignment[t1] == assignment[t2] (Exerciseforthestudent: whydon’tweneedtocheckgroup[t2]!=0?) Thetotaltimeaservertakesisthesumofalltestsassignedtoit. total_time(s: 1..=S) = sum({ test_times[t] for t in 1..T: assigment[t] == s }) Ourgoal,then,istominimizethemaximumtotal_time. minimize max({total_time(s) for s in 1..=S})",
      "word_count": 134,
      "char_count": 1213,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 8.06,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_116_0",
      "page": 116,
      "paragraph_index": 0,
      "text": "110 CHAPTER11. SOLVERS 11. 2 In Practice: Solvers Nowthatwehavetheproblemlogicallyrepresented,howdowesolveit? Byusingasolver,ofcourse! Asolverisaspecialtoolthatfindsanswerstoproblemslikeours. Thereareallsorts ofsolvers,someforspecialproblems,somemoregeneralpurpose. We will use Minizinc39, purely because you can try it free online40. You can also downloaditandrunitlocally, whichwillbefasteronmostmachines. Hereisthe solutionin Mini Zinc: Listing11. 1: (Minizinc) int: T = 10; % number tests int: S = 2; % number servers set of int: Servers = 1..S; set of int: Tests = 1..T; array[Tests] of int: test_times = [5, 6, 3, 7, 4, 3, 4, 4, 6, 9]; array[Tests] of int: group = [0, 0, 1, 1, 2, 0, 1, 0, 0, 2]; array[Tests] of var Servers: assignment; function var int: total_time(var int: s) = sum([test_times[t] | t in Tests where assignment[t] = s]); constraint forall (t1, t2 in Tests) (group[t1] = group[t2] /\\ group[t1] != 0 -> assignment[t1] = assignment[t2]); function var int: num_assigned(var int: s) = count(assignment, s); constraint forall (s1, s2 in 1..S) (abs(count(assignment, s1) - count(assignment, s2)) <= 1); solve minimize max([total_time(s) | s in 1..S]); output [ \"Server \\(s): \\([t | t in Tests where assignment[t] = s])\" ++ \" (\\(sum([test_times[t] | t in Tests where assignment[t] = s])))\\n\" (continuesonnextpage) 39https://www. minizinc. org/ 40https://play. minizinc. dev",
      "word_count": 191,
      "char_count": 1390,
      "annotations": {},
      "sentence_count": 18,
      "avg_word_length": 6.28,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_117_0",
      "page": 117,
      "paragraph_index": 0,
      "text": "11. 2. INPRACTICE:SOLVERS 111 (continuedfrompreviouspage) | s in 1..S ]; Aswiththeothertoolswehaveseen,Mini Zincusesitsownsyntaxforlogicalexpres- sionsthatisdifferentfromours. Ipickedarbitraryvaluesfortest_timesandgroup; Mini Zinccanalsoreadparametersinfromadatafile. Wehavetomarkassignment asavarso Mini Zincknowsitcancontrolthat. Runningthiswilloutputprogressivelybetterresults,untilitfindsaminimumtime of26. If Mini Zinccan’tfindanyvalidsolutionitwilloutput UNSATISFIABLE. Solversmakeiteasytoaddmoreinterestingconstraints. Forexample,wecanadd aconstraintthateachservermusthaveaboutthesamenumberoftests: constraint forall (s1, s2 in 1..S) (abs(count(assignment, s1) - count(assignment, s2)) <= 1); Theaboveisknownasa“bin-packingproblem”,whichisoneofthemostpopular use-casesforthesesolvers. Findingtheoptimiumsolutiondoesn’tmattertoomuch withtentests,butamorerealisticworkloadmightbe10,000tests! That’swhena solvercanreallysaveabusinessmoney. 11. 2.1 Speedvs Expressiveness Ouruseof Mini Zincexplainswhywehadtostoreourparametersinsuchaninex- pressiveformat. Mini Zincdoesnotsupportstrings,structures,arraysofarrays,or anyoftheaffordanceswe’reusedtoinprogramminglanguages. Evenwithitsre- strictions,Mini Zincisstillmoreexpressivethanmanyothersolvers. Thisbecause solvers need to be fast. The more restrictions we place on the variables and con- straints in our problems, the more specialized our solver can be, and in turn the fasterwecansolveexpressibleproblems. Forexample,alinearprogrammingsolverhasonlynumbersforvalues,andcanonly computeexpressionsoftheforma*x1+b*x2+.... Butdedicatedlinearsolverscan runmuchfasterthanageneral Mini Zincproblem. [[Sowhynotconverta Mini Zincproblemintoalinearprogrammingone,ifpossible? Infact,that’sexactlywhatitdoes. Mini Zincisahigh-level,tool-agnosticlanguage forexpressingconstraintproblems,whichittriesto“compile”intosimplerforms.]] There’sadizzyingarrayofsubclassesofproblemsandsolvers,buttwoareofpartic- ularinterest,showingwhatcanexistontheveryendsofthespeed/expressiveness spectrum.",
      "word_count": 110,
      "char_count": 2027,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 17.44,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_118_0",
      "page": 118,
      "paragraph_index": 0,
      "text": "112 CHAPTER11. SOLVERS Note Some classes of problems are valuable enough for specialist tools. Google OR-tools41 is one of the most popular solvers available, and has specialized solversforproblemslikescheduling,vehiclerouting,andbinpacking. 11. 2.2 SATSolvers If all we cared about was speed, what is the most stripped down, barebones con- straintlanguagewecanmake? Wegetitbyremovingeverything. Nostrings,arrays,nofunctions,nonumbers. Ev- eryvariableis“true”or“false”. Ifwewanttoseewhethertest7istoserver3, we makeabooleanvariabletrackingthat. a73istruewhentest7isassignedtoserver 3,!a73whenitisn’t. Butthenwe’llalsoneeda72,a71,a63… Then we’ll need a constraint saying “each test is assigned to at least one server.” What’s the simplest possible way to write that constraint? Probably something like this: (a11 || a12 || a13 ...) && (a21 || a22 || a23 ...) && (a31 || a32 || a33 ...) && (This“ANDof ORs”isconventionallycalled Conjunctive Normal Form(CNF).) Looksgood. Butthere’snothingstoppinga11anda12frombothbeingtrueatthe sametime: test1isassignedtotwodifferentservers! Sowealsoneedtosay“iftest 1isassignedto1,itcannotalsobeassignedto2or3”: (a11 && !a12 && !a13 ...) || (!a11 && a12 && !a13 ...) || Butnowoursolverhastounderstandboth“ANDof ORs”and “ORof ANDs”. That’s toomuchexpressivity! Betterfindawaytorewritethatin CNF: (!a11 || !a12) && (!a11 || !a13) && (!a12 || !a13) && ... 41https://developers. google. com/optimization",
      "word_count": 155,
      "char_count": 1432,
      "annotations": {},
      "sentence_count": 37,
      "avg_word_length": 8.25,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_119_0",
      "page": 119,
      "paragraph_index": 0,
      "text": "11. 2. INPRACTICE:SOLVERS 113 Exercise 47 Explainwhythismeanstest1can’tbeassignedtotwodifferentservers. Solution(page142) Solversforproblemsofthisformarecalled SATsolvers,after“Boolean SATisfiabil- ity”. The syntaxmay seem constrained, but a surprisingly large number ofprob- lemscanbetransformedinto SATproblems. Andinreturn,SATsolversaresome ofthefastestsolversintheworld,routinelyhandlingproblemsgigabytesinsize. Note Maybeanexerciseonconvertingthetagruleto SAT. Wedon’tneedtoactually makethetagsparameters,justreplacethemwithclauses. Note Thesetofallproblemssolvablebya SATsolveristhe“NPcomplexityclass”,of Pvs NPfame. NPisconsidered“intractable”,meaningwedonothaveefficient algorithmstosolvealloftheproblemsintheclass. Most SATproblemsseenin thewildare“well-behaved”andcanbesolvedquickly. Butyoucanalsofind small SATproblemsthatcan’tbesolvedinahumanlifetime. Forthisreason,manypeopleusetoolsthattakeexpressiveformsandconvertthem into SAT. Youcanthinkof SATasalowlevel“assembly”languagethatothertools “compile”to. Alloy (page87)usesa SATsolverinternally. 11. 2.3 SMT Ontheotherendofexpressivity,wehave SMT,or Satisfiability Modulo Theoriessolver. Whileothersolverstargetarestrictedcategoryofmathproblem, SMTsolversare flexibleandhandleawiderangeofdifferentproblems. Asjustoneexample,wecan useittoreverseengineerarandomnumbergenerator(RNG). One old type of random number generator is the Linear Congruential Generator, or LCG. Startingwithaseedvaluex_0,eachnextvalueisdeterminedbyx_n+1=(a*x_n +c)%m,where(a,c,m)areallfixedvalues. Givenasequenceandm,canwerecover (a,c)? Themostpopular SMTinuseis Z342. 42https://microsoft. github. io/z3guide/",
      "word_count": 90,
      "char_count": 1644,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 17.28,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_120_0",
      "page": 120,
      "paragraph_index": 0,
      "text": "114 CHAPTER11. SOLVERS Listing11. 2: (Python) # requires `pip install z3-solver` from z3 import * solver = Solver() modulus = eval(input(\"Enter modulus: \")) sequence = eval(input(\"Enter sequence: \")) # Separate with commas a = Int('a') c = Int('c') solver. add(a >= 0, a < modulus) solver. add(c >= 0, c < modulus) for i in range(len(sequence) - 1): solver. add(sequence[i+1] == c + (a * sequence[i]) % modulus) if solver. check() == sat: model = solver. model() print(f\"a = {model[a].as_long()}\") print(f\"c = {model[c].as_long()}\") else: print(\"Could not find parameters\") Hereiswhatitlooksliketorunthecode: Enter modulus: 2**31 Enter sequence: 4096, 618876929, 113892918, 1048278319 a = 22695477 c = 1 SMTaremoreexpressivethaneven“generic”constraintsolvers, butthatexpres- siveness comes at a price of completeness. All of the prior constraint problems we lookedatweredecidable,meaningthesolverwilleitherdefinitelyreturnavalueor definitely tell us there is no solution. SMT solvers can also return “UNKNOWN”, meaningthesolvercouldn’tfigureiftheproblemisevensolvableornot. Overtime, SMTsolversaregettingbetterandbetteratfindingsolutions,buttheywillneverbe abletosolveallproblems. Suchisthepriceofexpressiveness. Nonetheless,SMTsolversareincrediblypopularfortheirflexibilityandseeallsorts ofdifferentusecases. Theycancrackcryptographicprimitives43,reverseengineer compiled binaries44, find differences in firewall rulesets45, and synthesize code 43https://github. com/kste/cryptosmt 44https://docs. angr. io/en/latest/core-concepts/solver. html 45https://github. com/Z3Prover/Firewall Checker",
      "word_count": 161,
      "char_count": 1592,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 8.89,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": true
    },
    {
      "id": "p_121_0",
      "page": 121,
      "paragraph_index": 0,
      "text": "11. 3. WHICHTOUSE? 115 fromspecifications46. Theyarealsotheenginethatpowersmostworkintheorem provingandformalverification(page58).Dafny(page58)usesan SMTsolvertoverify code,andoneresearchmodelcheckerfor TLA+(page100)doestoo. Note Howcanasolver(whichfindsifsolutionsexist)poweraverifier(whichchecks that a property always holds)? Easy, just exploit quantifier duality (page 19). If the property is all x: P(x), then ask the solver to satisfy !P(x). If the solver can’tfindanysolutions,then!(somex: !P(x))holds,whichisequivalenttoour property. 11. 3 Which to use? Sogivenalloftheoptions,whichsolveristherightonetopick? Thisdependsona lotoffactors,but Icanprovidesomeverygeneralheuristics. Firstofall,mostprogrammersareunlikelytodirectlyuse SAT. SATisfastandpow- erfulbutittakesalotofskilltorepresentproblemsinanoptimalway,andtointer- preta SATsolutiontoaproblem. Forthesereasons,themainusersof SATsolvers are people who 1) absolutely need the maximum possible performance on their problem,or2)arebuildinghigher-leveltools. Wearemorelikelytouseatoolthat usesa SATsolveraspartofitsimplementation. Afterthat,therightsolverdependsonthenatureofourgoal: isitsatisfactionorop- timization? SMTsolversaretherighttoolwhentheproblemhasveryfewsolutions and any one will do. Other solvers are the right tool when the problem has many validsolutions,butsomearemoreoptimalthanothers. Asaroughrule,most“satis- faction”problemsaretechnical/”softwareengineering”-oriented,whilemostopti- mizationproblemsarebusiness/”operationsresearch”-oriented: shiftscheduling, vehiclerouting,manufacturingoptimization,resourceallocation,etc. If SMT is the right choice, then wedefaultto Z3. It is mostwidely supported, has integrationswiththemostlanguages,andhasthemostthoroughdocumentationof any SMTsolver. If an optimization solver is the right choice, the general approach is to find the leastexpressive class of tools that totally expresses the problem, as that will be the fastest. [[ILP,LP, Simplex, MIP, etc]]. There’s a dizzying plethora ofdifferenttools andclasses. Adecentenoughstartingpointis Mini Zincand Google’s OR-Tools47. 46https://cseweb. ucsd. edu/~npolikarpova/publications/popl20. pdf 47https://developers. google. com/optimization",
      "word_count": 172,
      "char_count": 2217,
      "annotations": {},
      "sentence_count": 36,
      "avg_word_length": 11.9,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_122_0",
      "page": 122,
      "paragraph_index": 0,
      "text": "116 CHAPTER11. SOLVERS 11. 4 Summary • Thereareclassesofproblemsthataredifficulttoexpressprogrammatically, butaresolvedefficientlywithsolvers. • Thereisatradeoffbetweenhoweasilyasolvercanexpressconstraintprob- lemsandhowquicklyitcansolvethem. • SATsolversarefastbutveryinexpressive. Theyareacorelow-levelcompo- nentinalotofhigher-levelsoftware. • SMTsolversareexpressivebutincomplete. Theyarealsowidelyused, both directlyandaslow-levelcomponents. • SAT and SMT solvers are primarily used for “satisfaction” problems, while othersolversareprimarilyusedfor“optimization”problems. Thenextchapterisaboutthemostliteralkindof“logicprogramming”. 11. 4.1 Further Reading • Hakank’scommonconstraintprogrammingproblems48and Mini Zincpage49 • SAT/SMTby Example: https://smt. st/main. html • Programming Z3: https://theory. stanford. edu/~nikolaj/programmingz3. html 48http://www. hakank. org/common_cp_models/ 49http://www. hakank. org/minizinc/",
      "word_count": 62,
      "char_count": 934,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 14.08,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_123_0",
      "page": 123,
      "paragraph_index": 0,
      "text": "Chapter 12 Logic Programming Inabookcalled“Logicfor Programmers”I’vesomehowmanagedtonotbringup “logicprogramming”forninetypages. Ifeellike Ideserveamedal. Logicprogramming(LP)isadistinctparadigmofprogramming,likeimperativeand functional are. The most famous logic programming language is called “Prolog”. Prolog was first created in 1970s and since then has split off into many different variants. We will use the “SWI-Prolog” variant, which you can try online at https: //swish. swi-prolog. org/. By necessity, this chapter will be even more of a broad overviewthantheotherchapters. 12. 1 Prolog Therearethreebasicbuildingblocksofa Prologprogram: 1. Atoms are value identifiers that start with a lower-case letter (bread, flour). Thesearegroundsymbols: breadisequaltobreadandnothingelse. 2. Variablesareidentifiersthatstartwithacapital(X,Abc). Theultimategoalof a Prologprogramisto“unify”variablestovaluesthatwouldmakepredicates true. 3. Predicates,whichcanbetrueforspecificatoms,orforatomsthatpassacon- dition. Thesepredicatesarecalledfactsandrules,respectively. % comments start with % ingredient(bread, flour). % don't forget the period! ingredient(bread, water). This defines the fact ingredient() and determines it’s true if the first parameter is breadandthesecondisflourorwater. Nowif Icallingredientwithavariable,Iam askingthe Prologenginetofindavaluethatmakesmyexpressiontrue. ingredient(X, flour). X = bread % result ingredient(X, potatoes). false % no possible X This maps directly to the some quantifier: ingredient(X, flour) is true if some x: ingredient(x,flour). Ifmultiplevaluessatisfytheexpression,then Prologwillreturn 117",
      "word_count": 160,
      "char_count": 1641,
      "annotations": {},
      "sentence_count": 27,
      "avg_word_length": 9.26,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_124_0",
      "page": 124,
      "paragraph_index": 0,
      "text": "118 CHAPTER12. LOGICPROGRAMMING possiblevaluesoneatatime. Representingrecipesarenotacommonprogrammingtask,soletuscontinuewith a more practical example. Few people work with recipes in their job, but almost everyone uses versioncontrol, and the relationshipsbetweencommitsis directly expressibleinfacts: parent(a0, a1). parent(a1, a2). parent(a2, a3). parent(a3, a4). parent(a4, a5). parent(a1, b1). parent(b1, b2). parent(b2, a4). parent(b2, b3). Thisrepresentsthecommitgraphin Fig. 12. 1. Fig. 12. 1: Agraphofcommits. Oncewehaveacollectionoffacts,wecanthenadd“rules”,orpredicateswithcom- plexbodies. Forexample,a“mergecommit”isonethathastwodifferentparents. mergecommit(C) :- parent(P1, C), parent(P2, C), \\+ (P1 = P2). % \\+ is 'not' ?- mergecommit(C). C = a4. Rulescanhavemultipledefinitions,inwhichcasethepredicateistrueifany ruleis true. Thismakesiteasytoexpressrecursivestatements,like“Aistheancestorof C ifitisaparentof Cortheparentofanancestorof C.”",
      "word_count": 83,
      "char_count": 956,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 10.53,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_125_0",
      "page": 125,
      "paragraph_index": 0,
      "text": "12. 2. DEDUCTIVEDATABASES 119 ancestor(A, Commit) :- parent(A, Commit). ancestor(A, Commit) :- parent(A, Y), ancestor(Y, Commit). Withthis,wecanexpresscomplexqueries,like“ancestorsofcommit Athatarenot ancestorsofcommit B”: % \\+ is \"not\" ?- ancestor(a5, X), \\+ ancestor(b3, X). X = a4 ; X = a3 ; X = a2 Note Prologusesa“backtracking”algorithmtofindsolutions. Assuch,itdoesnot guaranteethatallsolutionsareunique. LP languages are general-purpose languages and can do everything that can be done in an imperative or functional language. The question is what can this paradigmdobetter thanotherprogrammingparadigms? Atonetime, theanswer was“artificialintelligence”,andlogicprogrammingwaslargelyseenasthebesttool forexpertsystemsandnaturallanguageprocessing. Thisnichehasbeenlargelysu- percededbystatisticalmethodslikemachinelearningandlargelanguagemodels. Buttherearestillplaceswhereitseesuse. Somespecificusecasesinthewildare listedinthe“Further Reading”attheendofthischapter. Andtherearestillsome nicheswherelogicprogrammingisbroadlythepreferredapproach. 12. 2 Deductive Databases Adeductivedatabaseisanalternateformofdatabase. Insteadofstoringdatainta- bles, deductive databases store data as facts and rules. Logic programming then becomespurelyatoolforquerying,asopposedtogeneralprogramming. Ourpre- viouscommitmodelisarguablyadeductivedatabase. Addingnewinformationto thecommitsisaseasyasaddingnewfacts: % commit(id, author, [files_changed]) % written this way to be more compact commit(a0, alice, [file(f1), file(f2), testfile(f2)]). (continuesonnextpage)",
      "word_count": 125,
      "char_count": 1558,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 11.47,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": true
    },
    {
      "id": "p_126_0",
      "page": 126,
      "paragraph_index": 0,
      "text": "120 CHAPTER12. LOGICPROGRAMMING (continuedfrompreviouspage) commit(a1, bob, [file(f1), file(f3), testfile(f1)]). commit(a2, eve, [file(f1), file(f2), testfile(f1), testfile(f2)]). % commit_author_file caf(C, A, F) :- commit(C, A, Files), member(F, Files). file(f1)isaprologcompoundterm,equivalenttoastructorproducttypeinotherlan- guages. It can be used in [[pattern matching]]: caf(_, alice, testfile(X)) will retrieve anytestingfile(butnotregularfile)that Alicemodified. [[bridge]] [[Intheirpaper Evidence Based Failure Prediction, Nagappanetal arguethatpatterns inhowwechangefilescanpredictthelikelihoodofbugsinthosefiles. Fileswith more commits, “churn”, are more likely to have latent bugs. Let’s implement two rulesthatsuggestafileismorelikelytohavebugs:]] 1. high_churnistrueifafilewaschangedbyatleastthreedifferentcommitswith differentauthors. Inourmodel,thisappliestojustfile(f1). 2. untested_commitistrueifafilewaschangedinacommit,anditscorrespond- ing test was not changed. This check should not apply to test files. In our model,thisappliestofile(f1)andfile(f3). high_churn(File) :- caf(_, A1, File), caf(_, A2, File), caf(_, A3, File), A1 @< A2, A2 @< A3. % @< = ordering on atoms untested_commit(file(File)) :- commit(_, _, Files), member(file(File), Files), \\+ member(testfile(File), Files). We can write high_churn more elegantly (and not hardcode in the number of au- thors), butthatrequiresmoresophisticated Prologtechnique. Fromhere, wecan mapeachfiletothenumberofchecksitfails. % fails_check just calls the check on the file % Added for descriptivity fails_check(File, Check) :- call(Check, File). checks_failed(_, [], []). checks_failed(File, [Check|Checks], Failed) :- checks_failed(File, Checks, Failed), (continuesonnextpage)",
      "word_count": 170,
      "char_count": 1748,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 9.29,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_127_0",
      "page": 127,
      "paragraph_index": 0,
      "text": "12. 3. CONSTRAINTLOGICPROGRAMMING 121 (continuedfrompreviouspage) \\+ fails_check(File, Check). checks_failed(File, [Check|Checks], [Check|Failed]) :- checks_failed(File, Checks, Failed), fails_check(File, Check). checks_failed(File, Failed) :- checks_failed(File, [high_churn, untested_commit], Failed). Ifwejustwantthecountofthecheckseachfilefailed,wecanwriteanotherhelper operator. file_suspicion(File, Suspicion) :- checks_failed(File, Failed), length(Failed, Suspicion). In practice, Prolog is rarely used as the query language for deductive databases for two reasons: Prolog cannot be embedded in other languages, and Prolog queries are not guaranteed to terminate. The main language is instead Datalog, a “well-behaved”subsetof Prologwithouttheseissues. Datomic50,forexample,uses datalogforqueries,butembedsitasa DSLin Clojure. 12. 3 Constraint Logic Programming TODO. Connecttoanswersetprogrammingandpackageresolution. 12. 4 Planning Thereisoneclassof AIproblemsthat(asof2025)cannotbehandledwithstatistical approaches: planning. Givenastartingstate,asetofvalidactions,andagoalstate, whatsequenceofactionsshouldgetustothegoalstate? Considerthefollowingsituation: wehaveasetofonlineserversthatneedtwo OS updates. We can only upgrade a server that is offline, and we need to make sure thatwealwayshaveatleastoneserveronline. Wecanfurtherabstracttheservers sothattheyconsistonlyofaname,abooleanon/offstate,andanumericalversion. Inthiscase, thestartingstatefortwoserverswouldbetheset{(s1,on,1),(s2,on, 1),thegoalstatewouldbe{(s1,on,3),(s2,on,3),andtherewouldbetwopossible 50https://www. datomic. com/",
      "word_count": 121,
      "char_count": 1602,
      "annotations": {},
      "sentence_count": 21,
      "avg_word_length": 12.25,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_128_0",
      "page": 128,
      "paragraph_index": 0,
      "text": "122 CHAPTER12. LOGICPROGRAMMING actions: • Togglethestateofaserver,unlessdoingsowouldleaveallserversoff • Incrementtheversionofanoffserver. Prologdoesnotnativelysupportplanning,butmypersonalfavoritelogiclanguage, Picat51,does. Hereistheplanningproblemin Picat: Listing12. 1: (Picat) import planner, math, util. final(N) => foreach($server(_, State, Version) in N) State = on, Version = 3 end. cost(State) = 1. % At least one server online valid(State) => member($server(_, on, _), State). action(From, To, Action, Cost) ?=> % toggle state member(X, From), ( Action = $off(X[1]), To = replace(From, X, X. replace(on, off)); Action = $on(X[1]), To = replace(From, X, X. replace(off, on)) ), valid(To), Cost = cost(From). action(From, To, Action, Cost) => % increment version member(X, From), X = $server(Name, off, Version), To = replace(From, X, X. replace_at(3, Version+1)), Action = $upgrade(Name), Cost = cost(From). main => Start = [$server(s1, on, 1), $server(s2, on, 1)], best_plan(Start, Plan, Cost), writeln(Plan), writeln(Cost). Runningthisgivesme: 51http://picat-lang. org/",
      "word_count": 130,
      "char_count": 1082,
      "annotations": {},
      "sentence_count": 16,
      "avg_word_length": 7.33,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_129_0",
      "page": 129,
      "paragraph_index": 0,
      "text": "12. 5. SUMMARY 123 [off(s1), upgrade(s1), upgrade(s1), on(s1), off(s2), upgrade(s2), upgrade(s2), on(s2)] 8 Icodedthefirstoutputtobethelistofstepsthatsolvesourproblems. Thesecond outputisthe“cost”oftheplan,which Picatwillautomaticallyminimize. Inthiscase, eachactionhascost1,meaningtototalcostisjustthenumberofstepsinourplan. Theplannerisautomaticallyabletofindasequenceofstepsthatsolvesourprob- lem. Itcanalsominimizecost. Inthiscase,the“cost”isjustthenumberofsteps, leadingtoaneight-stepsolution. Toshowcasewecanaddanadditionalpenaltyfor havingseveralonlineserverswithdifferentversions,equalto(Max Version-Min Ver- sion)cubed. Ourprogramlooksverysimilar: - cost(State) = 1. + cost(State) = Out => + member($server(_, on, Vmin), State).minof(Vmin), + member($server(_, on, Vmax), State).maxof(Vmax), + Out = 1 + max(0, Vmax - Vmin)**3. Withthesechanges,theeight-stepsolutionwouldhaveatotalcostof16. Picat,in- stead,findsalongersolutionwithasmallercost: [off(s1), upgrade(s1), on(s1), off(s2), upgrade(s2), upgrade(s2), on(s2), off(s1), upgrade(s1), on(s1)] 12 Planningismostlyusedin AIresearchandespecially invideogame AIs,whereitis called Goal-Oriented Action Planning. 12. 5 Summary • Logic programming express programs as predicates and allow users to find valuesthatmatchthosepredicates. Themostfamous LPlanguageis Prolog. • LPcanalsobeusedforqueryingdatainso-called“deductivedatabases”. The mostfamous LPquerylanguageis Datalog. • Plannerprogrammingfindsequencesofactionsthatchangeastartingstate intoagoalstate. Onesuchplanninglanguageis Picat.",
      "word_count": 110,
      "char_count": 1550,
      "annotations": {},
      "sentence_count": 22,
      "avg_word_length": 13.1,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": true,
      "likely_quote": false
    },
    {
      "id": "p_130_0",
      "page": 130,
      "paragraph_index": 0,
      "text": "124 CHAPTER12. LOGICPROGRAMMING 12. 5.1 Further Reading General Topics: • Associationfor Logic Programming: https://logicprogramming. org/ • The Powerof Prolog: https://www. metalevel. at/prolog • Logic Programming Courseware: https://athena. ecs. csus. edu/~mei/logicp Other Logic Programming Languages: • mini Kanren: https://minikanren. org • Datalog: https://www. learndatalogtoday. org/ • Picat: http://picat-lang. org/andhttp://picat-lang. org/picatbook2015. html • Answersetprogramming: https://potassco. org/ LPCase Studies: • IBM Watson used Prolog for natural language processing: https: //www. cs. miami. edu/home/odelia/teaching/csc419_spring19/syllabus/ IBM_Watson_Prolog. pdf • The JVM uses Prolog in the typechecker: https://docs. oracle. com/javase/ specs/jvms/se10/jvms10. pdf • The Pubgrub package resolution algorithm uses Answer set programming: https://github. com/pubgrub-rs/pubgrub",
      "word_count": 97,
      "char_count": 904,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 8.33,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_131_0",
      "page": 131,
      "paragraph_index": 0,
      "text": "Appendix A Math Notation Iusedprogrammersymbolsandmyownsyntaxthroughthisbook;mathematicians usedifferentsymbols. Ididthisbecause Iwantedeverythingtobeeasilygreppable and inferable from context. If you’re seeing ∪ for the first time, it’s really hard to lookupwhatitmeans! A. 1 Basic Logic Symbols Table1. 1: Symbols English Book Math And && ∧ Or || ∨ Not ! ¬ Implies => ⇒(or→) If-and-only-if <=> ⇔ Forall all x ∀𝑥 Exists some x ∃𝑥 in in ∈ Union | ∪ Intersection & ∩ Subset subset ⊂ Cardinality #S |S| Table1. 2: Sets English Book Math Integers Int Z Naturals Nat N Powersetof S power_set(S) 2𝑆 125",
      "word_count": 91,
      "char_count": 597,
      "annotations": {},
      "sentence_count": 7,
      "avg_word_length": 5.57,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_132_0",
      "page": 132,
      "paragraph_index": 0,
      "text": "126 APPENDIXA. MATHNOTATION Table1. 3: Temporal Logic English Book Math Nextvalueofx x' x' Always [] (cid:3) Eventually <> ◇ A. 2 Quantified Expressions Taketheexpressionallxinset: P(x). Herearethreedifferentwaysmathematicians writeit: ∀𝑥∈𝑠𝑒𝑡: 𝑃(𝑥) ∀𝑥. 𝑠𝑒𝑡(𝑥)→𝑃(𝑥) ∀𝑥: 𝑠𝑒𝑡|𝑃(𝑥) Somemathematicianswrite∃!𝑥tomean“thereexistsexactlyonex”,butit’snotby anymeansauniversalconvention. A. 3 Tautologies Iwrotethedoublenegativerewriteruleas!!P=P. Tobemoremathematicallypre- cise,given!!P,wecanprove P. Threewaysyoucouldwritethis: ¬¬𝑃 ∴𝑃 ¬¬𝑃 ⊢𝑃 ¬¬𝑃 →𝑃 Whichoneamathematicianusescandependontheparticularfieldtheypublishin. Inthelastcase,theywillreserve→tomean“wecanprove”andexclusivelyuse⇒ tomean“implies”.",
      "word_count": 52,
      "char_count": 695,
      "annotations": {},
      "sentence_count": 14,
      "avg_word_length": 12.38,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_133_0",
      "page": 133,
      "paragraph_index": 0,
      "text": "Appendix B Useful Rewrite Rules B. 1 Table of Tautologies Someoftheseare=,tomeanthetwoformulasareidentical-youcansubstituteone fortheother. Someare=>,meaningtheyonlygooneway. Propositional Logic: P = !!P P && !P = False P || !P = True De Morgan’slaw: !P && !Q = !(P || Q) !P || !Q = !(P && Q) !P && Q = !(P || !Q) B. 1.1 Implication Definition: P => Q = !P || Q !(P => Q) = P && !Q Contrapositive: P => Q = !Q => !P (P => Q) && (Q => P) = (P = Q) Transitivity:(P=>Q&&Q=>R)=>(P=>R)Noteit’snotan=!Itdoesn’tgobothways! 127",
      "word_count": 90,
      "char_count": 519,
      "annotations": {},
      "sentence_count": 24,
      "avg_word_length": 4.78,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_134_0",
      "page": 134,
      "paragraph_index": 0,
      "text": "128 APPENDIXB. USEFULREWRITERULES B. 1.2 Quantifiers Extraction: all x: P &&/|| Q(x) = P &&/|| all x: Q(x) Duals: all x: P(x) = !(some x: !P(x)) some x: P(x) = !(all x: !P(x)) all x: !P(x) = !(some x: P(x)) some x: !P(x) = !(all x: P(x)) Commutativity: all x in S: (all y in T: ...) = all y in T: (all x in S: ...) = all x in S, y in T: ... all x in S, y in S: ... = all x, y in S: ... some x in S: (some y in T: ...) = some y in T: (some x in S: ...) = some x in S, y in T: ... some x in S, y in S: ... = some x, y in S: ... somex: allycanbereplacedwithally: somex,whichisstronger. Youcannotgothe otherway! Withotherstuff Distributivity: some x: P(x) || Q(x) some x: P(x) || some x: Q(x) all x: P(x) && Q(x) all x: P(x) && all x: Q(x)",
      "word_count": 165,
      "char_count": 735,
      "annotations": {},
      "sentence_count": 23,
      "avg_word_length": 3.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_135_0",
      "page": 135,
      "paragraph_index": 0,
      "text": "Appendix C Beyond Logic Note EVERYTHINGinthesectionneedstobethoroughlycheckedagainstamathe- matician. Alsoitmightbethrownoutentirelyifit’stoolongandnothelpful. Underconstruction. Thisentirebookisaboutclassicalfirstorderlogic. That’sthelogicthatmostmath- ematiciansusetodomath. Butmathematicsisflexibleandmathematicianshatetak- ingasystemforgranted. Somanymathematicianshaveasked“whathappensifwe makelogicdifferent?” Thisissomeofaboutthosewaysofmakinglogicdifferent. C. 1 The Limit: Russell’s Paradox Foreverysets,wecancreateapredicate S(x)=xins. Thismeanseverysetdefines apredicate. Istheoppositetrue: foreverypredicate,canwefindasetofallthings thatpassthatpredicate? Can Run Program(c) = RAM(c) && (CPU(c) || GPU(c)) -> Can Run Program = RAM & (CPU | GPU) Innaivesettheory,thisistrueforallsets. Naivesettheoryhasaproblem,though,that leadtomathematiciansabandoningitoveracenturyago. Considerthepredicate Evil(x)=xnotinx, akaxisnotasetthatcontainsitself. Mostsetswouldpassthis predicate: {},{1},{[1,3],abc},etc. Somesetswouldfailthispredicate,like“theset ofallnon-emptysets”. Ifallpredicatesformedsetsandviceversa,we’dhaveaset evil,thesetofallsetsthatdon’tcontainthemselves. Now is Evil(evil) true? If so, evil doesn’t contain itself, meaning it’s not in evil, so Evil(evil) is false by definition, but then it’s not in evil, meaning it doesn’t contain itself,meaning Evil(evil)istrue… Thisiscalled“Russell’sparadox”andisconsideredareasonthatnotallpredicates formsets. Theparadoxdrovemuchofthedevelopmentofformallogicintheearly 129",
      "word_count": 99,
      "char_count": 1530,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 14.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_136_0",
      "page": 136,
      "paragraph_index": 0,
      "text": "130 APPENDIXC. BEYONDLOGIC 20thcenturyinordertofindwaystoavoidtheparadox. Themostmainstreamsolu- tiontothisiscalled“ZF”Set Theory,butanotherismoderntypetheory,whichhas foundahomeinmodernfunctionalpro C. 2 Higher Order Logic Earlyinthebook Iwrote So as to prevent eldritch math horrors, predicates cannot be in the do- mainofdiscourse: therearenopredicatesthattakeotherpredicates. Thismakesourlogicafirst-orderlogic. Inahigher-orderlogic,predicatescanbeboth passedasvaluesandusedasquantifiers: Symmetric(P) = all x, y: P(x, y) == P(y, x) Mostmathematiciansprefertostickwithfirst-orderlogicbecausehigherorderlogic is too “powerful”. As one logician I interviewed put it, “you don’t want your logic suddenlybuildingarocketship.”Aroughanalogywouldbeto Turingcompleteness incomputerscience. It’shardertoanalyzea Turingcompletelanguagethanamore limitedone. [[Applications: typetheory,theoreticalcomputerscience Ithink]] C. 3 Constructive Logic Attheveryverybeginningofthebook, Isaid“allpredicatesreturntrueorfalse”. Thisisthe Lawof Excluded Middle: anystatementistrueorfalse. Thereisno“third thing”astatementcanbe. This leads to something unusual: if you want to prove something true, you have the option of proving it “non-false”. And if you want to prove a set is nonempty, youcaninsteadprovethatit’simpossibleforthesettobeempty. Thisiscalleda “non-constructiveproof”,sinceyouaren’tactuallyconstructingavalueinsidethat set. Myfavoriteexampleofthisis Chess. Imagineweareplayingaslightvariationwhere, insteadof Whitealwaysmovingfirst,theycanchoosewhethertomovefirstorsec- ond. Withthisextrarule,wecantriviallyprovethat Whitehasafoolproofstrategy toalwayswinortie: Assume Whitedoesn’thaveafoolproofstrategy. Then,assumingperfectplay,Black alwayswins. Butthen Whitecanpassontheirfirstturn,makingthemeffectivelythe",
      "word_count": 130,
      "char_count": 1805,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 12.89,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_137_0",
      "page": 137,
      "paragraph_index": 0,
      "text": "C. 4. MODALLOGIC 131 secondplayer,andthenfollowthewinningstrategyfor Black. Thismeansthat Black doesn’thaveawinningstrategy,whichmeans Whitemusthaveafoolproofone. It’s an elegant and watertight proof. It also gives us zero information on whatthe foolproofstrategyactuallyis,andsochessremainsstubbornlyintractable. Non-constructiveproofsbothersomemathematicians,whoproposedanalternate formoflogiccalled Constructive Logic. Constructivelogicdoesn’thavethelawofex- cludedmiddle,nordoesithavedouble-negation:youcan’treplace!!Pwith P. These tworemovalsmeanthatwritingproofsandmanipulatingstatementsisharder. But inreturn,itguaranteestheonlywaytoprovetheexistenceofsomethingistoactu- allyfindanexample. Anotherconsequenceofconstructivelogicisthatwithoutexcludedmiddle,impli- cationcanworkalittlemorelikeitdoesinnormallanguage. Thestatement“if Iwas named Greg,then I’dbekingof England”ismathematicaltrueinclassicallogic(I’m notnamed Greg),butit’snotatruestatementindaytodaylife. Anditdoesn’thave tobeinconstructivelogic,either. Functionalprogramming-styletypesystemsareconstructivebynature. Afunction oftype Int->Boolisa“proof”thatifintegersexist,booleansdotoo,becausethere’s awaytoturnanexampleofanintegerintoanexampleofaboolean. C. 4 Modal Logic Predicate logic augments booleans with statements over quantity: is statement P trueforallelementsofaset,ortrueforatleastone? Modallogicinsteadaugments booleanswithstatementsofquality:isstatement Ptrue“necessarily”,or“possibly”? Forexample,sayweweighsomethingandfinditis100grams,butourscalehasan uncertaintyerrorof0. 5grams. Thetrueweightisnecessarilylessthan101grams, andpossiblylessthan99. 9grams. Necessarilyandpossiblyareduals,so“possibly P”isthesameas“notnecessarilynot P”. Beyond that, what “necessarily” and “possibly” mean are vague, which in turn means that there’s many different modal logics. Philosophers use modal logic to explorethenatureofknowledge,morality,uncertainty,andmanyotherthings. Butthemostimportantmodallogicisoneyou’vealreadyseen: themodeoftime. TLA+’s(page100)’salwaysandeventually isjust“necessarily”and“possibly”! Modesareindependentofquantifiers(allandsome): youcanhavemodes,quanti- fiers,orboth.",
      "word_count": 114,
      "char_count": 2168,
      "annotations": {},
      "sentence_count": 29,
      "avg_word_length": 18.03,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_138_0",
      "page": 138,
      "paragraph_index": 0,
      "text": "Appendix D Answers to Exercises Answerto Exercise1 Implication 1. !(Native(p)&&(Q(p)||R(p)))||((RAM(c)&&CPU(c))||GPU(c)) 2. Native(p)&&(Q(p)||R(p))=>(RAM(c)&&CPU(c))||GPU(c) I personally find (2) much easier to read, since we don’t have as many nested ex- pressions. Answerto Exercise2 Can Run Program(c, p) = Native(p) => (RAM(c, p) && CPU(c, p)) || GPU(c, p) Answerto Exercise3 1. (Native(p)=>!Web(p))&&(Web(p)=>!Native(p)) 2. !(Web(p)&&Native(p)) 3. !Native(p)||!Web(p) Answerto Exercise4 Implicationasconditional 1. (c=>x)&&(!c=>y)isequivalentto(!c||x)&&(c||y). Ifyouworkthroughthe cases, youshouldfind that If Then Else istruewhen c istrueand x istrue, or whencisfalseandyistrue. 2. Ashintedbythename If Then Elseissimulatingaconditional. Wecanalsowrite itlikethis: If Else(c: Bool, x: Bool, y: Bool) = if c then x else y Answerto Exercise5 Setsvs Predicates Can Run Program=(RAM&CPU)|GPU 132",
      "word_count": 102,
      "char_count": 897,
      "annotations": {},
      "sentence_count": 19,
      "avg_word_length": 7.8,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_139_0",
      "page": 139,
      "paragraph_index": 0,
      "text": "133 Answerto Exercise6 Disjoint Sets Child&Adult=={}. Anotherwaywouldbe Child-Adult==Child&&Adult-Child== Adult. Answerto Exercise7 Symmetric Difference Onewayis(S-T)|(T-S);anotheris(S|T)-(S&T). Answerto Exercise8 Ifnotasingledeveloperhasreviewedthepr,then Everyone Approvedistrue(allzero reviewersapproved!) while Someone Reviewedisfalse(nobodyreviewedit). Ingeneral,allxin{}:P(x)isalwaystrue(regardlessofwhat Pis)andsomexin{}:P(x) isalwaysfalse. Answerto Exercise9 1. allxin Nat: x<x+1 2. allxin Nat: 0<=x Answerto Exercise10 Nested Quantifiers 1. allprin PR:somedin Developer: Approved By(pr,d) 2. somedin Developer: allprin PR:Reviewed By(pr,d) Answerto Exercise11 alla,bin Int: a>b=>a..<b=a..=b={}. Answerto Exercise12 {x in Int: 1 <= x && x <= 100} Answerto Exercise13 Divides Is Divisible By(num, divisor) = some x in 1..=num: x*divisor = num",
      "word_count": 84,
      "char_count": 849,
      "annotations": {},
      "sentence_count": 14,
      "avg_word_length": 9.12,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_140_0",
      "page": 140,
      "paragraph_index": 0,
      "text": "134 APPENDIXD. ANSWERSTOEXERCISES Answerto Exercise14 some x, y: x != y && P Answerto Exercise15 all x, y, z: (1. x != y 2. y != z 3. z != x ) => P(x, y, z) Aprettygoodargumentforaddingdisj! Answerto Exercise16 allx: P(x) Answerto Exercise17 Herearetwo Icameupwith: 1. “Alldaysthisweekiswarmandsunny”isthesameas“alldays[thisweek]are warmandalldaysaresunny”. 2. “Someonehasblueeyesorgreeneyes”isthesameas“someonehasblueeyes orsomeonehasgreeneyes.” Answerto Exercise18 Therearemanyanswers,herearejusttwo: 1. “Allpeopleare(aliveordead)”istrue,“(allpeoplearealive)or(allpeopleare dead)”isfalse. 2. “Someoneisaliveandsomeoneisdead”istrue,“Someoneisaliveanddead” isfalse. Noticethateachofthemcangooneway. Youcanrewrite“allrocksareblueorall rocksarebrown”into“allrocksareblueorbrown”,butnottheotherwayaround. Answerto Exercise19 Contrapositives Firstrewriteitwas! P||Q. Thenreplace Qwith!(!Q)toget!(!Q)||!P. Thenrewritethat as! Q=>!P.",
      "word_count": 73,
      "char_count": 927,
      "annotations": {},
      "sentence_count": 30,
      "avg_word_length": 11.71,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_141_0",
      "page": 141,
      "paragraph_index": 0,
      "text": "135 Answerto Exercise20 Rewritingifs Startingwithourconditional: 1. if Pthen Qelse R(initialcondition) 2. P=>Q&&!P=>R(definitionofif) 3. !P=>R&&P=>Q(&&iscommutative) 4. !P=>R&&!(!P)=>R(doublenegation) 5. if! Pthen Relse Q(definitionofif) Answerto Exercise21 Yourlanguage'squantifiers Pythonand Haskelluseall()andany().Javascriptuses Array. every()and Array. some(). C++hasstd::all_of()andstd::any_of,andalsohasstd::none_of. Answerto Exercise22 In all x in set: P(x) && some x in set: P(x), the only thing that the some is doing is checkingthatthesetisnonempty,asthat’stheonlycasewhereallxcanbetrueand somexcanbefalse. Sowecanrewritethecodetonothavethat: return l != [] and all(P(x) for x in l) Answerto Exercise23 x<=1||x>10 Answerto Exercise24 Implicationviafiltering Inallxinset: P(x)=>Q(x)weonlycheck Q(x)ontheelementsthatalsosatisfy P(x). Inallxin{x\\inset: P(x)}: Q(x)wefilteroutalloftheelementsthatdon’tsatisfy P(x) andthencheck Q(x)ontherest. Equivalencefollows. Answerto Exercise25 Partial Ordering Recallthat Pteststhatthemaxof[1,2,3]is3,while Rteststhatmaxvaluesof[1,2, 3]and[0,1,-1]are>=0. 1. Topass Randnot P,writeamax(l)=1. Topass Pandnot R,writeamaxthatjust returnsthelastvalueoftheinput. 2.",
      "word_count": 101,
      "char_count": 1204,
      "annotations": {},
      "sentence_count": 26,
      "avg_word_length": 10.93,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_142_0",
      "page": 142,
      "paragraph_index": 0,
      "text": "136 APPENDIXD. ANSWERSTOEXERCISES T = 1. max([1, 2, 3]) == 3 2. max([0, 1, -1]) == 1 Thisfailsbothbuggymaximplementationsgivenabove. 3. “Tisasstrongas Pand R”is T=>P&&R. Since P=>Q,T=>Qtoo,meaning T isasstrongas Q. Answerto Exercise26 The Flawwith False testfalsewillrejectanybuggyimplementationofmax…butitwillalsorejectacor- rect implementation! What makes a given test “a test of max” is that it will pass foracorrectimplementation,meaningfalseisn’tatestofmaxatall(andcannotbe strongerthanthem). Bycontrast,testtrueisavalidtestofmax,andinfacttheweakestpossibletest. Answerto Exercise27 Uniqueness Is Unique(l): all x, y in 0..<len(l): x != y => l[x] != l[y] Or,usingdisj,wecouldwritealldisjx,yinsteadandskipthecondition. Answerto Exercise28 Property Testing Find Inpython: @given(s. lists(s. integers()), s. integers()) def test_myfind(l, x): out = myfind(l, x) if out == -1: assert x not in l else: assert l[out] == x assert x not in l[0:out] Notethatthiswillstatisticallyovertestthecasewherexisnotinl. Partoflearningto use PBTwellisgettingasenseofhowtobestgenerateinputs. Thetechniqueshere arebeyondthescopeofthisbook.",
      "word_count": 114,
      "char_count": 1122,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 8.85,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_143_0",
      "page": 143,
      "paragraph_index": 0,
      "text": "137 Answerto Exercise29 [[Defensive Programming]] Inthenewversionofmax_avail_priceitnolongerrequires“thereisatleastoneavail- ableitem”.Iftherearenoavailableitems,wenevercallmaxanyway,sodon’tviolate itsrequirements. Ontheotherhand,max_avail_price’spostconditionsgetmorecomplicated. If there- turnvalueisanumber,itstillisthehighestpriceofanavailableitem. Ifthereturn valueis None,thentherewerenoavailableitems. Sothenewcontractisthis: max_avail_price(items) returns o helpers: available = `list of available items in items` requires: NOTHING AT ALL ensures: o == None => all i in Item: !i. available o != None => `output is priciest available item`: some i in available: 1. i. price = out 2. all i2 in available: i2. price <= i. price Answerto Exercise30 Funwithsquareroots 1. function: sqrt(x) -> o requires: x >= 0 ensures: o*o = x 2. I’lldothisinsomethinglike Python. # requires: a != 0 # requires: b^2 >= 4ac def quadratic(a, b, c): lhs = -b / (2*a) # requires: b^2 >= 4ac # requires: a != 0 rhs = sqrt(b**2 - 4*a*c) / (2*a) return (lhs + rhs, lhs - rhs) 3. There’sonething Ileftoutofthefunctionalspecificationinpart(1): sqrtguar- anteestheoutputisnonnegative,too.",
      "word_count": 138,
      "char_count": 1166,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 7.46,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_144_0",
      "page": 144,
      "paragraph_index": 0,
      "text": "138 APPENDIXD. ANSWERSTOEXERCISES function: sqrt(x) -> o requires: x >= 0 ensures: o >= 0 ensures: o*o = x Thenthecodebecomes x = 5 # requires (a): x >= 0 y = sqrt(x) # ensures (b): y >= 0 # requires (b): y >= 0 z = sqrt(y) Sotherequirementissatisfied. Answerto Exercise31 ASquareisnota Rectangle Theissueisthatweleftouttheensurancesof Rectangle. set Width: # ensures: width == x # ensures: length == old(length) Rectangle. set Width(x) Inotherwords,set Widthensuresitonly changesthewidth; itdoesnotchangethe length. Square. set Width doesn’t have stronger postconditions, they do not imply Rectangle. set Width Post. Thisproblemgoesawayifwemaketheclassesimmutable. Ingeneral,implementingamutableabstractionisharderthanimplementingamu- tableone. Answerto Exercise32 AMissing Ensurance Itfollowsfromthepreconditions:x>=0andy>0meansthatx/y>0,andfloorcan’t makeapositivenumberintoanegativeone. Sinceq==floor(x/y),q>=0. Answerto Exercise33 Exactnessisnot Validity Onesimpleexample: Table7. 3: Invalid P? out T T T F",
      "word_count": 113,
      "char_count": 1011,
      "annotations": {},
      "sentence_count": 14,
      "avg_word_length": 7.96,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_145_0",
      "page": 145,
      "paragraph_index": 0,
      "text": "139 Thetablehastworows,butisunsound(twocontradictoryinputs)andincomplete (missinganinput). Thismeansitisinvalid. Answerto Exercise34 Fizzbuzz x%3==0? x%5==0? out T T “fizzbuzz” T F “fizz” F T “buzz” F F x Answerto Exercise35 Z W H M T - - T F webcam - F F desk T T F desk F F (Ifixeditbydisablingthewebcammicinthe OSsettings) Answerto Exercise36 Cartesian Cardinalities Firstofall,if Shasselementsand Thastelements,#S*#T==s*t. Sincethecardinal- ityofthesetdoesnotdependonwhatelementsithas,onlythenumberofelements, Icansafelyassumethat S=1..=sand T=1..=t. Now,Ijustneedtoshowthat(1..=s) x(1..=t)hass*telements. Todothis,Iwillputalloftheelementsinagrid: (1, 1) (1, 2) ... (1, t) (2, 1) (2, 2) ... (2, t) . . . . (s, 1) (s, 2) ... (s, t) Thisgridhassrowsandtcolumns,soithass*telements. Answerto Exercise37 Compoundkeys There’stwowayswecandothis. Thefirstistowriteitallasonepredicate:",
      "word_count": 92,
      "char_count": 880,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 8.58,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_146_0",
      "page": 146,
      "paragraph_index": 0,
      "text": "140 APPENDIXD. ANSWERSTOEXERCISES constraint all disj ug1, ug2 in user_groups: ug1. user_id != ug2. user_id || ug1. group_id != ug2. group_id Buttheway I’dprefertodoitinsteadwouldbetofirstwriteahelperoperator,and thenusethatintheactualconstraint. Same User And Group(ug1, ug2: user_groups) = 1. ug1. title = ug2. title 2. ug1. author = ug2. author constraint all disj ug1, ug2 in user_groups: !Same User And Group(ug1, ug2) Answerto Exercise38 constraint Users In Groups Have Email = all ug in user_groups, u in users: ug. user_id = u. id => u. email != NULL Answerto Exercise39 Member Of(u, g) = some ug in user_groups: 1. ug. user_id = u. id 2. ug. group_id = g. id constraint Max Five Members = all g in groups: #{u in User: Member Of(u, g)} <= 5 Answerto Exercise40 Transition Helper Valid Transitions(task, from, to) = t. status = from => t. status' in (to | {from}) (Wehavetowrapfrominbracesbecauseyoucan’tunionasetandastring,onlya setandanotherset.) Answerto Exercise41",
      "word_count": 144,
      "char_count": 976,
      "annotations": {},
      "sentence_count": 28,
      "avg_word_length": 5.78,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_147_0",
      "page": 147,
      "paragraph_index": 0,
      "text": "141 constraint all u, ref in Users: u. referrer = ref => u. created_at > ref. created_at Answerto Exercise42 Novalidbehaviors Ateverystep,Alicemusttransferatleastonedollarto Bob. Eventuallythereissome twherealice[t]==0&&bob[t]==20. Then Alicecan’tmakeatransfer,Transfer(t)is false,andso Specisfalse. Answerto Exercise43 Extendingto Bob Wecanrename Transfer(t)to Transfer Alice To Bob(t),writetheconverseasanewpred- icate,andthenaddittonext. Transfer Bob To Alice(t: Time) = some value in 1..=bob[t]: 1. alice[t+1] == alice[t] - value 2. bob[t+1] == bob[t] + value Next(t) = || Transfer Alice To Bob(t) || Transfer Bob To Alice(t) Now,can Aliceand Bobtransfertoeachotherinthesamestep? No. Let’ssaythey bothstartwith10dollarsandeachtrytotransferfivedollarstoeachother. By Trans- fer Alice To Bobwehave: 1. alice[1] == alice[0] - 5 == 5 2. bob[1] == bob[0] + 5 == 15 Andby Transfer Bob To Alice,wehave: 1. bob[1] == bob[0] - 5 == 5 2. alice[1] == alice[0] + 5 == 15 Sonowwehavealice[1]==5&&alice[1]==15,whichisalwaysfalse. Answerto Exercise44 Stutteringwith Primes Stutter = 1. alice' == alice 2. bob' == bob",
      "word_count": 137,
      "char_count": 1105,
      "annotations": {},
      "sentence_count": 20,
      "avg_word_length": 7.07,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_148_0",
      "page": 148,
      "paragraph_index": 0,
      "text": "142 APPENDIXD. ANSWERSTOEXERCISES Answerto Exercise45 Alwaysrules For(1),wehave: 1. ``[](all x: P(x))`` 2. ``all t in Time: all x: P(t, x)`` (definition of ``always``) 3. ``all x: all t in Time: P(t, x)`` (commutivity of ``all``) 4. ``all x: []P(x)`` (definition of ``always``) (2) issolvedsimilarly,exceptinsteadusingdistributivityinsteadofcommutivity. Answerto Exercise46 Eventuallyrules For(1),wehave 1. <>somex: P(x) 2. sometin Time: somex: P(t,x)(definitionof<>) 3. somex: sometin Time: P(t,x)(commutivityofsome) 4. somex: <>P(x)(definitionof<>) (2) issolvedsimilarly,exceptinsteadusingdistributivityinsteadofcommutivity. (3)issolvedwithduality: 1. <>P 2. sometin Time: P(t) 3. !(alltin Time: !P(t))(duals) 4. ![]!P Answerto Exercise47 There’sacoupleofwaystoshowthis. Thefirstistosaythatiftest1isassignedto server N,foranyotherserver Mwehavetheclause(!a1N||!a1M).Sincewealready havea1N,theonlywayfortheclausetobetrueisif! a1M,ietest1isn’tassignedto M. Anotherwaytoseethisistorewrite(!a11||!a12)&&(!a11||!a13)asa11=>!a12&& a11=>!a13...,whichisequivalenttoa11=>!a12&&!a13&&....",
      "word_count": 91,
      "char_count": 1080,
      "annotations": {},
      "sentence_count": 35,
      "avg_word_length": 10.88,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": true,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_149_0",
      "page": 149,
      "paragraph_index": 0,
      "text": "Index Non-alphabetical I '(prime),69 in(set),10 -(set),11 incomplete,seecomplete -(table),seeany L &(set),11 &&(and),6 liveness,104 =>(implies),8 Logic programming,117 `backticks`(inpredicates),5 loop invariant,55 |(set),11 M ||(or),6 Metamorphic properties,39 A Minizinc,110 action,99 MISU,47 all,14 P Alloy,87 any(table),64 planning,121 assert,41 Plus Cal,101 assertion,41 postcondition,42 power set,11 B precondition,42 behavior,95 predicate,5 proof,53 C Property-Based Testing,36 cartesian product,76 Q complete,65 Conjunctive Normal Form,112 quantifier,12,13 contract,43 scoped quantifier,13 D R Dafny,58 refinement,90 datalog,119 Relational Model,73 Decision Table,63 requires,42 deductive database,119 rewrite rules,18 disj,18 S Domain of Discourse,10 safety,104 E set,10 ensures,42 set filter,12 set map,12 F SMT,113 Formal Specification,86 some,13 Formal verification,58 sound,65 fuzzing,38 specification 143",
      "word_count": 96,
      "char_count": 917,
      "annotations": {},
      "sentence_count": 0,
      "avg_word_length": 8.56,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": true,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    },
    {
      "id": "p_150_0",
      "page": 150,
      "paragraph_index": 0,
      "text": "144 INDEX total,34 subset,11 T Temporal Logic,98 Theorem,20 TLA+,100 truth table,7 U unsound,seesound X x(sets),seecartesianproduct",
      "word_count": 15,
      "char_count": 131,
      "annotations": {},
      "sentence_count": 0,
      "avg_word_length": 7.8,
      "has_numbers": true,
      "has_special_chars": true,
      "starts_with_capital": false,
      "ends_with_punctuation": false,
      "is_question": false,
      "likely_heading": false,
      "likely_list_item": false,
      "likely_quote": false
    }
  ],
  "total_pages": 150,
  "extraction_method": "pdfplumber",
  "processing_time": 20.849496603012085,
  "cached_at": 1759503482.6351972
}